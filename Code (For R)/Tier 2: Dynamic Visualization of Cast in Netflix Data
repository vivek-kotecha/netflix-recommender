# OK in this section, we'll show how you can go about doing this using that same data set.  
# Let's say that this time, I want to be able to dynamically show off whereby I want a quick page showing off the cast variable.  
# Specifically, I want to be able to address it in terms of (a) Credited Cast Content vs. Non-Credited Cast Content, (b) Overall vs. Headlining vs. Supporting Cast 


# STEP 1: Create the UI Section in a manner that presents an organization that matches the projected outlook 

library(bslib)

ui = fluidPage(
      theme = bs_theme(bootswatch = "simplex"),
      wellPanel(tags$h1("All About the Cast")), 
      tags$div(
        HTML("<body>
                <p style = 'font-size: 120%; text-align: justify'> 
                    Let's be honest, what makes or breaks watching something is all about the cast.  So why not look closer at this by checking out how certain cast-credited content differs from non-cast-credited content.  Also, since we want to have a deeper dive, let's look at what are the most credited actor/actress across genre, language and casting type.
                </p>
             </body>")
      ),
      fluidRow(
        column(width = 3, wellPanel(radioButtons(inputId = "cast_charts", label = "What sort of chart involving cast type are you interested in observing?", choices = c("Just looking at cast counts" = "default", "Across content type" = "type", "Across content rating" = "content","English content vs. Non-English content" = "english","Across genres" = 'genre')))), 
        column(width = 8, plotOutput(outputId = "cast_charts"))
      ), 
      tags$br(), 

      fluidRow(
        column(width = 4, wellPanel(
          selectInput(inputId = "cast_comparisons", label = "Observe the top Actors/Actresses by what?", 
                      choices = c("Genre: TV Action & Adventure" = "TV Action & Adventure",
                                  "Genre: Movie Action & Adventure" = "Action & Adventure",
                                  "Genre: TV Drama" = "TV Dramas",
                                  "Genre: Movie Drama" = "Dramas",
                                  "Genre: TV Comedy" = "TV Comedies",
                                  "Genre: Movie Comedy" = "Comedies",
                                  "Genre: TV Horror" = "TV Horror",
                                  "Genre: Movie Horror" = "Horror Movies",
                                  "Genre: Stand-Up/Skits/Talk Shows" = "Stand-Up Comedy & Talk Shows",
                                  "Genre: Stand-Up Specials" = "Stand-Up Comedy",
                                  "Genre: Music & Musicals" = "Music & Musicals",
                                  "Genre: Sports" = "Sports Movies", 
                                  "Genre: LGBTQ" = "LGBTQ Movies",
                                  "Genre: Independent Movies" = "Independent Movies",
                                  "Genre: Classic & Cult TV" = "Classic & Cult TV",
                                  "Genre: Cult Movies" = "Cult Movies",
                                  "Genre: Classic Movies" = "Classic Movies",
                                  "Genre: Korean TV" = "Korean TV Shows",
                                  "Genre: British TV" = "British TV Shows",
                                  "Genre: Spanish TV" = "Spanish-Language TV Shows",
                                  "Genre: Children & Family Movies" = "Children & Family Movies",
                                  "Genre: Kids' TV" = "Kids' TV",
                                  "Genre: Teen TV" = "Teen TV Shows",
                                  "Genre: TV Thriller" = "TV Thrillers",
                                  "Genre: Movie Thriller" = "Thrillers",
                                  "Genre: Reality TV" = "Reality TV", 
                                  "Genre: International Movie" = "International Movies",
                                  "Genre: International TV" = "International TV Shows",
                                  "Genre: TV SciFi & Fantasy" = "TV Sci-Fi & Fantasy", 
                                  "Genre: Movie SciFi & Fantasy" = "Sci-Fi & Fantasy", 
                                  "Genre: Science & Nature TV" = "Science & Nature TV", 
                                  "Genre: TV Romance" = "Romantic TV Shows",
                                  "Genre: Movie Romance" = "Romantic Movies",
                                  "Genre: Anime Features" = "Anime Features",
                                  "Genre: Anime Series" = "Anime Series",
                                  "Genre: Crime TV" = "Crime TV Shows",
                                  "Genre: Mystery TV" = "TV Mysteries", 
                                  "Genre: Documentaries" = "Documentaries",
                                  "Genre: Docuseries" = "Docuseries",
                                  "Genre: Faith & Spirituality" = "Faith & Spirituality")),
          radioButtons(inputId = "cast_language", label = "Are you interested in English-Only Actors/Actresses?", 
                       choices = c("Yes, just English" = "English Speaking",
                                   "No, only Non-English" = "Non-English Speaking",
                                   "Both" = "both")), 
          radioButtons(inputId = "cast_type", label = "What cast billing are you interested in?", 
                       choices = c("Headliners Only" = "headliner",
                                   "Supporting Only" = "supporting cast",
                                   "Both" = "both")))), 
        column(width = 4, plotOutput(outputId = "top_cast")), 
        column(width = 4, uiOutput(outputId = "cast_image")))

)

# STEP 2: Making the necessary back end components..... I'll break this up into parts along the way for the sake of easier reading

server = function(input, output) {

 ## Part 1: Create a reactive element to allow for switching between plots 

 cast_n_director_genre_2 = reactive({switch(input$cast_comparisons, as.character(input$cast_comparisons))})
 
 ## Part 2: Used to create a series of reactive plots 
 
 output$top_cast = renderPlot({
    
    if(input$cast_language == "both" & input$cast_type == "headliner")  {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>% 
        filter(cast_type == "headliner") %>% 
        filter(genre == as.character(cast_n_director_genre_2())) %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>% 
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Headlining  Actors/Actresses", y = "Number of Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "headliner") {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>%
        filter(cast_type == "headliner") %>% 
        filter(genre == as.character(cast_n_director_genre_2())) %>%
        mutate(
          english_or_not = 
            ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
            ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
        ) %>% 
        filter(country_type == "main country") %>%
        filter(english_or_not == "English Speaking") %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>%
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Headlining  Actors/Actresses", y = "Number of English-Speaking Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "headliner") {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>%
        filter(cast_type == "headliner") %>% 
        filter(genre == as.character(cast_n_director_genre_2())) %>%
        mutate(
          english_or_not = 
            ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
            ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
        ) %>% 
        filter(country_type == "main country") %>%
        filter(english_or_not == "Non-English Speaking") %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>%
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Headlining Actors/Actresses", y = "Number of Non-English Speaking Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    } else if (input$cast_language == "both" & input$cast_type == "supporting cast")  {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>% 
        filter(cast_type == "supporting cast") %>% 
        filter(genre == as.character(cast_n_director_genre_2())) %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>% 
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Supporting Actors/Actresses", y = "Number of Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "supporting cast") {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>%
        filter(cast_type == "supporting cast") %>% 
        filter(genre == as.character(cast_n_director_genre_2())) %>%
        mutate(
          english_or_not = 
            ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
            ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
        ) %>% 
        filter(country_type == "main country") %>%
        filter(english_or_not == "English Speaking") %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>%
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Supporting  Actors/Actresses", y = "Number of English-Speaking Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast") {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>%
        filter(cast_type == "supporting cast") %>% 
        filter(genre == as.character(cast_n_director_genre_2())) %>%
        mutate(
          english_or_not = 
            ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
            ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
        ) %>% 
        filter(country_type == "main country") %>%
        filter(english_or_not == "Non-English Speaking") %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>%
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Supporting Actors/Actresses", y = "Number of Non-English Speaking Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    } else if (input$cast_language == "both" & input$cast_type == "both")  {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>% 
        filter(genre == as.character(cast_n_director_genre_2())) %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>% 
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Actors/Actresses", y = "Number of Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "both") {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>%
        filter(genre == as.character(cast_n_director_genre_2())) %>%
        mutate(
          english_or_not = 
            ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
            ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
        ) %>% 
        filter(country_type == "main country") %>%
        filter(english_or_not == "English Speaking") %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>%
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Actors/Actresses", y = "Number of English-Speaking Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "both") {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>%
        filter(genre == as.character(cast_n_director_genre_2())) %>%
        mutate(
          english_or_not = 
            ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
            ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
        ) %>% 
        filter(country_type == "main country") %>%
        filter(english_or_not == "Non-English Speaking") %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>%
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Actors/Actresses", y = "Number of Non-English Speaking Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    }
    
  })
  
  # Part 3: Creating that image element that brings out the top actor for given genre....I don't care if it's right anymore, it's done.   
  
  output$cast_image = renderUI({
    
    url_tie = "https://www.8days.sg/image/13125184/16x9/1920/1080/ceea80d57f8f1737be2104c307e66125/wS/table-read-group-pic.jpg"
    url_nobody = "https://i.pinimg.com/736x/1c/89/56/1c8956908c496c2bf73f9f570bcc5f51.jpg"
    url_niccage = "https://upload.wikimedia.org/wikipedia/commons/f/f3/Nicolas_Cage_-_66%C3%A8me_Festival_de_Venise_%28Mostra%29.jpg"
    url_davidattenborough = "https://upload.wikimedia.org/wikipedia/commons/2/22/Weston_Library_Opening_by_John_Cairns_20.3.15-139_%28cropped%29.jpg"
    url_samuelwest = "https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/3/18/1426700200054/9e009fbf-6815-4c9a-9476-f18c828af913-1589x2040.jpeg?width=700&quality=85&auto=format&fit=max&s=aebf3559791f3fe06c7076bd80cc4880"
    url_adenyoung = "https://media.gq.com/photos/5582864e1177d66d68d51888/1:1/w_409,h_409,c_limit/blogs-the-feed-AdenYoung.jpg"
    url_michelaluci = "https://m.media-amazon.com/images/M/MV5BNmM3MmEwMjktZWZhZS00OWU2LTljNTItMGE0ODJhOWE3MjhiXkEyXkFqcGdeQXVyNTk0ODIyNDE@._V1_.jpg"
    url_elysemaloway = "https://m.media-amazon.com/images/M/MV5BMmRiYWNkZjMtZWE2NS00MDVlLTk5ZmEtY2JkNGQ3OGY5NjM5XkEyXkFqcGdeQXVyOTY2ODkwODg@._V1_QL50_SY1000_CR0,0,691,1000_AL_.jpg"
    url_robertdeniro = "https://resizing.flixster.com/puutVCJcjt79MKQfr_osa_-HGPY=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/55052/55052_v9_bc.jpg"
    url_markduplass = "https://resizing.flixster.com/LQLUXJDEKZ3Jp224Yhb8A2BLmpo=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/444353/444353_v9_bc.jpg"
    url_royhaylock = "https://hips.hearstapps.com/digitalspyuk.cdnds.net/18/29/1531924362-screen-shot-2018-07-18-at-152725.jpg?resize=480:*"
    url_jimparsons = "https://m.media-amazon.com/images/M/MV5BMTg1MTkxODgzMF5BMl5BanBnXkFtZTgwMjExMjgyNzM@._V1_.jpg"
    url_sylvesterstallone = "https://static.onecms.io/wp-content/uploads/sites/20/2021/04/15/sylvester-stallone.jpg"
    url_jeffdunham = "https://www.biography.com/.image/t_share/MTE1ODA0OTcxOTM3ODU5MDg1/jeff-dunham-20682855-1-402.jpg"
    url_jeffross = "https://www.gannett-cdn.com/presto/2020/01/28/PPHX/80d2cd06-b0f1-4ea9-a711-4d817f479bd3-jeff_ross.jpg?crop=814,1086,x0,y68&quality=50&width=640"
    url_davechappelle = "https://s.abcnews.com/images/US/dave-chappelle-file-gty-jef-190507_hpEmbed_10x13_992.jpg"
    url_michaelgross = "https://upload.wikimedia.org/wikipedia/commons/8/85/Michael_Gross_2015.jpg"
    url_adamsandler = "https://resizing.flixster.com/AQbHt8YmgShTUNtgydPFqbwtJ8g=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/2255/2255_v9_bb.jpg"
    url_rickygervais = "https://upload.wikimedia.org/wikipedia/commons/7/79/GervaisBlooms021218-21_%2844341159690%29_%28cropped%29.jpg"
    url_shahrukhkhan = "https://m.media-amazon.com/images/M/MV5BZDk1ZmU0NGYtMzQ2Yi00N2NjLTkyNWEtZWE2NTU4NTJiZGUzXkEyXkFqcGdeQXVyMTExNDQ2MTI@._V1_UY1200_CR107,0,630,1200_AL_.jpg"
    url_jeanetteaw = "https://bingeddata.s3.amazonaws.com/uploads/2020/12/jeanette-aw.jpg"
    url_aaronyan = "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/20130713_%E7%82%8E%E4%BA%9E%E7%B6%B8_%E9%A6%99%E6%B8%AF%E7%9D%A1%E4%B8%8D%E8%91%97%E9%9F%B3%E6%A8%82%E6%9C%83.jpg/1200px-20130713_%E7%82%8E%E4%BA%9E%E7%B6%B8_%E9%A6%99%E6%B8%AF%E7%9D%A1%E4%B8%8D%E8%91%97%E9%9F%B3%E6%A8%82%E6%9C%83.jpg"
    url_taapseepanu = "https://assets.telegraphindia.com/telegraph/2eaa75d3-031e-474a-9706-77d6e18e96d7.jpg"
    url_akshaykumar = "https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.upp-prod-us.s3.amazonaws.com%2Fef6ec084-afbc-11e9-b3e2-4fdf846f48f5?fit=scale-down&source=next&width=700"
    url_emirmahira = "https://assets.mycast.io/actor_images/actor-emir-mahira-148422_large.jpg?1606400895"
    url_supanart = "https://www.wallofcelebrities.com/celebrity/supanart-jittaleela/pictures/xxlarge/supanart-jittaleela_3041667.jpg"
    url_shabanaazmi = "https://upload.wikimedia.org/wikipedia/commons/0/06/Shabana_Azmi_SFU_honorary_degree_%28cropped%29.jpg"
    url_nawazuddinsiddiqui = "https://upload.wikimedia.org/wikipedia/commons/c/ca/Nawazuddin_Siddiqui_-_IIFA_2017_Green_Carpet_%2836349709816%29_%28cropped%29.jpg"
    url_amitabhbachchan = "https://m.media-amazon.com/images/M/MV5BNTk1OTUxMzIzMV5BMl5BanBnXkFtZTcwMzMxMjI0Nw@@._V1_.jpg"
    url_parkboyoung = "https://i.mydramalist.com/vywkBf.jpg"
    url_leeseunggi = "https://www.hellokpop.com/wp-content/uploads/2020/12/lee-seung-gi-the-project.jpg"
    url_paulhollywood = "https://img.huffingtonpost.com/asset/5db07f462100006e28ad3b23.jpeg?cache=cQU58zqd9C&ops=scalefit_630_noupscale"
    url_damandeepsinghbaggan = "http://www.veethi.com/images/people/profile/Damandeep_Singh_Baggan.jpeg"
    url_yuichinakamura = "https://cdn.myanimelist.net/images/voiceactors/2/63264.jpg"
    url_ajaydevgn = "https://m.media-amazon.com/images/M/MV5BMTY0MDY2MDMwOV5BMl5BanBnXkFtZTgwNDE4MDM0OTE@._V1_.jpg"
    url_you = "https://asianwiki.com/images/a/ae/You-p1.jpg"
    url_sharito = "https://m.media-amazon.com/images/M/MV5BY2Q5ZDlmYmMtYTdhMy00MDIzLTkyNmUtMTM0MzU3YmI4NTIxXkEyXkFqcGdeQXVyNTU5ODEyOTE@._V1_.jpg"
    url_yoshitsugu = "https://static.wikia.nocookie.net/free-anime/images/f/f1/Matsuoka_Yoshitsugu.jpg/revision/latest?cb=20181220041854"
    url_wanida = "http://t0.gstatic.com/licensed-image?q=tbn:ANd9GcRWzogTRMa9xkQWYxqvT1ADz9g1rahXQ9K4MeXuNDN-0G_4PHCqgSkdS73XsBzo"
    url_johnlloydcruz = "https://m.media-amazon.com/images/M/MV5BOWJiMWU2YmUtMGNhNC00MDA1LWEzNDMtZDNhYTgzYjI5NDIwL2ltYWdlL2ltYWdlXkEyXkFqcGdeQXVyNTI5NjIyMw@@._V1_.jpg"
    url_junkotakeuchi = "https://m.media-amazon.com/images/M/MV5BNzIzNmM5OGEtMGZiYS00ZTg4LThhYmMtNjYwZDhlNzMwZGIwXkEyXkFqcGdeQXVyNDQxNjcxNQ@@._V1_UY1200_CR120,0,630,1200_AL_.jpg"
    url_anitta = "https://preview.redd.it/ia7oxi16gqa61.jpg?auto=webp&s=4090cf82b931800c56515af6f902d8d3fc9e7527"
    url_fedinuril = "https://assets.mycast.io/actor_images/actor-fedi-nuril-46489_large.jpeg?1582003959"
    url_katedelcastillo = "https://www.nydailynews.com/resizer/zBS6VR4A0aNyJZNGfr7y8B7AVxw=/800x1206/top/arc-anglerfish-arc2-prod-tronc.s3.amazonaws.com/public/EKPPXA3SBHV74XBL6VFWSUUP4Q.jpg"
    url_ajaydevgy = "https://m.media-amazon.com/images/M/MV5BMTY0MDY2MDMwOV5BMl5BanBnXkFtZTgwNDE4MDM0OTE@._V1_.jpg"
    url_selva = "https://www.wallofcelebrities.com/celebrity/selva-rasalingam/pictures/xlarge/selva-rasalingam_2422048.jpg"
    url_stevenyeun = "https://resizing.flixster.com/70lfLovSfQmbvQeitLuVLbclpDY=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/553525/553525_v9_ba.jpg"
    url_samjackson = "https://resizing.flixster.com/_8BNIVrtDPGwx5X061m2w--WDTM=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/71048/71048_v9_ba.jpg"
    url_mikecolter = "https://resizing.flixster.com/BdyhW-GBS_likotgyI-HGaMUXpA=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/259205/259205_v9_bc.jpg"
    url_giancarloesposito = "https://m.media-amazon.com/images/M/MV5BMjEyODM1NjI0OF5BMl5BanBnXkFtZTcwMTE0OTA1Mg@@._V1_UY317_CR4,0,214,317_AL_.jpg"
    url_benmendelsohn ="https://musicimage.xboxlive.com/catalog/video.contributor.c4f76400-0200-11db-89ca-0019b92a3933/image?locale=en-ca&target=circle"
    url_fortune = "https://www.gannett-cdn.com/-mm-/01b0d9658ad6053ad32662001af8fd89a4923222/c=0-236-2788-3953/local/-/media/2016/12/08/USATODAY/USATODAY/636167536833032560-GTY-628425620.jpg"
    url_mayarudolph = "https://pyxis.nymag.com/v1/imgs/39b/d21/c07809551c58120588de51e1017568609f-maya-rudolph.rsquare.w1200.jpg"
    url_burtyoung = "https://resizing.flixster.com/lgbub5tP07A3bRFg0Sk_SPvtj1o=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/9893/9893_v9_bb.jpg"
    url_harveykeitel = "https://media.cntraveler.com/photos/5dc0a1bebb86d20008f920b2/7:10/w_2799,h_3999,c_limit/Mag19_Dec_TR1219_GlobeTrotter01.jpg"
    url_andrealibman = "https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/Andrea_Libman_04_%2814948060937%29.jpg/1200px-Andrea_Libman_04_%2814948060937%29.jpg"
    url_vincenttong = "https://m.media-amazon.com/images/M/MV5BMTQ0OTQ1ODYzNl5BMl5BanBnXkFtZTcwOTM1MzQ5OQ@@._V1_.jpg"
    url_amirbageria = "https://m.media-amazon.com/images/M/MV5BNmY2YWZiMTEtZTI2Yi00NDE2LTk0ZjMtNDE4MTRmODhlNGFmXkEyXkFqcGdeQXVyODI1MjM3MjI@._V1_.jpg"
    url_danielapineida = "https://bingeddata.s3.amazonaws.com/uploads/2020/12/daniella-pineda.jpg"
    url_chloesavingy = "https://resizing.flixster.com/zpUBqPMGVeg58ToHAlQD-x8F3XE=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/172125/172125_v9_ba.jpg"
    url_briancox = "https://upload.wikimedia.org/wikipedia/commons/f/f1/Professor_Brian_Cox_OBE_FRS.jpg"
    url_lenaheadey = "https://m.media-amazon.com/images/M/MV5BMzIwMjIwNjg0M15BMl5BanBnXkFtZTgwOTI3MDEzMDE@._V1_UY317_CR14,0,214,317_AL_.jpg"
    url_laurencefishburne = "https://static.tvtropes.org/pmwiki/pub/images/laurence_fishburne.jpg"
    url_hugoweaving = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQZyGa7Zsf4euxWwXlL3dRU_qMJejsFBp3Q9g&usqp=CAU"
    url_noahcentino = "https://assets.teenvogue.com/photos/5b898ea5a375f111a9664219/master/pass/Netflix%20-NOAH_CENTINEO-115.jpg"
    url_hidekatsushibeda = "https://static.wikia.nocookie.net/snk/images/c/c7/Hidekatsu_Shibata.jpg/revision/latest?cb=20200606011121"
    url_anupamkher = "https://m.media-amazon.com/images/M/MV5BMjMyMjc1OTgzNF5BMl5BanBnXkFtZTgwMDY1NDMzOTE@._V1_UY317_CR4,0,214,317_AL_.jpg"
    url_taypinghui = "https://www.8days.sg/image/11411424/3x4/720/960/89dbd77d7122b5eb441b0e1896c38f41/hu/tph-make-up.jpg"
    url_jameswen = "https://i.mydramalist.com/rvb5g_5f.jpg"
    url_gulshan = "https://m.media-amazon.com/images/M/MV5BMTQ5OTU2NTA5Ml5BMl5BanBnXkFtZTgwNTQyMDU0OTE@._V1_.jpg"
    url_smitamalholtra = 'https://nettv4u.com/imagine/03-12-2020/smita-malhotra.jpg'
    url_umsanghyun = "https://photos.hancinema.net/photos/photo800883.jpg"
    url_takahiro = "https://static.jojowiki.com/images/a/a0/latest/20200520063017/TakahiroSakurai_Infobox.png"
    url_amandachou = "https://i.mydramalist.com/JpzYoc.jpg"
    url_willielindburg = "https://decider.com/wp-content/uploads/2020/06/magnetic.jpg?quality=80&strip=all&w=978"
    url_jamesfranco = "https://m.media-amazon.com/images/M/MV5BMjA4MzMzNDM5MF5BMl5BanBnXkFtZTgwMjQ0MDk0NDM@._V1_UY1200_CR85,0,630,1200_AL_.jpg"
    url_yuki =  "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b1/27th_Tokyo_International_Film_Festival_Y%C5%ABki_Kaji.jpg/1200px-27th_Tokyo_International_Film_Festival_Y%C5%ABki_Kaji.jpg"
    url_nawazuddin = "https://upload.wikimedia.org/wikipedia/commons/c/ca/Nawazuddin_Siddiqui_-_IIFA_2017_Green_Carpet_%2836349709816%29_%28cropped%29.jpg"
    url_umsanghyun = 'https://photos.hancinema.net/photos/photo800883.jpg'
    url_nasseruddinshah = 'https://i.pinimg.com/originals/33/88/ab/3388ab227a1d3cab3c4840d62d4bcf04.jpg'
    
    
  english_headliner_img = 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & (input$cast_comparisons == "Action & Adventure" |
                                                                                              input$cast_comparisons == "Thrillers" | 
                                                                                              input$cast_comparisons == "Sci-Fi & Fantasy")), url_niccage,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & (input$cast_comparisons == "Dramas" | 
                                                                                              input$cast_comparisons == "Classic Movies")), url_robertdeniro,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "TV Comedies"), url_rickygervais,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Comedies"), url_adamsandler,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Horror Movies"), url_michaelgross,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Stand-Up Comedy"), url_jeffdunham,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Sports Movies"), url_sylvesterstallone,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Independent Movies"), url_markduplass,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & (input$cast_comparisons == "British TV Shows" |
                                                                                              input$cast_comparisons == "International TV Shows" |
                                                                                              input$cast_comparisons == "Science & Nature TV")), url_davidattenborough,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Children & Family Movies"), url_elysemaloway,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Kids' TV"), url_elysemaloway,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & (input$cast_comparisons == "International Movies" | 
                                                                                              input$cast_comparisons == "Documentaries" | 
                                                                                              input$cast_compaisons == "Docuseries")), url_samuelwest,
      ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "TV Mysteries"), url_adenyoung, url_nobody)))))))))))))

    
    
  non_english_headliner_img = 
      ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & (input$cast_comparisons == "Action & Adventure" |
                                                                                                   input$cast_comparisons == "Dramas" | 
                                                                                                   input$cast_comparisons == "Comedies" | 
                                                                                                   input$cast_comparisons == "International Movies")), url_shahrukhkhan, 
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Action & Adventure"), url_jeanetteaw, 
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "TV Comedies"), url_aaronyan, 
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Music & Musicals"), url_akshaykumar,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Sports Movies"), url_emirmahira, 
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "LGBTQ Movies"), url_supanart,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Cult Movies"), url_amitabhbachchan, 
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "British TV Shows"), url_paulhollywood,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Teen TV Shows"), url_yuichinakamura,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Thrillers"), url_ajaydevgn,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Reality TV"), url_you,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Sci-Fi & Fantasy"), url_sharito,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Romantic Movies"), url_johnlloydcruz,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Anime Features"), url_junkotakeuchi,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Docuseries"), url_anitta,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Faith & Spirituality"), url_fedinuril,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Children & Family Movies"), url_damandeepsinghbaggan,  url_nobody)))))))))))))))))
    
    
  overall_headliner_img = 
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Action & Adventure" |
                                                                                input$cast_comparisons == "Dramas" | 
                                                                                input$cast_comparisons == "International Movies"), url_shahrukhkhan,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "TV Dramas"), url_jeanette_aw,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "TV Comedies"), url_aaronyan,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Comedies"), url_adamsandler,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Horror Movies"), url_michaelgross,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Stand-Up Comedy"), url_jeffdunham,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Music & Musicals"), url_akshaykumar,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Sports Movies"), url_sylvesterstallone,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Independent Movies"), url_markduplass, 
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Classic Movies"), url_robertdeniro,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & (input$cast_comparisons == "British TV Shows" | 
                                                                                input$cast_comparisons == "Science & Nature TV" | 
                                                                                input$cast_comparisons == "Docuseries")), url_davidattenborough,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Spanish-Language TV Shows"), url_katedelcastillo,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Children & Family Movies"), url_elysemalloway,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Kids' TV"), url_michelaluci, 
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Teen TV Shows"), url_yuichinakamura,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Reality TV"), url_you, 
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "International TV Shows"), url_yoshitsugu,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Sci-Fi & Fantasy"), url_niccage, 
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Romantic Movies"), url_johnlloydcruz, 
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Anime Features"), url_junkotakeuchi, 
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Anime Series"), url_yoshitsugu,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Crime TV Shows"), url_katedelcastillo,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "TV Mysteries"), url_adenyoung,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Documentaries"), url_samuelwest, 
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Faith & Spirituality"), url_selva, url_nobody)))))))))))))))))))))))))
    
    
    
    english_supporting_img = 
      ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Action & Adventure"), url_stevenyeun, 
      ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Action & Adventure"), url_samjackson, 
      ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & (input$cast_comparisons == "Dramas" | 
                                                                                                   input$cast_comparisons == "International Movies")), url_benmendelsohn, 
      ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & (input$cast_comparisons == "TV Comedies" | 
                                                                                                   input$cast_comparisons == "Stand-Up Comedy & Talk Shows" )), url_fortune, 
      ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & (input$cast_comparisons == "Comedies" | 
                                                                                                   input$cast_comparisons == "Music & Musicals")), url_mayarudolph, 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Sports Movies"), url_burtyoung, 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Classic Movies"), url_harveykeitel, 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Children & Family Movies"), url_andrealibman, 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Kids' TV"), url_vincenttong, 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Teen TV Shows"), url_amirbageria , 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Thrillers"), url_briancox, 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Romantic Movies"), url_noahcentino, 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Anime Series"), url_hidekatsushibeda, url_nobody)))))))))))))
  
    
    
    non_english_supporting_img = 
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & (input$cast_comparisons == "Action & Adventure" | 
                                                                                                         input$cast_comparisons == "Dramas" | 
                                                                                                         input$cast_comparisons == "Comedies" | 
                                                                                                         input$cast_comparisons == "International Movies" | 
                                                                                                         input$cast_comparisons == "Romantic Movies")), url_anupamhker,
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & (input$cast_comparisons == "TV Dramas" | 
                                                                                                         input$cast_comparisons == "TV Sci-Fi & Fantasy" )), url_taypinghui,
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Comedies"), url_jameswen,
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Music & Musicals"), url_gulshan,
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Children & Family Movies"), url_smitamalholtra,
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Kids' TV"), url_umsanghyun,
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & (input$cast_comparisons == "International TV Shows" | 
                                                                                                         input$cast_comparisons == "Anime Series")), url_takahiro,
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Romantic TV Shows"), url_amandachou,
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Documentaries"), url_willielindburg, url_nobody)))))))))

    
    
    
    overall_supporting_img = 
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Action & Adventure"), url_stevenyeun ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & (input$cast_comparisons == "Action & Adventure" | 
                                                                                       input$cast_comparisons == "Dramas" | 
                                                                                       input$cast_comparisons == "Comedies" | 
                                                                                       input$cast_comparisons == "Children & Family Movies" | 
                                                                                       input$cast_comparisons == "International Movies" | 
                                                                                       input$cast_comparisons == "Romantic Movies")), url_anupamkher,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Dramas"), url_taypinghui ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Stand-Up Comedy & Talk Shows"), url_fortune ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Music & Musicals"), url_gulshan ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Romantic TV Shows"), url_amandachou ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Sports Movies"), url_burtyoung ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Classic Movies"), url_harveykeitel ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Kids' TV"), url_vincenttong ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "International TV Shows"), url_takahiro ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Anime Series"), url_takahiro ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Documentaries"), url_willielindburg, url_nobody))))))))))))
    
    
    
    english_overall_img = 
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "TV Dramas"), url_mikecolter,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Dramas"), url_jamesfranco,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & (input$cast_comparisons == "TV Comedies" | 
                                                                                          input$cast_comparisons == "Stand-Up Comedy & Talk Shows")), url_fortune,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Comedies"),url_adamsandler,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Horror Movies"), url_michaelgross,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Sports Movies"), url_burtyoung, 
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Independent Movies"), url_markduplass,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Classic Movies"), url_harveykeitel,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "British TV Shows"), url_davidattenborough,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Children & Family Movies"), url_andrealibman,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Kids' TV"), url_vincenttong,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Teen TV Shows"), url_amirbageria,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Thrillers"), url_niccage,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "International Movies"), url_samuelwest,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Science & Nature TV"), url_davidattenborough,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Anime Series"), url_hidekatsushibeda,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Crime TV Shows"), url_mikecolter,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Documentaries"), url_samuelwest,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Docuseries"), url_davidattenborough, url_nobody)))))))))))))))))))
    
    
    non_english_overall_img = 
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Docuseries"), url_anitta,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Documentaries"), url_willielindburg,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Anime Series"), url_takahiro,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Anime Features"), url_yuki,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Romantic Movies"), url_akshaykumar,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Romantic TV Shows"), url_amandachou,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Sci-Fi & Fantasy"), url_sharito,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & (input$cast_comparisons == "TV Sci-Fi & Fantasy" | 
                                                                                             input$cast_comparisons == "TV Dramas")), url_taypinghui,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "International TV Shows"), url_takahiro,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "International Movies"), url_anupamhker,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Thrillers"), url_nawazuddin,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Kid' TV"), url_umsanghyun,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Children & Family Movies"), url_smitamalholtra,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "British TV Shows"), url_paulhollywood,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Independent Movies"), url_nasseruddinshah ,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "LGBTQ Movies"), url_supanart,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & (input$cast_comparisons == "Comedies" | 
                                                                                             input$cast_comparisons == "Action & Adventure")), url_anupamkher ,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "TV Comedies"), url_jameswen ,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Dramas"), url_shahrukhkhan , url_nobody)))))))))))))))))))

    
    
    overall_overall_img = 
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & (input$cast_comparisons == "Action & Advenure" | 
                                                                            input$cast_comparisons == "Comedies")), url_anupamkher,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "TV Dramas"), url_taypinghui,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Dramas"), url_shahrukhkhan,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Horror Movies"), url_michaelgross,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Stand-Up Comedy & Talk Shows"), url_fortune,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Sports Movies"), url_burtyoung,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Independent Movies"), url_nasseruddinshah ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Classic Movies"), url_harveykeitel,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & (input$cast_comparisons == "British TV Shows" | 
                                                                              input$cast_comparisons == "Science & Nature TV" | 
                                                                              input$cast_comparisons == "Docuseries" )), url_davidattenborough,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Children & Family Movies"), url_andrealibman,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Kids' TV"), url_vincenttong,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "International Movies"), url_anupamkher,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & (input$cast_comparisons == "International TV Shows" | 
                                                                              input$cast_comparisons == "Anime Series")), url_takahiro,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Romantic TV Shows"), url_amandachou,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Romantic Movies"), url_akshaykumar,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Anime Features"), url_yuki, 
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Documentaries"), url_samuelwest, url_nobody)))))))))))))))))
    
    
    
    if (input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "TV Action & Adventure") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://resizing.flixster.com/70lfLovSfQmbvQeitLuVLbclpDY=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/553525/553525_v9_ba.jpg' width='250' height='400'>
                  
                  <img src = 'https://resizing.flixster.com/BdyhW-GBS_likotgyI-HGaMUXpA=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/259205/259205_v9_bc.jpg' width='250' height='400'>
    	     </div>")
        )
      
    } else if (input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "TV Comedies") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://www.gannett-cdn.com/-mm-/01b0d9658ad6053ad32662001af8fd89a4923222/c=0-236-2788-3953/local/-/media/2016/12/08/USATODAY/USATODAY/636167536833032560-GTY-628425620.jpg' width='250' height='400'>
                  
                  <img src = 'https://i.mydramalist.com/rvb5g_5f.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Stand-Up Comedy") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://cdn.britannica.com/s:300x1000/98/214998-004-63811061/American-actor-Kevin-Hart-2019.jpg' width='250' height='400'>
                  
                  <img src = 'https://www.biography.com/.image/t_share/MTE1ODA0OTcxOTM3ODU5MDg1/jeff-dunham-20682855-1-402.jpg' width='250' height='400'>
    	     </div>"))
      
    }  else if (input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Thrillers") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMjUxMjE4MTQxMF5BMl5BanBnXkFtZTcwNzc2MDM1NA@@._V1_UY1200_CR125,0,630,1200_AL_.jpg' width='250' height='400'>
                  
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/c/ca/Nawazuddin_Siddiqui_-_IIFA_2017_Green_Carpet_%2836349709816%29_%28cropped%29.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "TV Action & Adventure") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://resizing.flixster.com/70lfLovSfQmbvQeitLuVLbclpDY=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/553525/553525_v9_ba.jpg' width='250' height='400'>
                  
                  <img src = 'https://resizing.flixster.com/BdyhW-GBS_likotgyI-HGaMUXpA=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/259205/259205_v9_bc.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Stand-Up Comedy") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://cdn.britannica.com/s:300x1000/98/214998-004-63811061/American-actor-Kevin-Hart-2019.jpg' width='250' height='400'>
                  
                  <img src = 'https://www.biography.com/.image/t_share/MTE1ODA0OTcxOTM3ODU5MDg1/jeff-dunham-20682855-1-402.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Music & Musicals") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://pyxis.nymag.com/v1/imgs/39b/d21/c07809551c58120588de51e1017568609f-maya-rudolph.rsquare.w1200.jpg' width='250' height='400'>
                  
                  <img src = 'https://pyxis.nymag.com/v1/imgs/538/887/4b3a8492d32cbd52e6bab564ac8f0896fb-06-quincy-jones-feature.rvertical.w570.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Romantic Movies") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://assets.teenvogue.com/photos/5b898ea5a375f111a9664219/master/pass/Netflix%20-NOAH_CENTINEO-115.jpg' width='250' height='400'>
                  
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/5/53/Gerard_Butler_%2829681162176%29.jpg' width='250' height='400'>
    	     </div>"))
      
    }  else if (input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "TV Horror") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://br.web.img3.acsta.net/pictures/19/06/07/18/18/1529620.jpg' width='250' height='400'>
                  
                  <img src = 'https://www.animenewsnetwork.com/images/encyc/P547-1239162282.1472339502.jpg' width='250' height='400'>
    	     </div>"))
      
    }  else if (input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Stand-Up Comedy") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://static.wixstatic.com/media/aba07f_3c205d5920064a9db2e5b739c5adaf55~mv2.jpg/v1/fill/w_560,h_838,al_c,q_85,usm_0.66_1.00_0.01/SOFIA-0556%20(1)%203.webp' width='250' height='400'>
                  
                  <img src = 'https://live.staticflickr.com/5576/31023818345_8c4d6c150a_b.jpg' width='250' height='400'>
    	     </div>"))
      
    }  else if (input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Music & Musicals") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMTQ5OTU2NTA5Ml5BMl5BanBnXkFtZTgwNTQyMDU0OTE@._V1_.jpg' width='250' height='400'>
                  
                  <img src = 'https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.upp-prod-us.s3.amazonaws.com%2Fef6ec084-afbc-11e9-b3e2-4fdf846f48f5?fit=scale-down&source=next&width=700' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "TV Thrillers") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://alchetron.com/cdn/danica-curcic-98795933-1666-4045-8b62-030aaf7c8c8-resize-750.jpeg' width='250' height='400'>
                  
                  <img src = 'https://s4.anilist.co/file/anilistcdn/staff/large/n95024-qsZgGp8VHqMP.png' width='250' height='400'>
    	     </div>"))
      
    } else if ((input$cast_language == "English Speaking" | input$cast_language == "both") & input$cast_type == "headliner" & input$cast_comparisons == "Stand-Up Comedy & Talk Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://www.gannett-cdn.com/presto/2020/01/28/PPHX/80d2cd06-b0f1-4ea9-a711-4d817f479bd3-jeff_ross.jpg?crop=814,1086,x0,y68&quality=50&width=640' width='250' height='400'>
                  
                  <img src = 'https://s.abcnews.com/images/US/dave-chappelle-file-gty-jef-190507_hpEmbed_10x13_992.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if ((input$cast_language == "English Speaking" | input$cast_language == "both") & input$cast_type == "headliner" & input$cast_comparisons == "Stand-Up Comedy & Talk Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://www.gannett-cdn.com/presto/2020/01/28/PPHX/80d2cd06-b0f1-4ea9-a711-4d817f479bd3-jeff_ross.jpg?crop=814,1086,x0,y68&quality=50&width=640' width='250' height='400'>
                  
                  <img src = 'https://s.abcnews.com/images/US/dave-chappelle-file-gty-jef-190507_hpEmbed_10x13_992.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Comedies") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://i.mydramalist.com/rvb5g_5f.jpg' width='250' height='400'>
                  
                  <img src = 'https://www.gannett-cdn.com/-mm-/01b0d9658ad6053ad32662001af8fd89a4923222/c=0-236-2788-3953/local/-/media/2016/12/08/USATODAY/USATODAY/636167536833032560-GTY-628425620.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Sci-Fi & Fantasy") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://resizing.flixster.com/70lfLovSfQmbvQeitLuVLbclpDY=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/553525/553525_v9_ba.jpg' width='250' height='400'>
                  
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMzIwMjIwNjg0M15BMl5BanBnXkFtZTgwOTI3MDEzMDE@._V1_UY317_CR14,0,214,317_AL_.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Anime Features") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b1/27th_Tokyo_International_Film_Festival_Y%C5%ABki_Kaji.jpg/1200px-27th_Tokyo_International_Film_Festival_Y%C5%ABki_Kaji.jpg' width='250' height='400'>
                  
                  <img src = 'https://m.media-amazon.com/images/M/MV5BNTlkNzg3ZmEtNjhjMi00OTM1LWJmMTUtNzdjYTgyZWMxNzYzXkEyXkFqcGdeQXVyNDQxNjcxNQ@@._V1_UX214_CR0,0,214,317_AL_.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Faith & Spirituality") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://i.mydramalist.com/2BJ1W_5f.jpg' width='250' height='400'>
                  
                  <img src = 'https://images.moviefit.me/p/o/86420-dalton-vigh.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Crime TV Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b1/27th_Tokyo_International_Film_Festival_Y%C5%ABki_Kaji.jpg/1200px-27th_Tokyo_International_Film_Festival_Y%C5%ABki_Kaji.jpg' width='250' height='400'>
                  
                  <img src = 'https://static.wikia.nocookie.net/sense8/images/b/bd/ErikHayser.jpg/revision/latest/top-crop/width/360/height/450?cb=20181028060023' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Anime Features") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b1/27th_Tokyo_International_Film_Festival_Y%C5%ABki_Kaji.jpg/1200px-27th_Tokyo_International_Film_Festival_Y%C5%ABki_Kaji.jpg' width='250' height='400'>
                  
                  <img src = 'https://m.media-amazon.com/images/M/MV5BNTlkNzg3ZmEtNjhjMi00OTM1LWJmMTUtNzdjYTgyZWMxNzYzXkEyXkFqcGdeQXVyNDQxNjcxNQ@@._V1_UX214_CR0,0,214,317_AL_.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if ((input$cast_language == "Non-English Speaking" | input$cast_language == "both") & input$cast_type == "supporting cast" & input$cast_comparisons == "Teen TV Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://static.jojowiki.com/images/a/a0/latest/20200520063017/TakahiroSakurai_Infobox.png' width='250' height='400'>
                  
                  <img src = 'https://cdn.myanimelist.net/images/voiceactors/3/60503.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Independent Movies") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://img.theweek.in/content/dam/week/magazine/theweek/leisure/images/2019/9/20/121-Tannishtha-Chatterjee.jpg' width='250' height='400'>
                  
                  <img src = 'https://i.pinimg.com/originals/33/88/ab/3388ab227a1d3cab3c4840d62d4bcf04.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Stand-Up Comedy & Talk Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://img.buzzfeed.com/buzzfeed-static/static/2017-07/10/5/asset/buzzfeed-prod-fastlane-01/sub-buzz-25211-1499679318-3.jpg?downsize=700%3A%2A&output-quality=auto&output-format=auto' width='250' height='400'>
                  
                  <img src = 'https://i.mydramalist.com/GQkO2f.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Horror TV Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://br.web.img3.acsta.net/pictures/19/06/07/18/18/1529620.jpg' width='250' height='400'>
                  
                  <img src = 'https://www.animenewsnetwork.com/images/encyc/P547-1239162282.1472339502.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "LGBTQ Movies") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://hips.hearstapps.com/digitalspyuk.cdnds.net/18/29/1531924362-screen-shot-2018-07-18-at-152725.jpg?resize=480:*' width='250' height='400'>
                  
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMTg1MTkxODgzMF5BMl5BanBnXkFtZTgwMjExMjgyNzM@._V1_.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Horror Movies") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://assets.telegraphindia.com/telegraph/2eaa75d3-031e-474a-9706-77d6e18e96d7.jpg' width='250' height='400'>
                  
                  <img src = 'https://www.celebsfacts.com/wp-content/uploads/2017/05/Luna-Maya.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Independent Movies") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/0/06/Shabana_Azmi_SFU_honorary_degree_%28cropped%29.jpg' width='250' height='400'>
                  
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/c/ca/Nawazuddin_Siddiqui_-_IIFA_2017_Green_Carpet_%2836349709816%29_%28cropped%29.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if ((input$cast_language == "Non-English Speaking" | input$cast_language == "both")& input$cast_type == "headliner" & input$cast_comparisons == "Korean TV Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://i.mydramalist.com/vywkBf.jpg' width='250' height='400'>
                  
                  <img src = 'https://www.hellokpop.com/wp-content/uploads/2020/12/lee-seung-gi-the-project.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if ((input$cast_language == "Non-English Speaking" | input$cast_language == "both") & input$cast_type == "headliner" & input$cast_comparisons == "Romantic TV Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'http://t0.gstatic.com/licensed-image?q=tbn:ANd9GcRWzogTRMa9xkQWYxqvT1ADz9g1rahXQ9K4MeXuNDN-0G_4PHCqgSkdS73XsBzo' width='250' height='400'>
                  
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/20130713_%E7%82%8E%E4%BA%9E%E7%B6%B8_%E9%A6%99%E6%B8%AF%E7%9D%A1%E4%B8%8D%E8%91%97%E9%9F%B3%E6%A8%82%E6%9C%83.jpg/1200px-20130713_%E7%82%8E%E4%BA%9E%E7%B6%B8_%E9%A6%99%E6%B8%AF%E7%9D%A1%E4%B8%8D%E8%91%97%E9%9F%B3%E6%A8%82%E6%9C%83.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Thrilers") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/f/f3/Nicolas_Cage_-_66%C3%A8me_Festival_de_Venise_%28Mostra%29.jpg' width='250' height='400'>
                  
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMTY0MDY2MDMwOV5BMl5BanBnXkFtZTgwNDE4MDM0OTE@._V1_.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Dramas") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://resizing.flixster.com/BdyhW-GBS_likotgyI-HGaMUXpA=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/259205/259205_v9_bc.jpg' width='250' height='400'>
                  
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMjEyODM1NjI0OF5BMl5BanBnXkFtZTcwMTE0OTA1Mg@@._V1_UY317_CR4,0,214,317_AL_.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if ((input$cast_language == "English Speaking" | input$cast_language == "both") & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Thrillers") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://bingeddata.s3.amazonaws.com/uploads/2020/12/daniella-pineda.jpg' width='250' height='400'>
                  
                  <img src = 'https://resizing.flixster.com/zpUBqPMGVeg58ToHAlQD-x8F3XE=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/172125/172125_v9_ba.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "International TV Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMjMxMjU2NzA4N15BMl5BanBnXkFtZTcwODYwMDYwOA@@._V1_.jpg' width='250' height='400'>
                  
                  <img src = 'https://resizing.flixster.com/hU-TST1o5uiDHL0oBf8nv20mOR0=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/25694/25694_v9_bb.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Sci-Fi & Fantasy") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://resizing.flixster.com/70lfLovSfQmbvQeitLuVLbclpDY=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/553525/553525_v9_ba.jpg' width='250' height='400'>
                  
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMzIwMjIwNjg0M15BMl5BanBnXkFtZTgwOTI3MDEzMDE@._V1_UY317_CR14,0,214,317_AL_.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Sci-Fi & Fantasy") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://static.tvtropes.org/pmwiki/pub/images/laurence_fishburne.jpg' width='250' height='400'>
                  
                  <img src = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQZyGa7Zsf4euxWwXlL3dRU_qMJejsFBp3Q9g&usqp=CAU' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Faith & Spirituality") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Corbin_Bernsen_%2825219505510%29.jpg/1200px-Corbin_Bernsen_%2825219505510%29.jpg' width='250' height='400'>
                  
                  <img src = 'https://miro.medium.com/max/240/0*4e61xvRFBPmd1X64.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "TV Thrillers") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://alchetron.com/cdn/danica-curcic-98795933-1666-4045-8b62-030aaf7c8c8-resize-750.jpeg' width='250' height='400'>
                  
                  <img src = 'https://s4.anilist.co/file/anilistcdn/staff/large/n95024-qsZgGp8VHqMP.png' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "headliner" & ( input$cast_comparisons == "TV Action & Adventure" | 
                                                                                              input$cast_comparisons == "TV Dramas" |
                                                                                              input$cast_comparisons == "Music & Musicals" |
                                                                                              input$cast_comparisons == "Cult Movies" |
                                                                                              input$cast_comparisons == "Reality TV" |
                                                                                              input$cast_comparisons == "Romantic Movies" |
                                                                                              input$cast_comparisons == "Crime TV Shows" |
                                                                                              input$cast_comparisons == "Faith & Spirituality")) {
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & (input$cast_comparisons == "Stand-Up Comedy" | 
                                                                                                input$cast_comparisons == "Spanish-Language TV Shows" | 
                                                                                                input$cast_comparisons == "Kids' TV" | 
                                                                                                input$cast_comparisons == "International TV Shows" | 
                                                                                                input$cast_comparisons == "Crime TV Shows" | 
                                                                                                input$cast_comparisons == "Documentaries" | 
                                                                                                input$cast_comparisons == "Anime Series")) {
      
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if (input$cast_language == "both" & input$cast_type == "headliner" & (input$cast_comparisons == "TV Action & Adventure" | 
                                                                                 input$cast_comparisons == "LGBTQ Movies" | 
                                                                                 input$cast_comparisons == "Cult Movies")) {
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & (input$cast_comparisons == "TV Horror" | 
                                                                                                    input$cast_comparisons == "Horror Movies" | 
                                                                                                    input$cast_comparisons == "Stand-Up Comedy" | 
                                                                                                    input$cast_comparisons == "LGBTQ Movies" | 
                                                                                                    input$cast_comparisons == "Independent Movies" | 
                                                                                                    input$cast_comparisons == "Classic & Cult TV" |
                                                                                                    input$cast_comparisons == "Cult Movies" |
                                                                                                    input$cast_comparisons == "British TV Shows" |
                                                                                                    input$cast_comparisons == "Spanish-Language TV Shows" |
                                                                                                    input$cast_comparisons == "Reality TV" |
                                                                                                    input$cast_comparisons == "Romantic TV Shows" |
                                                                                                    input$cast_comparisons == "Crime TV Shows" |
                                                                                                    input$cast_comparisons == "TV Mysteries" |
                                                                                                    input$cast_comparisons == "Documentaries" |
                                                                                                    input$cast_comparisons == "Docuseries")) {
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & (input$cast_comparisons == "TV Action & Adventure" | 
                                                                                                       input$cast_comparisons == "Horror Movies" | 
                                                                                                       input$cast_comparisons == "Sports Movies" | 
                                                                                                       input$cast_comparisons == "Cult Movies" | 
                                                                                                       input$cast_comparisons == "Classic Movies" | 
                                                                                                       input$cast_comparisons == "Korean TV Shows" | 
                                                                                                       input$cast_comparisons == "Spanish-Language TV Shows" | 
                                                                                                       input$cast_comparisons == "Thrillers" |
                                                                                                       input$cast_comparisons == "Reality TV" |  
                                                                                                       input$cast_comparisons == "Sci-Fi & Fantasy" | 
                                                                                                       input$cast_comparisons == "TV Mysteries")) {
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if (input$cast_language == "both" & input$cast_type == "supporting cast" & (input$cast_comparisons == "TV Horror" |
                                                                                       input$cast_comparisons == "Horror Movies" | 
                                                                                       input$cast_comparisons == "Stand-Up Comedy" | 
                                                                                       input$cast_comparisons == "LGBTQ Movies" | 
                                                                                       input$cast_comparisons == "Independent Movies" | 
                                                                                       input$cast_comparisons == "Classic & Cult TV" | 
                                                                                       input$cast_comparisons == "Cult Movies" | 
                                                                                       input$cast_comparisons == "Korean TV Shows" | 
                                                                                       input$cast_comparisons == "British TV Shows" | 
                                                                                       input$cast_comparisons == "Spanish-Language TV Shows" | 
                                                                                       input$cast_comparisons == "TV Thrillers" | 
                                                                                       input$cast_comparisons == "Thrillers" | 
                                                                                       input$cast_comparisons == "Reality TV" | 
                                                                                       input$cast_comparisons == "Sci-Fi & Fantasy" | 
                                                                                       input$cast_comparisons == "Crime TV Shows" | 
                                                                                       input$cast_comparisons == "TV Mysteries" | 
                                                                                       input$cast_comparisons == "Docuseries" | 
                                                                                       input$cast_comparisons == "Faith & Spirituality")) {
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "both" & (input$cast_comparisons == "Action & Adventure" | 
                                                                                        input$cast_comparisons == "TV Horror" | 
                                                                                        input$cast_comparisons == "LGBTQ Movies" | 
                                                                                        input$cast_comparisons == "Classic & Cult TV" | 
                                                                                        input$cast_comparisons == "Cult Movies" | 
                                                                                        input$cast_comparisons == "Spanish-Language TV Shows" | 
                                                                                        input$cast_comparisons == "Reality TV" | 
                                                                                        input$cast_comparisons == "International TV Shows" | 
                                                                                        input$cast_comparisons == "TV Sci-Fi & Fantasy" | 
                                                                                        input$cast_comparisons == "Sci-Fi & Fantasy" | 
                                                                                        input$cast_comparisons == "Romantic TV Shows" | 
                                                                                        input$cast_comparisons == "TV Mysteries" | 
                                                                                        input$cast_comparisons == "Faith & Spirituality")) {
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "both" & (input$cast_comparisons == "Faith & Spirituality" | 
                                                                                            input$cast_comparisons == "TV Mysteries" |
                                                                                            input$cast_comparisons == "Crime TV Shows" |
                                                                                            input$cast_comparisons == "Reality TV" |
                                                                                            input$cast_comparisons == "Teen TV Shows" |
                                                                                            input$cast_comparisons == "Spanish-Language TV Shows" |
                                                                                            input$cast_comparisons == "Korean TV Shows" |
                                                                                            input$cast_comparisons == "Classic Movies" |
                                                                                            input$cast_comparisons == "Cult Movies" |
                                                                                            input$cast_comparisons == "Sports Movies" |
                                                                                            input$cast_comparisons == "Stand-Up Comedy & Talk Shows" |
                                                                                            input$cast_comparisons == "Horror Movies" |
                                                                                            input$cast_comparisons == "TV Action & Adventure")) {
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if (input$cast_language == "both" & input$cast_type == "both" & (input$cast_comparisons == "TV Horror" | 
                                                                            input$cast_comparisons == "Music & Musicals" | 
                                                                            input$cast_comparisons == "LGBTQ Movies" | 
                                                                            input$cast_comparisons == "Classic & Cult TV" | 
                                                                            input$cast_comparisons == "Cult Movies" | 
                                                                            input$cast_comparisons == "Korean TV Shows" | 
                                                                            input$cast_comparisons == "Spanish-Language TV Shows" | 
                                                                            input$cast_comparisons == "Teen TV Show" | 
                                                                            input$cast_comparisons == "TV Thrillers" | 
                                                                            input$cast_comparisons == "Reality TV" | 
                                                                            input$cast_comparisons == "TV Sci-Fi & Fantasy" | 
                                                                            input$cast_comparisons == "Sci-Fi & Fantasy" | 
                                                                            input$cast_comparisons == "Crime TV Shows" | 
                                                                            input$cast_comparisons == "TV Mysteries" | 
                                                                            input$cast_comparisons == "Faith & Spirituality")) {
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "headliner") {
      
      tags$img(src = english_headliner_img, width = "275", height = '400')
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "headliner") {
      
      tags$img(src = non_english_headliner_img, width = "275", height = '400')
      
    } else if (input$cast_language == "both" & input$cast_type == "headliner") {
      
      tags$img(src = overall_headliner_img, width = "275", height = '400')
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "supporting cast") {
      
      tags$img(src = english_supporting_img, width = "275", height = '400')
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast") {
      
      tags$img(src = non_english_supporting_img, width = "275", height = '400')
      
    } else if (input$cast_language == "both" & input$cast_type == "supporting cast") {
      
      tags$img(src = overall_supporting_img, width = "275", height = '400')
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "both") {
      
      tags$img(src = english_overall_img, width = "275", height = '400')
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "both") {
      
      tags$img(src = non_english_overall_img, width = "275", height = '400')
      
    } else if (input$cast_language == "both" & input$cast_type == "both") {
      
      tags$img(src = overall_overall_img, width = "275", height = '400')
      
    }
    
  })
  
  # Part 4: Create the plots comparing credited and non-credited cast content
  
  output$cast_charts = renderPlot({
    
    if (input$cast_charts == "default") {
      
      netflix_cast_split %>% 
        mutate(
          any_cast = ifelse(cast == "Unknown/No Cast", "no", "yes")
        ) %>% 
        group_by(any_cast) %>% 
        summarise(count = n()) %>% 
        ggplot(aes(x = reorder(any_cast, count), y = count, fill = any_cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        scale_fill_manual(values = c("yes" = 'firebrick2', 'no' = 'slateblue3')) + 
        theme_classic() + 
        theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 15),
          axis.text.x = element_text(size = 15),
          plot.title = element_text(size = 20, hjust = 0.5),
          axis.title.x = element_text(size = 15),
          axis.title.y = element_text(size = 15), 
          strip.text.x =  element_text(size = 15, color = 'black')
        ) + 
        guides(fill = FALSE) + 
        labs(x = "Presence of a Credited Cast?", y = "Number of Netflix Content", title = "Breakdown of Netflix Content by Presence of Credited Cast") + 
        coord_flip()
    } else if (input$cast_charts == "english") {
      
      netflix_countryxcast_df %>% 
        mutate(
          any_cast = ifelse(cast == "Unknown/No Cast", "no", "yes")
        ) %>% 
        mutate(
          english_or_not = 
            ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
            ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
        ) %>%
        filter(country_type == "main country") %>% 
        filter(!is.na(english_or_not)) %>% 
        group_by(any_cast, english_or_not) %>% 
        summarise(count = n()) %>% 
        ggplot(aes(x = reorder(any_cast, count), y = count, fill = any_cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        scale_fill_manual(values = c("yes" = 'firebrick2', 'no' = 'slateblue3')) + 
        theme_classic() + 
        labs(x = "Presence of a Credited Cast?", y = "Number of Netflix Content", title = "Breakdown of Netflix Content by Presence of Credited Cast and Language") + 
        theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 15),
          axis.text.x = element_text(size = 15),
          plot.title = element_text(size = 20, hjust = 0.5),
          axis.title.x = element_text(size = 15),
          axis.title.y = element_text(size = 15), 
          strip.text.x =  element_text(size = 15, color = 'black')
        ) + 
        guides(fill = FALSE) + 
        coord_flip() + 
        facet_wrap(vars(english_or_not))
      
    } else if (input$cast_charts == "type") {
      
      netflix_cast_split %>% 
        mutate(
          any_cast = ifelse(cast == "Unknown/No Cast", "no", "yes")
        ) %>%
        group_by(any_cast, type) %>% 
        summarise(count = n()) %>% 
        ggplot(aes(x = reorder(any_cast, count), y = count, fill = any_cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        scale_fill_manual(values = c("yes" = 'firebrick2', 'no' = 'slateblue3')) + 
        theme_classic() + 
        labs(x = "Presence of a Credited Cast?", y = "Number of Netflix Content", title = "Breakdown of Netflix Content by Presence of Credited Cast and Content Type") + 
        theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 15),
          axis.text.x = element_text(size = 15),
          plot.title = element_text(size = 25, hjust = 0.5),
          axis.title.x = element_text(size = 15),
          axis.title.y = element_text(size = 15), 
          strip.text.x =  element_text(size = 15, color = 'black')
        ) + 
        guides(fill = FALSE) + 
        coord_flip() + 
        facet_wrap(vars(type))
      
    } else if (input$cast_charts == "genre") {
      
      netflix_genrexcast_df %>% 
        mutate(
          any_cast = ifelse(cast == "Unknown/No Cast", "no", "yes")
        ) %>%
        group_by(any_cast, genre) %>% 
        summarise(count = n()) %>% 
        ggplot(aes(x = reorder(any_cast, count), y = count, fill = any_cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        scale_fill_manual(values = c("yes" = 'firebrick2', 'no' = 'slateblue3')) + 
        theme_classic() + 
        labs(x = "Presence of a Credited Cast?", y = "Number of Netflix Content", title = "Breakdown of Netflix Content by Presence of Credited Cast and Genre") + 
        theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 15),
          axis.text.x = element_text(size = 15, angle = 90),
          plot.title = element_text(size = 25, hjust = 0.5),
          axis.title.x = element_text(size = 15),
          axis.title.y = element_text(size = 15), 
          strip.text.x =  element_text(size = 8, color = 'black')
        ) + 
        guides(fill = FALSE) + 
        coord_flip() + 
        facet_wrap(vars(genre))
      
    }  else if (input$cast_charts == "content") {
      
      netflix_cast_split %>% 
        mutate(
          any_cast = ifelse(cast == "Unknown/No Cast", "no", "yes")
        ) %>%
        group_by(any_cast, rating) %>% 
        summarise(count = n()) %>% 
        ggplot(aes(x = reorder(any_cast, count), y = count, fill = any_cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        scale_fill_manual(values = c("yes" = 'firebrick2', 'no' = 'slateblue3')) + 
        theme_classic() + 
        labs(x = "Presence of a Credited Cast?", y = "Number of Netflix Content", title = "Breakdown of Netflix Content by Presence of Credited Cast and Content Rating") + 
        theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 15),
          axis.text.x = element_text(size = 15),
          plot.title = element_text(size = 20, hjust = 0.5),
          axis.title.x = element_text(size = 15),
          axis.title.y = element_text(size = 15), 
          strip.text.x =  element_text(size = 15, color = 'black')
        ) + 
        guides(fill = FALSE) + 
        coord_flip() + 
        facet_wrap(vars(rating))
      
    }
    
  })
  
} 

shinyApp(ui = ui, server = server)
