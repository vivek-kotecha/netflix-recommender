server = function(input, output) {

  # Including the interactive widget that ask whether to add interaction variable when analysing content type

	output$interaction_terms = renderUI({
	
	   if (input$content_type == "default") {
		print("")
	   } else {
		radioButtons(
				inputId = "input_interaction",
				label = "Do you want to add an interaction variable?",
				choices = c("No" = "no", "Yes" = "yes")
			)
	   }
	
	})

   # Include an actual widget containing the various interactions possible based on the original selection

	output$actual_interaction_variable = renderUI({

	   if (input$content_type == "country" & input$input_interaction == "yes") {

		selectInput(
			inputId = "Interaction_content_1",
			label = "What is the interaction varaible that you want to add?",
			choices = c(
		                     "Content Rating: TV-MA " = "tvma", 
		                     "Content Rating: NC-17" = "nc17",
                                     "Content Rating: R-Rated" = "r",
                                     "Content Rating: PG-13" = "pg13", 
                                     "Content Rating: TV-14" = "tv14", 
                                     "Content Rating: TV-PG" = "tvpg",
                                     "Content Rating: TV-Y" = "tvy",
                                     "Content Rating: TV-G" = "tvg",
                                     "Content Rating: PG" = "pg",
                                     "Content Rating: G" = "g",
                                     "Content Rating: TV-Y7" = "tvy7",
                                     "Content Rating: Not Rated" = "nr",
                                     "Content Rating: TV-Y7-FV" = "tvy7fv",
                                     "Genre: Action & Adventure" = "action",
                                     "Genre: Drama" = "drama",
                                     "Genre: Comedy" = "comedy",
                                     "Genre: Horror" = "horror",
                                     "Genre: Stand-Up" = "standup",
                                     "Genre: Music & Musicals" = "music",
                                     "Genre: Sports" = "sports", 
                                     "Genre: LGBTQ" = "lgbtq",
                                     "Genre: Independent Movies" = "independent",
                                     "Genre: Classic and/or Cult" = "classic",
                                     "Genre: Korean TV" = "korean",
                                     "Genre: British TV" = "british",
                                     "Genre: Spanish TV" = "spanish",
                                     "Genre: Children & Family Movies" = "familymovie",
                                     "Genre: Thriller" = "thriller",
                                     "Genre: Reality TV" = "reality", 
                                     "Genre: International" = "international",
                                     "Genre: SciFi & Fantasy" = "scifi", 
                                     "Genre: Science & Nature TV" = "science", 
                                     "Genre: Romantic" = "romance",
                                     "Genre: Anime" = "anime", 
                                     "Genre: Crime TV" = "crime",
                                     "Genre: Mystery TV" = "mystery", 
                                     "Genre: Documentaries" = "documentary",
                                     "Genre: Faith & Spirituality" = "faith")
		)		

	   } else if (input$content_type == "rating" & input$input_interaction == "yes") {

		selectInput(
			inputId = "Interaction_content_2",
			label = "What is the interaction varaible that you want to add?",
			choices = c(
		                     "Language: English-Speaking" = "english", 
                      		     "Language: Non English-Speaking" = "non_english",
                                     "Genre: Action & Adventure" = "action",
                                     "Genre: Drama" = "drama",
                                     "Genre: Comedy" = "comedy",
                                     "Genre: Horror" = "horror",
                                     "Genre: Stand-Up" = "standup",
                                     "Genre: Music & Musicals" = "music",
                                     "Genre: Sports" = "sports", 
                                     "Genre: LGBTQ" = "lgbtq",
                                     "Genre: Independent Movies" = "independent",
                                     "Genre: Classic and/or Cult" = "classic",
                                     "Genre: Korean TV" = "korean",
                                     "Genre: British TV" = "british",
                                     "Genre: Spanish TV" = "spanish",
                                     "Genre: Children & Family Movies" = "familymovie",
                                     "Genre: Thriller" = "thriller",
                                     "Genre: Reality TV" = "reality", 
                                     "Genre: International" = "international",
                                     "Genre: SciFi & Fantasy" = "scifi", 
                                     "Genre: Science & Nature TV" = "science", 
                                     "Genre: Romantic" = "romance",
                                     "Genre: Anime" = "anime", 
                                     "Genre: Crime TV" = "crime",
                                     "Genre: Mystery TV" = "mystery", 
                                     "Genre: Documentaries" = "documentary",
                                     "Genre: Faith & Spirituality" = "faith")
		)

	   } else if (input$content_type == "genre" & input$input_interaction == "yes") {
        		selectInput(
          			inputId = "Interaction_content_3", 
          			label = "What is the interaction variable that you want to add?",
          			choices = c("Language: English-Speaking" = "english", 
                      			    "Language: Non English-Speaking" = "non_english",
                      			    "Content Rating: TV-MA " = "tvma", 
                      			    "Content Rating: NC-17" = "nc17",
                      			    "Content Rating: R-Rated" = "r",
                      			    "Content Rating: PG-13" = "pg13", 
                      			    "Content Rating: TV-14" = "tv14", 
                      			    "Content Rating: TV-PG" = "tvpg",
                      			    "Content Rating: TV-Y" = "tvy",
                      			    "Content Rating: TV-G" = "tvg",
                      			    "Content Rating: PG" = "pg",
                      			    "Content Rating: G" = "g",
                      			    "Content Rating: TV-Y7" = "tvy7",
                      			    "Content Rating: Not Rated" = "nr",
                      			    "Content Rating: TV-Y7-FV" = "tvy7fv")
        			    )

	  } else {
        		print("")
      	  }

	})

  # Create a series of plots based on the selection....NOTE: did not plan this out right and no way to separate it out to make reactive elements, so had to make 21+ plots

  output$content_chart = renderPlot({ 

	if (input$content_type == "default") {
        		netflix %>%
        		mutate(`content type` = type) %>%
        		group_by(`content type`) %>% 
        		summarise(count = n()) %>% 
        		ggplot(aes(x = "", y = count, fill = `content type`)) + 
        		geom_bar(stat = 'identity', color = 'black') + 
        		scale_fill_manual(values = c("Movie" = "firebrick2", "TV Show" = "slateblue3")) + 
        		labs(x = "", y = "", title = "Breakdown of Content Type on Netflix") + 
        		coord_polar(theta = 'y', start = 0) + 
        		geom_text(
				aes(label = paste0(round((count/sum(count))*100, 2), "%")), 
				position = position_stack(vjust = 0.5), 
				color = "white", 
				fontface = "bold", 
				size = 15) +
        		theme_classic() + 
        		theme(
          			axis.line = element_blank(),
          			axis.text = element_blank(), 
          			axis.ticks = element_blank(), 
          			legend.title = element_blank(),
          			legend.text = element_text(size = 30),
          			plot.title = element_text(size = 30, hjust = 0.5)
        		)
       
     	} else if (input$content_type == "country" & input$input_interaction == "no") {
        		netflix_country_split %>% 
        		mutate(english_or_not = 
          			ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          			ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))) %>%
        		filter(country_type == "main country") %>% 
		        group_by(type, english_or_not) %>% 
		        summarise(count = n()) %>% 
		        ggplot(
				aes(x = reorder(type, count), 
				    y = count, 
				    fill = type)
			) + 
        		geom_bar(stat = 'identity', color = 'black') + 
        		scale_fill_manual(
				values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")
			) +
        		labs(x = "Content Type", 
			     y = "Number of Content on Netflix", 
			     title = "Breakdown of Netflix Content by Type and Language") +
        		theme_classic() +
        		theme(
          			axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 20), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black')
        		) + 
	         	guides(fill = F) + 
         		facet_wrap(vars(english_or_not)) + 
         		coord_flip()
       
     } else if (input$content_type == "genre" & input$input_interaction == "no") {
        		netflix_genre_split %>%
         		group_by(type, genre) %>% 
         		summarise(count = n()) %>% 
         		ggplot(aes(x = reorder(type,count), 
				   y = count, 
				   fill = type)) + 
         		geom_bar(stat = 'identity', 
				 color = 'black') + 
         		scale_fill_manual(values = c("TV Show" = "slateblue3", 
						     "Movie" = "firebrick2"))  +
         		labs(x = "Content Type", 
			     y = "Number of Content on Netflix", 
			     title = "Breakdown of Netflix Content by Type and Genre") + 
         		theme_classic() + 
         		guides(fill = F) + 
         		facet_wrap(vars(genre)) + 
         		theme(
          			axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 17, angle = 90),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 10, color = 'black')) + 
         		coord_flip()
       
     } else if (input$content_type == "rating" & input$input_interaction == "no") {
       
       			netflix %>% 
         		group_by(type, rating) %>% 
         		summarise(count = n()) %>%
         		ggplot(aes(x = reorder(type, count), 
				   y = count, 
				   fill = type)) + 
         		geom_bar(stat = 'identity', 
				 color = 'black') + 
         		scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2"))  +
         		labs(x = "Content Type", 
			     y = "Number of Content on Netflix", 
			     title = "Breakdown of Netflix Content by Type and Content Rating") + 
         		theme_classic() +
         		guides(fill = F) + 
         		facet_wrap(vars(rating)) +
         		theme(
          			axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black')
         		) + 
         		coord_flip()
     
	} else if (input$content_type == "country" & input$Interaction_content_1 == "tvma") {
       
       			netflix_country_split %>% 
         		mutate(
         		 	english_or_not = 
          			ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
         		 	ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          			ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         		) %>% 
         		filter(!is.na(english_or_not)) %>%
         		filter(rating == "TV-MA") %>% 
         		group_by(type, english_or_not) %>% 
         		summarise(count = n()) %>% 
         		arrange(desc(count)) %>% 
         		ggplot(aes(x = reorder(type, count), 
				   y = count, 
				   fill = type)) +
         		geom_bar(stat = 'identity', color = 'black') + 
         		scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2"))  +
         		labs(x = "Content Type", 
			     y = "Number of Content on Netflix", 
			     title = "Breakdown of TV-MA Rated Content by Type and Language") +
         		theme_classic() + 
         		theme(
          			axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black')
         		) + 
         		facet_wrap(vars(english_or_not)) +
         		coord_flip() + 
         		guides(fill = F)
       

     } else if (input$content_type == "country" & input$Interaction_content_1 == "nc17") {
       
       			netflix_country_split %>% 
         		mutate(
		          english_or_not = 
			          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
			          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
		         ) %>% 
		         filter(!is.na(english_or_not)) %>%
		         filter(rating == "NC-17") %>% 
		         group_by(type, english_or_not) %>% 
		         summarise(count = n()) %>% 
		         arrange(desc(count)) %>% 
		         ggplot(aes(x = reorder(type, count), 
				    y = count, 
				    fill = type)) +
		         geom_bar(stat = 'identity', color = 'black') + 
		         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2"))  +
		         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of NC-17 Rated Content by Type and Language") +
		         theme_classic() + 
		         theme(
		          	axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black')
		         ) + 
		         facet_wrap(vars(english_or_not)) +
		         coord_flip() + 
		         guides(fill = F)
       
    } else if (input$content_type == "country" & input$Interaction_content_1 == "r") {
       
       netflix_country_split %>% 
         		mutate(
		          english_or_not = 
			          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
			          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
		         ) %>% 
		         filter(!is.na(english_or_not)) %>%
		         filter(rating == "R") %>% 
		         group_by(type, english_or_not) %>% 
		         summarise(count = n()) %>% 
		         arrange(desc(count)) %>% 
		         ggplot(aes(x = reorder(type, count), 
				    y = count, 
				    fill = type)) +
		         geom_bar(stat = 'identity', color = 'black') + 
		         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2"))  +
		         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of R Rated Content by Type and Language") +
		         theme_classic() + 
		         theme(
		          	axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black')
		         ) + 
		         facet_wrap(vars(english_or_not)) +
		         coord_flip() + 
		         guides(fill = F)
       
     } else if (input$content_type == "country" & input$Interaction_content_1 == "pg13") {
       
       netflix_country_split %>% 
         		mutate(
		          english_or_not = 
			          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
			          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
		         ) %>% 
		         filter(!is.na(english_or_not)) %>%
		         filter(rating == "PG-13") %>% 
		         group_by(type, english_or_not) %>% 
		         summarise(count = n()) %>% 
		         arrange(desc(count)) %>% 
		         ggplot(aes(x = reorder(type, count), 
				    y = count, 
				    fill = type)) +
		         geom_bar(stat = 'identity', color = 'black') + 
		         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2"))  +
		         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of PG-13 Rated Content by Type and Language") +
		         theme_classic() + 
		         theme(
		          	axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black')
		         ) + 
		         facet_wrap(vars(english_or_not)) +
		         coord_flip() + 
		         guides(fill = F)
       
     } else if (input$content_type == "country" & input$Interaction_content_1 == "tv14") {
       
       netflix_country_split %>% 
         		mutate(
		          english_or_not = 
			          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
			          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
		         ) %>% 
		         filter(!is.na(english_or_not)) %>%
		         filter(rating == "TV-14") %>% 
		         group_by(type, english_or_not) %>% 
		         summarise(count = n()) %>% 
		         arrange(desc(count)) %>% 
		         ggplot(aes(x = reorder(type, count), 
				    y = count, 
				    fill = type)) +
		         geom_bar(stat = 'identity', color = 'black') + 
		         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2"))  +
		         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of TV-14 Rated Content by Type and Language") +
		         theme_classic() + 
		         theme(
		          	axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black')
		         ) + 
		         facet_wrap(vars(english_or_not)) +
		         coord_flip() + 
		         guides(fill = F)
       
     } else if (input$content_type == "country" & input$Interaction_content_1 == "tvpg") {
       
       netflix_country_split %>% 
         		mutate(
		          english_or_not = 
			          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
			          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
		         ) %>% 
		         filter(!is.na(english_or_not)) %>%
		         filter(rating == "TV-PG") %>% 
		         group_by(type, english_or_not) %>% 
		         summarise(count = n()) %>% 
		         arrange(desc(count)) %>% 
		         ggplot(aes(x = reorder(type, count), 
				    y = count, 
				    fill = type)) +
		         geom_bar(stat = 'identity', color = 'black') + 
		         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2"))  +
		         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of TV-PG Rated Content by Type and Language") +
		         theme_classic() + 
		         theme(
		          	axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black')
		         ) + 
		         facet_wrap(vars(english_or_not)) +
		         coord_flip() + 
		         guides(fill = F)
       
     } else if (input$content_type == "country" & input$Interaction_content_1 == "tvy") {
       
       netflix_country_split %>% 
         		mutate(
		          english_or_not = 
			          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
			          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
		         ) %>% 
		         filter(!is.na(english_or_not)) %>%
		         filter(rating == "TV-Y") %>% 
		         group_by(type, english_or_not) %>% 
		         summarise(count = n()) %>% 
		         arrange(desc(count)) %>% 
		         ggplot(aes(x = reorder(type, count), 
				    y = count, 
				    fill = type)) +
		         geom_bar(stat = 'identity', color = 'black') + 
		         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2"))  +
		         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of TV-Y Rated Content by Type and Language") +
		         theme_classic() + 
		         theme(
		          	axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black')
		         ) + 
		         facet_wrap(vars(english_or_not)) +
		         coord_flip() + 
		         guides(fill = F)
       
     } else if (input$content_type == "country" & input$Interaction_content_1 == "tvg") {
       
       netflix_country_split %>% 
         		mutate(
		          english_or_not = 
			          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
			          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
		         ) %>% 
		         filter(!is.na(english_or_not)) %>%
		         filter(rating == "TV-G") %>% 
		         group_by(type, english_or_not) %>% 
		         summarise(count = n()) %>% 
		         arrange(desc(count)) %>% 
		         ggplot(aes(x = reorder(type, count), 
				    y = count, 
				    fill = type)) +
		         geom_bar(stat = 'identity', color = 'black') + 
		         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2"))  +
		         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of TV-G Rated Content by Type and Language") +
		         theme_classic() + 
		         theme(
		          	axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black')
		         ) + 
		         facet_wrap(vars(english_or_not)) +
		         coord_flip() + 
		         guides(fill = F)
       
     } else if (input$content_type == "country" & input$Interaction_content_1 == "pg") {
       
       netflix_country_split %>% 
         		mutate(
		          english_or_not = 
			          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
			          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
		         ) %>% 
		         filter(!is.na(english_or_not)) %>%
		         filter(rating == "PG") %>% 
		         group_by(type, english_or_not) %>% 
		         summarise(count = n()) %>% 
		         arrange(desc(count)) %>% 
		         ggplot(aes(x = reorder(type, count), 
				    y = count, 
				    fill = type)) +
		         geom_bar(stat = 'identity', color = 'black') + 
		         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2"))  +
		         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of PG Rated Content by Type and Language") +
		         theme_classic() + 
		         theme(
		          	axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black')
		         ) + 
		         facet_wrap(vars(english_or_not)) +
		         coord_flip() + 
		         guides(fill = F)
       
     } else if (input$content_type == "country" & input$Interaction_content_1 == "g") {
       
       netflix_country_split %>% 
         		mutate(
		          english_or_not = 
			          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
			          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
		         ) %>% 
		         filter(!is.na(english_or_not)) %>%
		         filter(rating == "G") %>% 
		         group_by(type, english_or_not) %>% 
		         summarise(count = n()) %>% 
		         arrange(desc(count)) %>% 
		         ggplot(aes(x = reorder(type, count), 
				    y = count, 
				    fill = type)) +
		         geom_bar(stat = 'identity', color = 'black') + 
		         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2"))  +
		         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of G Rated Content by Type and Language") +
		         theme_classic() + 
		         theme(
		          	axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black')
		         ) + 
		         facet_wrap(vars(english_or_not)) +
		         coord_flip() + 
		         guides(fill = F)
       
     } else if (input$content_type == "country" & input$Interaction_content_1 == "tvy7") {
       
       netflix_country_split %>% 
         		mutate(
		          english_or_not = 
			          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
			          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
		         ) %>% 
		         filter(!is.na(english_or_not)) %>%
		         filter(rating == "TV-Y7") %>% 
		         group_by(type, english_or_not) %>% 
		         summarise(count = n()) %>% 
		         arrange(desc(count)) %>% 
		         ggplot(aes(x = reorder(type, count), 
				    y = count, 
				    fill = type)) +
		         geom_bar(stat = 'identity', color = 'black') + 
		         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2"))  +
		         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of TV-Y7 Rated Content by Type and Language") +
		         theme_classic() + 
		         theme(
		          	axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black')
		         ) + 
		         facet_wrap(vars(english_or_not)) +
		         coord_flip() + 
		         guides(fill = F)
       
     } else if (input$content_type == "country" & input$Interaction_content_1 == "nr") {
       
       netflix_country_split %>% 
         		mutate(
		          english_or_not = 
			          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
			          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
		         ) %>% 
		         filter(!is.na(english_or_not)) %>%
		         filter(rating == "NR") %>% 
		         group_by(type, english_or_not) %>% 
		         summarise(count = n()) %>% 
		         arrange(desc(count)) %>% 
		         ggplot(aes(x = reorder(type, count), 
				    y = count, 
				    fill = type)) +
		         geom_bar(stat = 'identity', color = 'black') + 
		         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2"))  +
		         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Non-Rated Content by Type and Language") +
		         theme_classic() + 
		         theme(
		          	axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black')
		         ) + 
		         facet_wrap(vars(english_or_not)) +
		         coord_flip() + 
		         guides(fill = F)
       
     } else if (input$content_type == "country" & input$Interaction_content_1 == "tvy7fv") {
       
       netflix_country_split %>% 
         		mutate(
		          english_or_not = 
			          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
			          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
		         ) %>% 
		         filter(!is.na(english_or_not)) %>%
		         filter(rating == "TV-Y7-FV") %>% 
		         group_by(type, english_or_not) %>% 
		         summarise(count = n()) %>% 
		         arrange(desc(count)) %>% 
		         ggplot(aes(x = reorder(type, count), 
				    y = count, 
				    fill = type)) +
		         geom_bar(stat = 'identity', color = 'black') + 
		         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2"))  +
		         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of TV-Y7-FV Rated Content by Type and Language") +
		         theme_classic() + 
		         theme(
		          	axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black')
		         ) + 
		         facet_wrap(vars(english_or_not)) +
		         coord_flip() + 
		         guides(fill = F)       
     
   } else if (input$content_type == "country" & input$Interaction_content_1 == "action") {
       
       netflix_genresxcountry_df %>% 
         		mutate(
		          english_or_not = 
			          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
			          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
		         ) %>% 
		         filter(!is.na(english_or_not)) %>% 
		         filter(genre == "Action & Adventure" | genre == "TV Action & Adventure") %>% 
		         group_by(type, english_or_not) %>% 
         	 	 summarise(count = n()) %>% 
		         arrange(desc(count)) %>% 
		         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         		 geom_bar(stat = 'identity', color = 'black') + 
		         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         		 labs(x = "Content Type", 
			      y = "Number of Content on Netflix", 
			      title = "Breakdown of Action & Adventure Content by Type and Language") + 
		         theme_classic() + 
		         facet_wrap(vars(english_or_not)) + 
		         coord_flip() + 
		         guides(fill = F) + 
         		 theme(
			        axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black'))
         
    } else if (input$content_type == "country" & input$Interaction_content_1 == "documentary") {
       
       		netflix_genresxcountry_df %>% 
         		mutate(
		          english_or_not = 
			          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          			  ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
			          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
			          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
		         ) %>% 
		         filter(!is.na(english_or_not)) %>% 
		         filter(genre == "Documentaries" | genre == "Docuseries") %>% 
		         group_by(type, english_or_not) %>% 
		         summarise(count = n()) %>% 
		         arrange(desc(count)) %>% 
		         ggplot(aes(x = reorder(type, count), 
				    y = count, 
				    fill = type)) + 
		         geom_bar(stat = 'identity', color = 'black') + 
		         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
		         labs(x = "Content Type", 
			      y = "Number of Content on Netflix", 
			      title = "Breakdown of Documentary Content by Type and Language") + 
		         theme_classic() + 
		         facet_wrap(vars(english_or_not)) + 
		         coord_flip() + 
		         guides(fill = F) + 
		         theme(
          			axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "international") {
       
       		netflix_genresxcountry_df %>% 
	         mutate(
        		  english_or_not = 
		          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
		          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
		          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
		          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
		          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
		          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
		          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
		          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
		          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
		          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
	         ) %>% 
        	 filter(!is.na(english_or_not)) %>% 
	         filter(genre == "International Movies" | genre == "International TV Shows") %>% 
        	 group_by(type, english_or_not) %>% 
	         summarise(count = n()) %>% 
	         arrange(desc(count)) %>% 
	         ggplot(aes(x = reorder(type, count), 
			    y = count, 
			    fill = type)) + 
	         geom_bar(stat = 'identity', color = 'black') + 
	         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
	         labs(x = "Content Type", 
		      y = "Number of Content on Netflix", 
		      title = "Breakdown of International Content by Type and Language") + 
	         theme_classic() + 
	         facet_wrap(vars(english_or_not)) + 
        	 coord_flip() + 
	         guides(fill = F) + 
		 theme(
          		axis.line = element_line(color = 'black'),
          		axis.text = element_text(color = 'black', size = 15), 
          		axis.text.y = element_text(size = 20),
          		axis.text.x = element_text(size = 20),
          		plot.title = element_text(size = 30, hjust = 0.5),
          		axis.title.x = element_text(size = 20),
          		axis.title.y = element_text(size = 20), 
          		strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "drama") {
       
       		netflix_genresxcountry_df %>% 
         		mutate(
          		english_or_not = 
          			ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
		         	ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
			        ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
			        ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
			        ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
			        ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
			        ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
			        ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
			        ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
		         ) %>% 
		         filter(!is.na(english_or_not)) %>% 
		         filter(genre == "Dramas" | genre == "TV Dramas") %>% 
		         group_by(type, english_or_not) %>% 
		         summarise(count = n()) %>% 
		         arrange(desc(count)) %>% 
		         ggplot(aes(x = reorder(type, count), 
				    y = count, 
				    fill = type)) + 
		         geom_bar(stat = 'identity', color = 'black') + 
		         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
		         labs(x = "Content Type", 
			      y = "Number of Content on Netflix", 
			      title = "Breakdown of Drama Content by Type and Language") + 
		         theme_classic() + 
		         facet_wrap(vars(english_or_not)) + 
		         coord_flip() + 
		         guides(fill = F) + 
		         theme(
          			axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "horror") {
       
       			netflix_genresxcountry_df %>% 
         		mutate(
          			english_or_not = 
          				ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
				        ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
				        ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          				ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         		) %>% 
         		filter(!is.na(english_or_not)) %>% 
		        filter(genre == "Horror Movies" | genre == "TV Horror") %>% 
         		group_by(type, english_or_not) %>% 
         		summarise(count = n()) %>% 
         		arrange(desc(count)) %>% 
         		ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         		geom_bar(stat = 'identity', color = 'black') + 
         		scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         		labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Horror Content by Type and Language") + 
         		theme_classic() + 
         		facet_wrap(vars(english_or_not)) + 
         		coord_flip() + 
         		guides(fill = F) + 
		        theme(
          			axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "scifi") {
       
       			netflix_genresxcountry_df %>% 
         			mutate(
          			english_or_not = 
          				ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
				        ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          				ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         		 ) %>% 
         		 filter(!is.na(english_or_not)) %>% 
         		 filter(genre == "Sci-Fi & Fantasy" | genre == "TV Sci-Fi & Fantasy") %>% 
         		 group_by(type, english_or_not) %>% 
         		 summarise(count = n()) %>% 
         		 arrange(desc(count)) %>% 
         		 ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         		 geom_bar(stat = 'identity', color = 'black') + 
         		 scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         		 labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Sci-Fi & Fantasy Content by Type and Language") + 
         		 theme_classic() + 
         		 facet_wrap(vars(english_or_not)) + 
         		 coord_flip() + 
         		 guides(fill = F) + 
		         theme(
          			axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "thriller") {
       
       			netflix_genresxcountry_df %>% 
         			mutate(
          			english_or_not = 
          				ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          				ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          				ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         			) %>% 
         			filter(!is.na(english_or_not)) %>% 
         			filter(genre == "Thrillers" | genre == "TV Thrillers") %>% 
         			group_by(type, english_or_not) %>% 
         			summarise(count = n()) %>% 
         			arrange(desc(count)) %>% 
		         	ggplot(aes(x = reorder(type, count), 
					   y = count, 
					   fill = type)) + 
         			geom_bar(stat = 'identity', color = 'black') + 
         			scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         			labs(x = "Content Type", 
				     y = "Number of Content on Netflix", 
				     title = "Breakdown of Thriller Content by Type and Language") + 
	         		theme_classic() + 
         			facet_wrap(vars(english_or_not)) + 
         			coord_flip() + 
		         	guides(fill = F) + 
		         	theme(
          				axis.line = element_line(color = 'black'),
          				axis.text = element_text(color = 'black', size = 15), 
          				axis.text.y = element_text(size = 20),
          				axis.text.x = element_text(size = 20),
          				plot.title = element_text(size = 30, hjust = 0.5),
          				axis.title.x = element_text(size = 20),
          				axis.title.y = element_text(size = 20), 
          				strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "crime") {
       
       		netflix_genresxcountry_df %>% 
         		mutate(
          			english_or_not = 
				   ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          			   ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          			   ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          			   ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          			   ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          			   ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          			   ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          			   ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          			   ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          			   ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         		) %>% 
         		filter(!is.na(english_or_not)) %>% 
	         	filter(genre == "Crime TV Shows") %>% 
         		group_by(type, english_or_not) %>% 
         		summarise(count = n()) %>% 
         		arrange(desc(count)) %>% 
         		ggplot(aes(x = reorder(type, count), 
				   y = count, 
				   fill = type)) + 
         		geom_bar(stat = 'identity', color = 'black') + 
         		scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         		labs(x = "Content Type", 
			     y = "Number of Content on Netflix", 
			     title = "Breakdown of Crime TV Content by Type and Language") + 
         		theme_classic() + 
         		facet_wrap(vars(english_or_not)) + 
         		coord_flip() + 
         		guides(fill = F) + 
		         	theme(
          				axis.line = element_line(color = 'black'),
          				axis.text = element_text(color = 'black', size = 15), 
          				axis.text.y = element_text(size = 20),
          				axis.text.x = element_text(size = 20),
          				plot.title = element_text(size = 30, hjust = 0.5),
          				axis.title.x = element_text(size = 20),
          				axis.title.y = element_text(size = 20), 
          				strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "independent") {
       
       		netflix_genresxcountry_df %>% 
         		mutate(
          		english_or_not = 
		          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
		          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
		          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
		          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
		          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
		          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
		          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
		          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
		          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
		          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
	         ) %>% 
	         filter(!is.na(english_or_not)) %>% 
	         filter(genre == "Independent Movies") %>% 
	         group_by(type, english_or_not) %>% 
	         summarise(count = n()) %>% 
	         arrange(desc(count)) %>% 
	         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
	         geom_bar(stat = 'identity', color = 'black') + 
        	 scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
	         labs(x = "Content Type", 
		      y = "Number of Content on Netflix", 
		      title = "Breakdown of Independent Movie Content by Type and Language") + 
         	theme_classic() + 
         	facet_wrap(vars(english_or_not)) + 
         	coord_flip() + 
         	guides(fill = F) + 
         	theme(
          		axis.line = element_line(color = 'black'),
          		axis.text = element_text(color = 'black', size = 15), 
          		axis.text.y = element_text(size = 20),
          		axis.text.x = element_text(size = 20),
          		plot.title = element_text(size = 30, hjust = 0.5),
          		axis.title.x = element_text(size = 20),
          		axis.title.y = element_text(size = 20), 
          		strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "sports") {
       
       		netflix_genresxcountry_df %>% 
	         mutate(
          		english_or_not = 
          		ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          		ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
	                ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
	                ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
	                ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
	                ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
	                ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
	                ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          		ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
		        ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
	         ) %>% 
        	 filter(!is.na(english_or_not)) %>% 
	         filter(genre == "Sports Movies") %>% 
         	 group_by(type, english_or_not) %>% 
         	 summarise(count = n()) %>% 
         	 arrange(desc(count)) %>% 
 	         ggplot(aes(x = reorder(type, count), 
			    y = count, 
			    fill = type)) + 
	         geom_bar(stat = 'identity', color = 'black') + 
        	 scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
	         labs(x = "Content Type", 
		      y = "Number of Content on Netflix", 
		      title = "Breakdown of Sports Movie Content by Type and Language") + 
	         theme_classic() + 
        	 facet_wrap(vars(english_or_not)) + 
	         coord_flip() + 
        	 guides(fill = F) + 
		 theme(
          		axis.line = element_line(color = 'black'),
          		axis.text = element_text(color = 'black', size = 15), 
          		axis.text.y = element_text(size = 20),
          		axis.text.x = element_text(size = 20),
          		plot.title = element_text(size = 30, hjust = 0.5),
          		axis.title.x = element_text(size = 20),
          		axis.title.y = element_text(size = 20), 
          		strip.text.x =  element_text(size = 20, color = 'black'))         

     } else if (input$content_type == "country" & input$Interaction_content_1 == "comedy") {
       
       		netflix_genresxcountry_df %>% 
         		mutate(
          			english_or_not = 
          			ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
       			   	ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          			ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          			ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         		) %>% 
		        filter(!is.na(english_or_not)) %>% 
	         	filter(genre == "Comedies" | genre == "TV Comedies") %>% 
         		group_by(type, english_or_not) %>% 
         		summarise(count = n()) %>% 
         		arrange(desc(count)) %>% 
         		ggplot(aes(x = reorder(type, count), 
				   y = count, 
				   fill = type)) + 
         		geom_bar(stat = 'identity', color = 'black') + 
         		scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         		labs(x = "Content Type", 
			     y = "Number of Content on Netflix", 
			     title = "Breakdown of Comedy Content by Type and Language") + 
         		theme_classic() + 
         		facet_wrap(vars(english_or_not)) + 
         		coord_flip() + 
         		guides(fill = F) + 
		        theme(
          			axis.line = element_line(color = 'black'),
          			axis.text = element_text(color = 'black', size = 15), 
          			axis.text.y = element_text(size = 20),
          			axis.text.x = element_text(size = 20),
          			plot.title = element_text(size = 30, hjust = 0.5),
          			axis.title.x = element_text(size = 20),
          			axis.title.y = element_text(size = 20), 
          			strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "standup") {
       
       netflix_genresxcountry_df %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         ) %>% 
         filter(!is.na(english_or_not)) %>% 
         filter(genre == "Stand-Up Comedy" | genre == "Stand-Up Comedy & Talk Shows") %>% 
         group_by(type, english_or_not) %>% 
         summarise(count = n()) %>% 
         arrange(desc(count)) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Stand-Up Content by Type and Language") + 
         theme_classic() + 
         facet_wrap(vars(english_or_not)) + 
         coord_flip() + 
         guides(fill = F) + 
         theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
         
     }  else if (input$content_type == "country" & input$Interaction_content_1 == "anime") {
       
       netflix_genresxcountry_df %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         ) %>% 
         filter(!is.na(english_or_not)) %>% 
         filter(genre == "Anime Series" | genre == "Anime Features") %>% 
         group_by(type, english_or_not) %>% 
         summarise(count = n()) %>% 
         arrange(desc(count)) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Anime Content by Type and Language") + 
         theme_classic() + 
         facet_wrap(vars(english_or_not)) + 
         coord_flip() + 
         guides(fill = F) + 
         theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "romance") {
       
       netflix_genresxcountry_df %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         ) %>% 
         filter(!is.na(english_or_not)) %>% 
         filter(genre == "Romantic Movies" | genre == "Romantic TV Shows") %>% 
         group_by(type, english_or_not) %>% 
         summarise(count = n()) %>% 
         arrange(desc(count)) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Romantic Content by Type and Language") + 
         theme_classic() + 
         facet_wrap(vars(english_or_not)) + 
         coord_flip() + 
         guides(fill = F) + 
         theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "science") {
       
       netflix_genresxcountry_df %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         ) %>% 
         filter(!is.na(english_or_not)) %>% 
         filter(genre == "Science & Nature TV") %>% 
         group_by(type, english_or_not) %>% 
         summarise(count = n()) %>% 
         arrange(desc(count)) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Science & Nature Content by Type and Language") + 
         theme_classic() + 
         facet_wrap(vars(english_or_not)) + 
         coord_flip() + 
         guides(fill = F) + 
         theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "reality") {
       
       netflix_genresxcountry_df %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         ) %>% 
         filter(!is.na(english_or_not)) %>% 
         filter(genre == "Reality TV") %>% 
         group_by(type, english_or_not) %>% 
         summarise(count = n()) %>% 
         arrange(desc(count)) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Reality TV Content by Type and Language") + 
         theme_classic() + 
         facet_wrap(vars(english_or_not)) + 
         coord_flip() + 
         guides(fill = F) + 
         theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "british") {
       
       netflix_genresxcountry_df %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         ) %>% 
         filter(!is.na(english_or_not)) %>% 
         filter(genre == "British TV Shows") %>% 
         group_by(type, english_or_not) %>% 
         summarise(count = n()) %>% 
         arrange(desc(count)) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of British TV Content by Type and Language") + 
         theme_classic() + 
         facet_wrap(vars(english_or_not)) + 
         coord_flip() + 
         guides(fill = F) + 
         theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "korean") {
       
       netflix_genresxcountry_df %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         ) %>% 
         filter(!is.na(english_or_not)) %>% 
         filter(genre == "Korean TV Shows") %>% 
         group_by(type, english_or_not) %>% 
         summarise(count = n()) %>% 
         arrange(desc(count)) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Korean TV Content by Type and Language") + 
         theme_classic() + 
         facet_wrap(vars(english_or_not)) + 
         coord_flip() + 
         guides(fill = F) + 
         theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "spanish") {
       
       netflix_genresxcountry_df %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         ) %>% 
         filter(!is.na(english_or_not)) %>% 
         filter(genre == "Spanish-Language TV Shows") %>% 
         group_by(type, english_or_not) %>% 
         summarise(count = n()) %>% 
         arrange(desc(count)) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Spanish TV Content by Type and Language") + 
         theme_classic() + 
         facet_wrap(vars(english_or_not)) + 
         coord_flip() + 
         guides(fill = F) + 
         theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "music") {
       
       netflix_genresxcountry_df %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         ) %>% 
         filter(!is.na(english_or_not)) %>% 
         filter(genre == "Music & Musicals") %>% 
         group_by(type, english_or_not) %>% 
         summarise(count = n()) %>% 
         arrange(desc(count)) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Music and Musical Content by Type and Language") + 
         theme_classic() + 
         facet_wrap(vars(english_or_not)) + 
         coord_flip() + 
         guides(fill = F) + 
         theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "lgbtq") {
       
       netflix_genresxcountry_df %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         ) %>% 
         filter(!is.na(english_or_not)) %>% 
         filter(genre == "LGBTQ Movies") %>% 
         group_by(type, english_or_not) %>% 
         summarise(count = n()) %>% 
         arrange(desc(count)) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of LGBTQ Content by Type and Language") + 
         theme_classic() + 
         facet_wrap(vars(english_or_not)) + 
         coord_flip() + 
         guides(fill = F) + 
         theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "faith") {
       
       netflix_genresxcountry_df %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         ) %>% 
         filter(!is.na(english_or_not)) %>% 
         filter(genre == "Faith & Spirituality") %>% 
         group_by(type, english_or_not) %>% 
         summarise(count = n()) %>% 
         arrange(desc(count)) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Faith & Spirituality Content by Type and Language") + 
         theme_classic() + 
         facet_wrap(vars(english_or_not)) + 
         coord_flip() + 
         guides(fill = F) + 
         theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "familymovie") {
       
       netflix_genresxcountry_df %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         ) %>% 
         filter(!is.na(english_or_not)) %>% 
         filter(genre == "Children & Family Movies" | genre == "Kids' TV" | genre == "Teen TV Shows") %>% 
         group_by(type, english_or_not) %>% 
         summarise(count = n()) %>% 
         arrange(desc(count)) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Kids/Family Content by Type and Language") + 
         theme_classic() + 
         facet_wrap(vars(english_or_not)) + 
         coord_flip() + 
         guides(fill = F) + 
         theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "classic") {
       
       netflix_genresxcountry_df %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         ) %>% 
         filter(!is.na(english_or_not)) %>% 
         filter(genre == "Classic Movies" | genre == "Cult Movies" | genre == "Classic & Cult TV") %>% 
         group_by(type, english_or_not) %>% 
         summarise(count = n()) %>% 
         arrange(desc(count)) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Classic and/or Cult Content by Type and Language") + 
         theme_classic() + 
         facet_wrap(vars(english_or_not)) + 
         coord_flip() + 
         guides(fill = F) + 
         theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "country" & input$Interaction_content_1 == "mystery") {
       
       netflix_genresxcountry_df %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         ) %>% 
         filter(!is.na(english_or_not)) %>% 
         filter(genre == "TV Mysteries") %>% 
         group_by(type, english_or_not) %>% 
         summarise(count = n()) %>% 
         arrange(desc(count)) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Mystery TV Content by Type and Language") + 
         theme_classic() + 
         facet_wrap(vars(english_or_not)) + 
         coord_flip() + 
         guides(fill = F) + 
         theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
         
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "english") {
       
       netflix_country_split %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))   
         ) %>% 
         filter(english_or_not == "English Speaking") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) +
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of English-Speaking Content on Netflix", title = "Breakdown of Netflix Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
         theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "non_english") {
       
       netflix_country_split %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))   
         ) %>% 
         filter(english_or_not == "Non-English Speaking") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) +
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Non-English Speaking Content on Netflix", title = "Breakdown of Netflix Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "action") {
       
       netflix_genre_split %>% 
         filter(genre == "Action & Adventure" | genre == "TV Action & Adventure") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Action & Adventure Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "drama") {
       
       netflix_genre_split %>% 
         filter(genre == "Dramas" | genre == "TV Dramas") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Drama Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "comedy") {
       
       netflix_genre_split %>% 
         filter(genre == "Comedies" | genre == "TV Comedies") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Comedy Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "documentary") {
       
       netflix_genre_split %>% 
         filter(genre == "Documentaries" | genre == "Docuseries") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Drama Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "horror") {
       
       netflix_genre_split %>% 
         filter(genre == "Horror" | genre == "TV Horror") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Horror Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "standup") {
       
       netflix_genre_split %>% 
         filter(genre == "Stand-Up Comedy" | genre == "Stand-Up Comedy & Talk Shows") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Drama Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "scifi") {
       
       netflix_genre_split %>% 
         filter(genre == "Sci-Fi & Fantasy" | genre == "TV Sci-Fi & Fantasy") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Drama Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "romance") {
       
       netflix_genre_split %>% 
         filter(genre == "Romantics Movies" | genre == "Romantic TV Shows") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Drama Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "sports") {
       
       netflix_genre_split %>% 
         filter(genre == "Sports Movies") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Sports Movie Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "thriller") {
       
       netflix_genre_split %>% 
         filter(genre == "Thrillers" | genre == "TV Thrillers") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Thriller Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "crime") {
       
       netflix_genre_split %>% 
         filter(genre == "Crime TV Shows") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Crime TV Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "mystery") {
       
       netflix_genre_split %>% 
         filter(genre == "TV Mysteries") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix TV Mysteries Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "lgbtq") {
       
       netflix_genre_split %>% 
         filter(genre == "LGBTQ Movies") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix LGBTQ Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "independent") {
       
       netflix_genre_split %>% 
         filter(genre == "Independent Movies") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Independent Movie Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "international") {
       
       netflix_genre_split %>% 
         filter(genre == "International Movies" | genre == "International TV Shows") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Drama Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "anime") {
       
       netflix_genre_split %>% 
         filter(genre == "Anime Features" | genre == "Anime Series") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Anime Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "faith") {
       
       netflix_genre_split %>% 
         filter(genre == "Faith & Spirituality") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Faith and Spirituality Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "science") {
       
       netflix_genre_split %>% 
         filter(genre == "Science & Nature TV") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Science & Nature Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "korean") {
       
       netflix_genre_split %>% 
         filter(genre == "Korean TV Shows") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Korean Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "british") {
       
       netflix_genre_split %>% 
         filter(genre == "British TV Shows") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix British TV Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "spanish") {
       
       netflix_genre_split %>% 
         filter(genre == "Spanish-Language TV Shows") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Spanish-Language TV Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "reality") {
       
       netflix_genre_split %>% 
         filter(genre == "Reality TV") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Reality TV Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "familymovie") {
       
       netflix_genre_split %>% 
         filter(genre == "Kids' TV" | genre == "Teen TV Shows" | genre == "Children & Family Movies") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Children/Family Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "classic") {
       
       netflix_genre_split %>% 
         filter(genre == "Classic & Cult TV" | genre == "Classic Movies" | genre == "Cult Movies") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Classic/Cult Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "rating" & input$Interaction_content_2 == "music") {
       
       netflix_genre_split %>% 
         filter(genre == "Music & Musicals") %>% 
         group_by(type, rating) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) + 
         geom_bar(stat = "identity", color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Netflix Music & Musicals Content by Type and Content Rating") + 
         theme_classic() + 
         facet_wrap(vars(rating)) + 
         coord_flip() + 
         guides(fill = F) + 
	 theme(
          	axis.line = element_line(color = 'black'),
          	axis.text = element_text(color = 'black', size = 15), 
          	axis.text.y = element_text(size = 20),
          	axis.text.x = element_text(size = 20),
          	plot.title = element_text(size = 30, hjust = 0.5),
          	axis.title.x = element_text(size = 20),
          	axis.title.y = element_text(size = 20), 
          	strip.text.x =  element_text(size = 20, color = 'black'))
       
     } else if (input$content_type == "genre" & input$Interaction_content_3 == "english") {
       
       netflix_genresxcountry_df %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         ) %>% 
         filter(english_or_not == "English Speaking") %>% 
         group_by(type, genre) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) +
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         theme_classic() + 
         facet_wrap(vars(genre)) + 
         labs(x = "Content Type", y = "Number of English-Speaking Content on Netflix", title = "Breakdown of English-Speaking Content on Netflix by Content Type & Genres") + 
         guides(fill = F) + 
         coord_flip() +
         theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 17, angle = 90),
          plot.title = element_text(size = 30, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 10, color = 'black'))
       
     } else if (input$content_type == "genre" & input$Interaction_content_3 == "non_english") {
       
       netflix_genresxcountry_df %>% 
         mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
         ) %>% 
         filter(english_or_not == "Non-English Speaking") %>% 
         group_by(type, genre) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) +
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         theme_classic() + 
         facet_wrap(vars(genre)) + 
         labs(x = "Content Type", y = "Number of Non-English Speaking Content on Netflix", title = "Breakdown of Non-English Speaking Content on Netflix by Content Type & Genres") + 
         guides(fill = F) + 
         coord_flip() +
         theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 17, angle = 90),
          plot.title = element_text(size = 30, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 10, color = 'black'))
       
     } else if (input$content_type == "genre" & input$Interaction_content_3 == "tvma") {
       
       netflix_genre_split %>% 
         filter(rating == "TV-MA") %>% 
         group_by(type, genre) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) +
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         theme_classic() + 
         facet_wrap(vars(genre)) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of TV-MA Rated Content on Netflix by Content Type & Genres") + 
         guides(fill = F) + 
         coord_flip() +
         theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 17, angle = 90),
          plot.title = element_text(size = 30, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 10, color = 'black'))
       
     }  else if (input$content_type == "genre" & input$Interaction_content_3 == "nc17") {
       
       netflix_genre_split %>% 
         filter(rating == "NC-17") %>% 
         group_by(type, genre) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) +
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         theme_classic() + 
         facet_wrap(vars(genre)) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of NC-17 Rated Content on Netflix by Content Type & Genres") + 
         guides(fill = F) + 
         coord_flip() +
         theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 17, angle = 90),
          plot.title = element_text(size = 30, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 10, color = 'black'))
       
     } else if (input$content_type == "genre" & input$Interaction_content_3 == "r") {
       
       netflix_genre_split %>% 
         filter(rating == "R") %>% 
         group_by(type, genre) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) +
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         theme_classic() + 
         facet_wrap(vars(genre)) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of R Rated Content on Netflix by Content Type & Genres") + 
         guides(fill = F) + 
         coord_flip() +
         theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 17, angle = 90),
          plot.title = element_text(size = 30, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 10, color = 'black'))

} else if (input$content_type == "genre" & input$Interaction_content_3 == "pg13") {
       
       netflix_genre_split %>% 
         filter(rating == "PG-13") %>% 
         group_by(type, genre) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) +
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         theme_classic() + 
         facet_wrap(vars(genre)) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of PG-13 Rated Content on Netflix by Content Type & Genres") + 
         guides(fill = F) + 
         coord_flip() +
         theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 17, angle = 90),
          plot.title = element_text(size = 30, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 10, color = 'black'))
       
     } else if (input$content_type == "genre" & input$Interaction_content_3 == "tv14") {
       
       netflix_genre_split %>% 
         filter(rating == "TV-14") %>% 
         group_by(type, genre) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) +
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         theme_classic() + 
         facet_wrap(vars(genre)) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of TV-14 Rated Content on Netflix by Content Type & Genres") + 
         guides(fill = F) + 
         coord_flip() +
         theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 17, angle = 90),
          plot.title = element_text(size = 30, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 10, color = 'black'))
       
     } else if (input$content_type == "genre" & input$Interaction_content_3 == "tvpg") {
       
       netflix_genre_split %>% 
         filter(rating == "TV-PG") %>% 
         group_by(type, genre) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) +
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         theme_classic() + 
         facet_wrap(vars(genre)) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of TV-PG Rated Content on Netflix by Content Type & Genres") + 
         guides(fill = F) + 
         coord_flip() +
         theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 17, angle = 90),
          plot.title = element_text(size = 30, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 10, color = 'black'))
       
     } else if (input$content_type == "genre" & input$Interaction_content_3 == "tvy") {
       
       netflix_genre_split %>% 
         filter(rating == "TV-Y") %>% 
         group_by(type, genre) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) +
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         theme_classic() + 
         facet_wrap(vars(genre)) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of TV-Y Rated Content on Netflix by Content Type & Genres") + 
         guides(fill = F) + 
         coord_flip() +
         theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 17, angle = 90),
          plot.title = element_text(size = 30, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 10, color = 'black'))
       
     } else if (input$content_type == "genre" & input$Interaction_content_3 == "tvg") {
       
       netflix_genre_split %>% 
         filter(rating == "TV-G") %>% 
         group_by(type, genre) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) +
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         theme_classic() + 
         facet_wrap(vars(genre)) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of TV-G Rated Content on Netflix by Content Type & Genres") + 
         guides(fill = F) + 
         coord_flip() +
         theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 17, angle = 90),
          plot.title = element_text(size = 30, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 10, color = 'black'))
       
     } else if (input$content_type == "genre" & input$Interaction_content_3 == "g") {
       
       netflix_genre_split %>% 
         filter(rating == "G") %>% 
         group_by(type, genre) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) +
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         theme_classic() + 
         facet_wrap(vars(genre)) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of G Rated Content on Netflix by Content Type & Genres") + 
         guides(fill = F) + 
         coord_flip() +
         theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 17, angle = 90),
          plot.title = element_text(size = 30, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 10, color = 'black'))
       
     } else if (input$content_type == "genre" & input$Interaction_content_3 == "pg") {
       
       netflix_genre_split %>% 
         filter(rating == "PG") %>% 
         group_by(type, genre) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) +
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         theme_classic() + 
         facet_wrap(vars(genre)) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of PG Rated Content on Netflix by Content Type & Genres") + 
         guides(fill = F) + 
         coord_flip() +
         theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 17, angle = 90),
          plot.title = element_text(size = 30, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 10, color = 'black'))
       
     } else if (input$content_type == "genre" & input$Interaction_content_3 == "tvy7") {
       
       netflix_genre_split %>% 
         filter(rating == "TV-Y7") %>% 
         group_by(type, genre) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type))+
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         theme_classic() + 
         facet_wrap(vars(genre)) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of TV-Y7 Rated Content on Netflix by Content Type & Genres") + 
         guides(fill = F) + 
         coord_flip() +
         theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 17, angle = 90),
          plot.title = element_text(size = 30, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 10, color = 'black'))
       
     } else if (input$content_type == "genre" & input$Interaction_content_3 == "tvy7fv") {
       
       netflix_genre_split %>% 
         filter(rating == "TV-Y7-FV") %>% 
         group_by(type, genre) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) +
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         theme_classic() + 
         facet_wrap(vars(genre)) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of TV-Y7-FV Rated Content on Netflix by Content Type & Genres") + 
         guides(fill = F) + 
         coord_flip() +
         theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 17, angle = 90),
          plot.title = element_text(size = 30, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 10, color = 'black'))
       
     } else if (input$content_type == "genre" & input$Interaction_content_3 == "nr") {
       
       netflix_genre_split %>% 
         filter(rating == "NR") %>% 
         group_by(type, genre) %>% 
         summarise(count = n()) %>% 
         ggplot(aes(x = reorder(type, count), y = count, fill = type)) +
         geom_bar(stat = 'identity', color = 'black') + 
         scale_fill_manual(values = c("TV Show" = "slateblue3", "Movie" = "firebrick2")) + 
         theme_classic() + 
         facet_wrap(vars(genre)) + 
         labs(x = "Content Type", y = "Number of Content on Netflix", title = "Breakdown of Non-Rated Content on Netflix by Content Type & Genres") + 
         guides(fill = F) + 
         coord_flip() +
         theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 15), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 17, angle = 90),
          plot.title = element_text(size = 30, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 10, color = 'black'))
       
     }
    
  })

	# HOLY S**T, that took a while... OK so the next step is to figure out the director sector. We'll be working on making charts for comparing Netflix content with credited driec

	output$director_charts = renderPlot({
	    
	if (input$director_charts == "default") {
      
      		netflix %>% 
        	mutate(
          	any_director = ifelse(director == "Unknown/No Director(s)", "no", "yes")
	        ) %>% 
        	group_by(any_director) %>% 
	        summarise(count = n()) %>% 
        	ggplot(aes(x = reorder(any_director, count), 
			   y = count, 
			   fill = any_director)) + 
	        geom_bar(stat = 'identity', color = 'black') + 
        	labs(x = "Presence of Director", 
		     y = "Number of Netflix Content", 
		    title = "Breakdown of Netflix Content by Presence of Director") +
        	scale_fill_manual(values = c("yes" = "firebrick2", "no" = "slateblue3")) + 
        	theme_classic() + 
        	theme(
         	 axis.line = element_line(color = 'black'),
       		 axis.text = element_text(color = 'black', size = 20), 
          	 axis.text.y = element_text(size = 20),
          	 axis.text.x = element_text(size = 20),
           	 plot.title = element_text(size = 30, hjust = 0.5),
            	 axis.title.x = element_text(size = 20),
             	 axis.title.y = element_text(size = 20), 
          	 strip.text.x =  element_text(size = 20, color = 'black')) + 
	         coord_flip() + 
        	 guides(fill = F)
      
    } else if (input$director_charts == "english") {
      
      netflix_countryxdirector_df %>% 
        mutate(
          any_director = ifelse(director_name == "Unknown/No Director(s)", "no", "yes")
        ) %>% 
        mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
        ) %>%
        filter(country_type == "main country") %>% 
        filter(!is.na(english_or_not)) %>% 
        group_by(any_director, english_or_not) %>% 
        summarise(count = n()) %>% 
        ggplot(aes(x = reorder(any_director, count), y = count, fill = any_director)) +
        geom_bar(stat = 'identity', color = 'black') + 
        scale_fill_manual(values = c("yes" = "firebrick2", "no" = "slateblue3")) + 
        labs(x = "Presence of a Director", y = "Number of Netflix Content", title = "Breakdown of Netflix Content by Presence of Director and Language") + 
        guides(fill = F) + 
        theme_classic() + 
        	theme(
         	 axis.line = element_line(color = 'black'),
       		 axis.text = element_text(color = 'black', size = 20), 
          	 axis.text.y = element_text(size = 20),
          	 axis.text.x = element_text(size = 20),
           	 plot.title = element_text(size = 30, hjust = 0.5),
            	 axis.title.x = element_text(size = 20),
             	 axis.title.y = element_text(size = 20), 
          	 strip.text.x =  element_text(size = 20, color = 'black')) + 
        facet_wrap(vars(english_or_not)) + 
        coord_flip()
      
    } else if (input$director_charts == "genre") {
      
      netflix_genrexdirector_df %>% 
        mutate(
          any_director = ifelse(director_name  == "Unknown/No Director(s)", "no", "yes")
        ) %>% 
        group_by(any_director, genre) %>%
        summarise(count = n()) %>% 
        ggplot(aes(x = reorder(any_director, count), y = count, fill = any_director)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        scale_fill_manual(values = c("yes" = "firebrick2", "no" = "slateblue3")) +
        labs(x = "Presence of a Director", y = "Number of Netflix Content", title = "Breakdown of Netflix Content by Presence of Director and Genre") +
        guides(fill = F) +
        theme_classic() +
        facet_wrap(vars(genre)) +
        	theme(
         	 axis.line = element_line(color = 'black'),
       		 axis.text = element_text(color = 'black', size = 20), 
          	 axis.text.y = element_text(size = 20),
          	 axis.text.x = element_text(size = 20, angle = 90),
           	 plot.title = element_text(size = 30, hjust = 0.5),
            	 axis.title.x = element_text(size = 20),
             	 axis.title.y = element_text(size = 20), 
          	 strip.text.x =  element_text(size = 8.5, color = 'black'))+
        coord_flip() 
      
    } else if (input$director_charts == "content") {
      
      netflix_director_split %>% 
        mutate(
          any_director = ifelse(director_name == "Unknown/No Director(s)", "no", "yes")
        ) %>% 
        group_by(any_director, rating) %>%
        summarise(count = n()) %>% 
        ggplot(aes(x = reorder(any_director, count), y = count, fill = any_director)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        scale_fill_manual(values = c("yes" = "firebrick2", "no" = "slateblue3")) +
        labs(x = "Presence of a Director", y = "Number of Netflix Content", title = "Breakdown of Netflix Content by Presence of Director and Content Rating") +
        guides(fill = F) +
        theme_classic() +
        facet_wrap(vars(rating)) +
        	theme(
         	 axis.line = element_line(color = 'black'),
       		 axis.text = element_text(color = 'black', size = 20), 
          	 axis.text.y = element_text(size = 20),
          	 axis.text.x = element_text(size = 20, angle = 90),
           	 plot.title = element_text(size = 29, hjust = 0.5),
            	 axis.title.x = element_text(size = 20),
             	 axis.title.y = element_text(size = 20), 
          	 strip.text.x =  element_text(size = 20, color = 'black')) +
        coord_flip() 
      
    } else if (input$director_charts == "type") {
      
      netflix_director_split %>% 
         mutate(
          any_director = ifelse(director_name == "Unknown/No Director(s)", "no", "yes")
        ) %>% 
        group_by(any_director, type) %>%
        summarise(count = n()) %>%
        ggplot(aes(x = reorder(any_director, count), y = count, fill = any_director)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        scale_fill_manual(values = c("yes" = "firebrick2", "no" = "slateblue3")) +
        labs(x = "Presence of a Director", y = "Number of Netflix Content", title = "Breakdown of Netflix Content by Presence of Director and Content Type") +
        guides(fill = F) +
        theme_classic() +
        facet_wrap(vars(type)) +
        	theme(
         	 axis.line = element_line(color = 'black'),
       		 axis.text = element_text(color = 'black', size = 20), 
          	 axis.text.y = element_text(size = 20),
          	 axis.text.x = element_text(size = 20),
           	 plot.title = element_text(size = 30, hjust = 0.5),
            	 axis.title.x = element_text(size = 20),
             	 axis.title.y = element_text(size = 20), 
          	 strip.text.x =  element_text(size = 20, color = 'black'))+
        coord_flip()
      
    }
    
  })


	# Next step is to figure out who is the top director....so what will make this easier is to create a reactive element to enable the switch b/t lead and assistant director via genre.

	cast_n_director_genre = reactive({
    		switch(input$director_comparisons, 
		      as.character(input$director_comparisons)
    		) 
  	})


	# Now fill out the output that will make the 

	output$top_directors  = renderPlot({
    
        no_one_with_two_genre = 
      ifelse(c(input$director_comparisons == "TV Action & Adventure" | input$director_comparisons == "TV Dramas" | input$director_comparisons == "TV Horror" | input$director_comparisons == "Spanish-Language TV Shows" | input$director_comparisons == "Reality TV" | input$director_comparisons == "TV Sci-Fi & Fantasy" | input$director_comparisons == "Anime Series" | input$director_comparisons == "Classic & Cult TV" | input$director_comparisons == "Crime TV Shows" | input$director_comparisons == "TV Mysteries" | input$director_comparisons == "TV Comedies" | input$director_comparisons == "Teen TV Shows" | input$director_comparisons == "TV Thrillers"), "yes", 
      ifelse(c(input$director_comparisons == "TV Action & Adventure" & input$director_type == "assistant"), 'yes',
      ifelse(c(input$director_comparisons == "Stand-Up Comedy & Talk Shows" & input$director_type == "assistant"), 'yes',
      ifelse(c(input$director_comparisons == "LGBTQ Movies" & input$director_type == "assistant"), 'yes',
      ifelse(c(input$director_comparisons == "Independent Movies" & input$director_type == "assistant"), 'yes',
      ifelse(c(input$director_comparisons == "Classic & Cult TV" & input$director_type == "assistant"), 'yes',
      ifelse(c(input$director_comparisons == "Cult Movies" & input$director_type == "assistant"), 'yes',
      ifelse(c(input$director_comparisons == "Classic Movies" & input$director_type == "assistant"), 'yes',
      ifelse(c(input$director_comparisons == "Korean TV Shows" & input$director_type == "assistant"), 'yes',
      ifelse(c(input$director_comparisons == "British TV Shows" & input$director_type == "assistant"), 'yes',
      ifelse(c(input$director_comparisons == "Kids' TV" & input$director_type == "assistant"), 'yes',
      ifelse(c(input$director_comparisons == "Reality TV" & input$director_type == "assistant"), 'yes',
      ifelse(c(input$director_comparisons == "International TV Shows" & input$director_type == "assistant"), 'yes',
      ifelse(c(input$director_comparisons == "TV Sci-Fi & Fantasy" & input$director_type == "assistant"), 'yes',
      ifelse(c(input$director_comparisons == "Reality TV" & input$director_type == "assistant"), 'yes',
      ifelse(c(input$director_comparisons == "Romantic TV Shows" & input$director_type == "assistant"), 'yes',
      ifelse(c(input$director_comparisons == "Anime Series" & input$director_type == "assistant"), 'yes',
      ifelse(c(input$director_comparisons == "Docuseries" & input$director_type == "assistant"), 'yes',
      ifelse(c(input$director_comparisons == "Faith & Spirituality " & input$director_type == "assistant"), 'yes', "no")))))))))))))))))))
    
    if (input$director_type == "lead" & no_one_with_two_genre == "no") {
        
      netflix_genrexdirector_df %>% 
      filter(director_name != "Unknown/No Director(s)") %>%
      filter(director_type == "lead") %>% 
      filter(genre == as.character(cast_n_director_genre())) %>% 
      group_by(director_name) %>% 
      summarise(count = n()) %>% 
      filter(count > 1) %>% 
      top_n(5) %>% 
      ggplot(
        aes(x = reorder(director_name, count), y = count, fill = director_name)
      ) + 
      geom_bar(stat = 'identity', color = 'black') + 
      labs(x = "Top Directors", y = "Number of Netflix Content", caption = "All directors have at least 2 projects on Netflix with director credits") + 
      theme_classic() + 
      theme(
        axis.text = element_text(color = 'black'),
        plot.caption = element_text(color = 'black', hjust = 0)
      )+
      coord_flip()+
      guides(fill = F)  
      
    } else if (input$director_type == "assistant" & no_one_with_two_genre == "no") {
      
      netflix_genrexdirector_df %>% 
      filter(director_name != "Unknown/No Director(s)") %>%
      filter(director_type == "assistant/guest") %>% 
      filter(genre == as.character(cast_n_director_genre())) %>% 
      group_by(director_name) %>% 
      summarise(count = n()) %>% 
      top_n(5) %>% 
      filter(count > 1) %>%   
      ggplot(
        aes(x = reorder(director_name, count), y = count, fill = director_name)
      ) + 
      geom_bar(stat = 'identity', color = 'black') + 
      labs(x = "Top Directors", y = "Number of Netflix Content", caption = "All directors have at least 2 projects on Netflix with director credits") + 
      theme_classic() + 
      theme(
        axis.text = element_text(color = 'black'),
        plot.caption = element_text(color = 'black', hjust = 0)
      )+
      coord_flip()+
      guides(fill = F) 
      
    } else if (input$director_type == "both" & no_one_with_two_genre == "no") {
      
      netflix_genrexdirector_df %>% 
      filter(genre == as.character(cast_n_director_genre())) %>% 
      filter(director_name != "Unknown/No Director(s)") %>%
      group_by(director_name) %>% 
      summarise(count = n()) %>% 
      top_n(5) %>% 
      filter(count > 1) %>%   
      ggplot(
        aes(x = reorder(director_name, count), y = count, fill = director_name)
      ) + 
      geom_bar(stat = 'identity', color = 'black') + 
      labs(x = "Top Directors", y = "Number of Netflix Content", caption = "All directors have at least 2 projects on Netflix with director credits") + 
      theme_classic() + 
      theme(
        axis.text = element_text(color = 'black'),
        plot.caption = element_text(color = 'black', hjust = 0)
      )+
      coord_flip()+
      guides(fill = F) 
      
    } else if (input$director_type == "both" & no_one_with_two_genre == "yes" ) {
      
      netflix_genrexdirector_df %>% 
      filter(genre == as.character(cast_n_director_genre())) %>% 
      filter(director_name != "Unknown/No Director(s)") %>%
      group_by(director_name) %>% 
      summarise(count = n()) %>% 
      top_n(5) %>% 
      ggplot(
        aes(x = reorder(director_name, count), y = count, fill = director_name)
      ) + 
      geom_bar(stat = 'identity', color = 'black') + 
      labs(x = "Top Directors", y = "Number of Netflix Content") + 
      theme_classic() + 
      theme(
        axis.text = element_text(color = 'black'),
        plot.caption = element_text(color = 'black', hjust = 0)
      )+
      coord_flip()+
      guides(fill = F) 
      
      
    } else if (input$director_type == "lead" & no_one_with_two_genre == "yes" ) {
      
      netflix_genrexdirector_df %>% 
      filter(director_name != "Unknown/No Director(s)") %>%
      filter(director_type == "lead") %>% 
      filter(genre == as.character(cast_n_director_genre())) %>% 
      group_by(director_name) %>% 
      summarise(count = n()) %>% 
      top_n(5) %>% 
      ggplot(
        aes(x = reorder(director_name, count), y = count, fill = director_name)
      ) + 
      geom_bar(stat = 'identity', color = 'black') + 
      labs(x = "Top Directors", y = "Number of Netflix Content") + 
      theme_classic() + 
      theme(
        axis.text = element_text(color = 'black'),
        plot.caption = element_text(color = 'black', hjust = 0)
      )+
      coord_flip()+
      guides(fill = F) 
      
    } else if (input$director_type == "assistant" & no_one_with_two_genre == "yes") {
      
      netflix_genrexdirector_df %>% 
      filter(director_name != "Unknown/No Director(s)") %>%
      filter(director_type == "assistant/guest") %>% 
      filter(genre == as.character(cast_n_director_genre())) %>% 
      group_by(director_name) %>% 
      summarise(count = n()) %>% 
      top_n(5) %>% 
      ggplot(
        aes(x = reorder(director_name, count), y = count, fill = director_name)
      ) + 
      geom_bar(stat = 'identity', color = 'black') + 
      labs(x = "Top Directors", y = "Number of Netflix Content") + 
      theme_classic() + 
      theme(
        axis.text = element_text(color = 'black'),
        plot.caption = element_text(color = 'black', hjust = 0)
      )+
      coord_flip()+
      guides(fill = F) 
      
    }
    
  })


	# Add an image component to make it easier to see who the name is associated to 

output$director_image_1 = renderUI({
    
    url_mastan = "https://www.themoviedb.org/t/p/w235_and_h235_face/ijfDaLuFp5s6Xtln06XwMZiUpRp.jpg"
    url_toshiya = "https://www.animenewsnetwork.com/images/encyc/P272-2093837597.1600150962.jpg"
    url_hiroyuki = "https://bingeddata.s3.amazonaws.com/uploads/2020/12/hiroyuki-seshita.jpg"
    url_barbara = "https://images.squarespace-cdn.com/content/v1/5b219c94c258b4d21b0ffaa1/1560810361080-4CZYEZ8M248JP51SKNKE/ke17ZwdGBToddI8pDm48kAUSRIY7mNHByKcvNnydaU5Zw-zPPgdn4jUwVcJE1ZvWEtT5uBSRWt4vQZAgTJucoTqqXjS3CfNDSuuf31e0tVGWekw2-AxAD63C5uT21pXkkwKCfPFY2EOnCqHvHGSwoTFvbuqF0GUInBxxtVhBOn4/Barbara+Schroeder.png"
    url_chen = "https://i.mydramalist.com/kRXV8_5f.jpg"
    url_ken = "https://m.media-amazon.com/images/M/MV5BMjI1OTkyNTQ1NV5BMl5BanBnXkFtZTcwMzYwNTk2Mw@@._V1_UY1200_CR157,0,630,1200_AL_.jpg"
    url_batty = "https://cineuropa.org/imgCache/2017/09/07/1504781434117_0570x0400_0x0x0x0_1573385655383.jpg"
    url_rajamouli = "https://m.media-amazon.com/images/M/MV5BMTQ3Njc4ODU1OF5BMl5BanBnXkFtZTgwNDcxMTIzOTE@._V1_UY1200_CR543,0,630,1200_AL_.jpg"
    url_lana_wachowski = "https://m.media-amazon.com/images/M/MV5BMjEzMTc2MDQ5OV5BMl5BanBnXkFtZTcwNjkzNDY0OA@@._V1_UX214_CR0,0,214,317_AL_.jpg"
    url_lily_wachowski = "https://c.files.bbci.co.uk/7A20/production/_113846213_lilly.jpg"
    url_wachowski_sisters = "https://www.indiewire.com/wp-content/uploads/2018/10/Screen-Shot-2018-10-25-at-10.23.06-AM.png?w=670&h=377&crop=1"
    url_chahine = "https://m.media-amazon.com/images/M/MV5BNDczNTc4NDUtMTQyYy00NmE2LTg1MzAtYjcwMzljN2NlOTdlXkEyXkFqcGdeQXVyMjI4NzAzNjg@._V1_UY317_CR157,0,214,317_AL_.jpg"
    url_baiq = "https://cdn-image.hipwee.com/wp-content/uploads/2019/08/hipwee-IMG_9645.jpg"
    url_sunil = "https://nettv4u.com/imagine/30-09-2020/sunil-sukthankar.jpg"
    url_lathan = "https://m.timesofindia.com/thumb/78252439.cms?width=170&height=240"
    url_Dhawan = "https://m.media-amazon.com/images/M/MV5BZDEwMWZiZGMtNTdlYS00NTUyLTk2MzMtMDdhYWQ1NjgzMmUzXkEyXkFqcGdeQXVyMTExNDQ2MTI@._V1_UY317_CR15,0,214,317_AL_.jpg"
    url_liu_yi = "https://m.media-amazon.com/images/M/MV5BMDkwNWZmZjEtZjEzZC00YTVlLWE3OTEtNWUwNzhkZjk5MTA5XkEyXkFqcGdeQXVyOTM3ODM5OTI@._V1_.jpg"
    url_chuang = "https://bingeddata.s3.amazonaws.com/uploads/2021/01/nMCIiKJZs5FZCwI4Gml4CuerfzU.jpg"
    url_soraya = "https://www.allhorror.com/public/uploads/2018/10/ySnGxbGEJQ3R18dedoPR5w93Vnx-250x500.jpg"
    url_parkpoom = "https://bingeddata.s3.amazonaws.com/uploads/2020/12/parkpoom-wongpoom.jpg"
    url_jung = "https://spnimage.edaily.co.kr/images/photo/files/NP/S/2016/07/PS16070500042.jpg"
    url_campos = "https://pbs.twimg.com/profile_images/3127614200/d35d7952b42e5458e70bdc34ecee297e.jpeg"
    url_suter = "https://m.media-amazon.com/images/M/MV5BNmVjZGFkOTktZjI2Ny00MGIxLTkxMjUtZjYzNjZjMTRlMThhXkEyXkFqcGdeQXVyMzAyOTkyNjE@._V1_UX214_CR0,0,214,317_AL_.jpg"
    url_askem = "https://lh3.googleusercontent.com/proxy/bNXkVfLKQVMjaXfBRnIfs04hrGu_Aj5vkEVqhJ1YLDWgFnnR5-3wXaF6k2apPY0pMhND60X1R8vo9sYNz8MgAVsdRgAxeM5NXgZETN_Vy-XCrFzmzaQNujODMgGYzz-JIA"
    url_akiva = "https://m.media-amazon.com/images/M/MV5BMTgwNzc1MzQzOV5BMl5BanBnXkFtZTcwODM5MTcxOA@@._V1_.jpg"
    url_yudin = "https://upload.wikimedia.org/wikipedia/commons/d/d8/Vlad_Yudin.jpg"
    url_carolla = "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f1/2017-02-25_Adam_Carolla.jpg/1200px-2017-02-25_Adam_Carolla.jpg"
    url_baumbach = "https://resizing.flixster.com/4VYZVhmXxmkUoaImhk6oaIs3rx8=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/160183/160183_v9_bb.jpg"
    url_clattenberg = "https://www.northernstars.ca/wp-content/uploads/2016/10/Mike_Clattenburg-350-640x746.jpg"
    url_shin = "https://6.viki.io/image/9eb319a6ca3840af9c3500b2812eab53.jpeg?s=900x600&e=t"
    url_fothergill = "https://m.media-amazon.com/images/M/MV5BMTYwODc0MzY1OV5BMl5BanBnXkFtZTgwNTAyNjY3NzM@._V1_.jpg"
    url_vile = "https://permanentplastichelmet.files.wordpress.com/2012/11/jesse_vile_guibson_guitar_raindance.jpeg"
    url_schuh = "https://m.media-amazon.com/images/M/MV5BOTI0MzU0OTI1M15BMl5BanBnXkFtZTcwMTc2MDM1NA@@._V1_.jpg"
    url_rodriguez = "https://upload.wikimedia.org/wikipedia/commons/a/a1/Robert_Rodriguez_2019.jpg"
    url_shetty = "https://scontent.fybz2-1.fna.fbcdn.net/v/t31.18172-8/892202_622928654389383_831531800_o.jpg?_nc_cat=110&ccb=1-3&_nc_sid=19026a&_nc_ohc=b110-TFHRJEAX9lcnt7&_nc_oc=AQmq3zabM0G9anC9JeBQF2R9tvziAPUp8a-PjuiJEO562FF5UV3IIke4biUEAd3OWQA&_nc_ht=scontent.fybz2-1.fna&oh=4dc7232d431826e3b56eca69dfeffb85&oe=60C12478"
    url_iginio = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Iginio_Straffi.jpg/330px-Iginio_Straffi.jpg"
    url_pastor = "https://assets.mubicdn.net/images/cast_member/25926/image-w240.jpg?1473055274"
    url_molina = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSAYCaw6yhnTL2jT2MkLaA-KOPSNhC7WYLfxQ&usqp=CAU"
    url_many_directors = "https://www.mentorless.com/wp-content/uploads/2014/07/30-Famous-Directors-Advice-www.mentorless.com_-900x500.jpg"
    url_empty = "https://i.pinimg.com/736x/1c/89/56/1c8956908c496c2bf73f9f570bcc5f51.jpg"
    url_sonnefield = "https://static.wikia.nocookie.net/disney/images/a/a6/Barry_Sonnenfeld.jpg/revision/latest?cb=20180724193634"
    
    
    picture_of_director = 
      ifelse(c(input$director_comparisons == "Action & Adventure" & (input$director_type == "lead" | input$director_type == "both")), url_rajamouli,
      ifelse(c(input$director_comparisons == "Action & Adventure" & input$director_type == "assistant"), url_lana_wachowski,
      ifelse(c((input$director_comparisons == "Dramas" & (input$director_type == "lead" | input$director_type == "both")) | ((input$director_comparisons == "Classic Movies" & (input$director_type == "lead" | input$director_type == "both")))), url_chahine,
      ifelse(c(input$director_comparisons == "Dramas" & input$director_type == "assistant"), url_baiq, ###
      ifelse(c(input$director_comparisons == "TV Comedies" & (input$director_type == "lead" | input$director_type == "both")), url_lathan,
      ifelse(c(input$director_comparisons == "Comedies" & (input$director_type == "lead" | input$director_type == "both")), url_Dhawan,
      ifelse(c(input$director_comparisons == "TV Horror" & input$director_type == "assistant"), url_liu_yi, ###
      ifelse(c(input$director_comparisons == "Horror Movies" & (input$director_type == "lead" | input$director_type == "both")), url_soraya, 
      ifelse(c(input$director_comparisons == "Horror Movies" & input$director_type == "assistant"), url_parkpoom,
      ifelse(c(input$director_comparisons == "Stand-Up Comedy & Talk Shows" & input$director_type == "lead"), url_jung, ###
      ifelse(c(input$director_comparisons == "Stand-Up Comedy & Talk Shows" & input$director_type == "both"), url_jung,
      ifelse(c(input$director_comparisons == "Stand-Up Comedy" & input$director_type == "lead"), url_campos,       
      ifelse(c(input$director_comparisons == "Stand-Up Comedy" & (input$director_type == "both" | input$director_type == "assistant")), url_suter,
      ifelse(c(input$director_comparisons == "Music & Musicals" & (input$director_type == "lead" |input$director_type == "both")), url_askem,
      ifelse(c(input$director_comparisons == "Music & Musicals" & input$director_type == "assistant"), url_akiva,
      ifelse(c((input$director_comparisons == "Sports Movies" & (input$director_type == "lead" | input$director_type == "both"))| (input$director_comparisons == "Documentaries" & (input$director_type == "lead" | input$director_type == "both"))), url_yudin,
      ifelse(c((input$director_comparisons == "Sports Movies" & input$director_type == "assistant") | (input$director_comparisons == "Documentaries" & input$director_type == "assistant")), url_carolla,
      ifelse(c(input$director_comparisons == "Independent Movies" & (input$director_type == "lead" & input$director_type == "both")), url_baumbach,     
      ifelse(c(input$director_comparisons == "Cult Movies" & (input$director_type == "lead" | input$director_type == "both")), url_clattenberg,
      ifelse(c(input$director_comparisons == "Korean TV Shows" & (input$director_type == "lead" | input$director_type == "both")), url_shin, ###
      ifelse(c(input$director_comparisons == "British TV Shows" & (input$director_type == "lead" | input$director_type == "both")), url_fothergill,
      ifelse(c(input$director_comparisons == "British TV Shows" & input$director_type == "assistant"), url_schuh, ###
      ifelse(c(input$director_comparisons == "Children & Family Movies" & (input$director_type == "lead" | input$director_type == "both")), url_rodriguez,
      ifelse(c(input$director_comparisons == "Children & Family Movies" & input$director_type == "assistant"), url_shetty,
      ifelse(c(input$director_comparisons == "Kids' TV" & (input$director_type == "lead" | input$director_type == "both")), url_iginio,
      ifelse(c(input$director_comparisons == "Kids' TV" & input$director_type == "assistant"), url_schuh,
      ifelse(c(input$director_comparisons == "Thrillers" & input$director_type == "assistant"), url_pastor,       
      ifelse(c(input$director_comparisons == "International Movies" & (input$director_type == "lead" | input$director_type == "both")), url_molina,
      ifelse(c(input$director_comparisons == "International Movies" & input$director_type == "assistant"), url_mastan,
      ifelse(c(input$director_comparisons == "International TV Shows" & (input$director_type == "lead" | input$director_type == "both")), url_fothergill,
      ifelse(c(input$director_comparisons == "Sci-Fi & Fantasy" & input$director_type == "lead"), url_lily_wachowski, ###
      ifelse(c(input$director_comparisons == "Sci-Fi & Fantasy" & input$director_type == "assistant"), url_lana_wachowski,
      ifelse(c(input$director_comparisons == "Romantic TV Shows" & (input$director_type == "lead" | input$director_type == "both")), url_shin,
      ifelse(c(input$director_comparisons == "Romantic Movies" & (input$director_type == "lead" | input$director_type == "both")), url_molina,
      ifelse(c(input$director_comparisons == "Romantic Movies" & input$director_type == "assistant"), url_baiq,
      ifelse(c(input$director_comparisons == "Anime Features" & (input$director_type == "lead" | input$director_type == "both")), url_toshiya,
      ifelse(c(input$director_comparisons == "Anime Features" & input$director_type == "assistant"), url_hiroyuki,
      ifelse(c(input$director_comparisons == "Docuseries" & (input$director_type == "lead" | input$director_type == "both")), url_fothergill,
      ifelse(c(input$director_comparisons == "Faith & Spirituality" & (input$director_type == "lead" | input$director_type == "both")), url_batty, 
      ifelse(c(input$director_comparisons == "TV Mysteries" & input$director_type == "assistant"), url_barbara, ###
      ifelse(c((input$director_comparisons == "TV Action & Adventure" & (input$director_type == "lead" | input$director_type == "both")) | 
            (input$director_comparisons == "TV Dramas") | 
            (input$director_comparisons == "TV Horror" & (input$director_type == "lead" | input$director_type == "both")) | 
            (input$director_comparisons == "Comedies" & input$director_type == "assistant") | 
            (input$director_comparisons == "TV Comedies" & input$director_type == "assistant") | 
            (input$director_comparisons == "TV Horror" & (input$director_type == "lead" | input$director_type == "both")) | 
            (input$director_comparisons == "LGBTQ Movies" & input$director_type == "assistant") | 
            (input$director_comparisons == "Independent Movies" & input$director_type == "assistant") | 
            (input$director_comparisons == "Classic Movies" & input$director_type == "assistant") | 
            (input$director_comparisons == "Cult Movies" & input$director_type == "assistant") | 
            (input$director_comparisons == "Korean TV Shows" & input$director_type == "assistant") | 
            (input$director_comparisons == "Spanish-Language TV Shows") | 
            (input$director_comparisons == "TV Thrillers" & (input$director_type == "both" | input$director_type == "assistant")) |
            (input$director_comparisons == "Thrillers" & (input$director_type == "both" | input$director_type == "lead")) |
            (input$director_comparisons == "Reality TV" & (input$director_type == "lead" | input$director_type == "both")) | 
            (input$director_comparisons == "International TV Shows" & input$director_type == "assistant") |
            (input$director_comparisons == "TV Sci-Fi & Fantasy" & (input$director_type == "lead" | input$director_type == "both")) |
            (input$director_comparisons == "Anime Series" & (input$director_type == "lead" | input$director_type == "both")) | 
            (input$director_comparisons == "Crime TV Shows") |
            (input$director_comparisons == "TV Mysteries" & (input$director_type == "lead" | input$director_type == "both")) | 
            (input$director_comparisons == "Docuseries" & input$director_type == "assistant")) | 
            (input$director_comparisons == "Stand-Up Comedy & Talk Shows" & input$director_type == "assistant") | 
            (input$director_comparisons == "LGBTQ Movies" & (input$director_type == "lead" | input$director_type == "both")) |
            (input$director_comparisons == "Classic & Cult TV" & (input$director_type == "lead" | input$director_type == "both")) | 
            (input$director_comparisons == "Teen TV Shows" & (input$director_type == "lead" | input$director_type == "both")) | 
            (input$director_comparisons == "TV Thrillers" & input$director_type == "lead") | 
            (input$director_comparisons == "Romantic TV Shows" & input$director_type == "assistant"), url_many_directors, url_empty)))))))))))))))))))))))))))))))))))))))))
      
      
      if (input$director_comparisons == "TV Mysteries" & input$director_type == "assistant") {
        
        tags$div(
          HTML("<div class = 'row'>
                
                  <img src = 'https://images.squarespace-cdn.com/content/v1/5b219c94c258b4d21b0ffaa1/1560810361080-4CZYEZ8M248JP51SKNKE/ke17ZwdGBToddI8pDm48kAUSRIY7mNHByKcvNnydaU5Zw-zPPgdn4jUwVcJE1ZvWEtT5uBSRWt4vQZAgTJucoTqqXjS3CfNDSuuf31e0tVGWekw2-AxAD63C5uT21pXkkwKCfPFY2EOnCqHvHGSwoTFvbuqF0GUInBxxtVhBOn4/Barbara+Schroeder.png' width='250' height='400'>
                
                
                  <img src = 'https://i.mydramalist.com/kRXV8_5f.jpg' width='250' height='400'>
              
               </div>"
               )
        )
         
      } else if (input$director_comparisons == "Docuseries" & (input$director_type == "lead" | input$director_type == "both")) {
        
        tags$div(
          HTML("<div class = 'row'>
                
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMTYwODc0MzY1OV5BMl5BanBnXkFtZTgwNTAyNjY3NzM@._V1_.jpg' width='250' height='400'>
                
               
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMjI1OTkyNTQ1NV5BMl5BanBnXkFtZTcwMzYwNTk2Mw@@._V1_UY1200_CR157,0,630,1200_AL_.jpg' width='250' height='400'>
               
               </div>"
               )
        )
        
      } else if ((input$director_comparisons == "Korean TV Shows" & (input$director_type == "lead" | input$director_type == "both"))) {
        
        tags$div(
          HTML("<div class = 'row'>
               
                  <img src = 'https://spnimage.edaily.co.kr/images/photo/files/NP/S/2016/07/PS16070500042.jpg' width='250' height='400'>
               
               
                  <img src = 'https://6.viki.io/image/9eb319a6ca3840af9c3500b2812eab53.jpeg?s=900x600&e=t' width='250' height='400'>
               
               </div>"
               )
        )
        
      } else if ((input$director_comparisons == "British TV Shows" & input$director_type == "assistant")) {
        
        tags$div(
          HTML("<div class = 'row'>
               
                  <img src = 'https://m.media-amazon.com/images/M/MV5BOTI0MzU0OTI1M15BMl5BanBnXkFtZTcwMTc2MDM1NA@@._V1_.jpg' width='250' height='400'>
               
               
                  <img src = 'https://permanentplastichelmet.files.wordpress.com/2012/11/jesse_vile_guibson_guitar_raindance.jpeg' width='250' height='400'>
               
               </div>"
               )
        )
        
      } else if ((input$director_comparisons == "Korean TV Shows" & (input$director_type == "lead" | input$director_type == "both"))) {
        
        tags$div(
          HTML("<div class = 'row'>
               
                  <img src = 'https://spnimage.edaily.co.kr/images/photo/files/NP/S/2016/07/PS16070500042.jpg' width='250' height='400'>
               
               
                  <img src = 'https://6.viki.io/image/9eb319a6ca3840af9c3500b2812eab53.jpeg?s=900x600&e=t' width='250' height='400'>
               
               </div>"
               )
        )
        
      } else if ((input$director_comparisons == "Stand-Up Comedy & Talk Shows" & input$director_type == "lead")) {
        
        tags$div(
          HTML("<div class = 'row'>
               
                  <img src = 'https://m.timesofindia.com/thumb/78252439.cms?width=170&height=240' width='250' height='400'>
               
               
                  <img src = 'https://spnimage.edaily.co.kr/images/photo/files/NP/S/2016/07/PS16070500042.jpg' width='250' height='400'>
               
               </div>"
               )
        )
        
      } else if ((input$director_comparisons == "Dramas" & input$director_type == "assistant")) {
        
        tags$div(
          HTML("<div class = 'row'>
               
                  <img src = 'https://cdn-image.hipwee.com/wp-content/uploads/2019/08/hipwee-IMG_9645.jpg' width='250' height='400'>
               
                  <img src = 'https://nettv4u.com/imagine/30-09-2020/sunil-sukthankar.jpg' width='250' height='400'>
               
               </div>"
               )
        )
        
      } else if ((input$director_comparisons == "TV Horror" & input$director_type == "assistant")) {
        
        tags$div(
          HTML("<div class = 'row'>
               
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMDkwNWZmZjEtZjEzZC00YTVlLWE3OTEtNWUwNzhkZjk5MTA5XkEyXkFqcGdeQXVyOTM3ODM5OTI@._V1_.jpg' width='250' height='400'>
               
                  <img src = 'https://bingeddata.s3.amazonaws.com/uploads/2021/01/nMCIiKJZs5FZCwI4Gml4CuerfzU.jpg' width='250' height='400'>
               
               </div>"
               )
        )
        
      } else if ((input$director_comparisons == "Sci-Fi & Fantasy" & input$director_type == "both")) {
          tags$img(src = url_wachowski_sisters, height = 400, width = 600)
      }
        else if (picture_of_director == url_many_directors | picture_of_director == url_empty) {
          tags$img(src = picture_of_director, height = 400, width = 800)  
      } else {
          tags$img(src = picture_of_director, height = 400, width = 275)  
      }
           
  }) 

	# Need to add the names of the directors here.

output$director_name = renderText({
    
    ifelse(c((input$director_comparisons == "TV Action & Adventure" & (input$director_type == "lead" | input$director_type == "both")) | 
            (input$director_comparisons == "TV Dramas") | 
            (input$director_comparisons == "TV Horror" & (input$director_type == "lead" | input$director_type == "both")) | 
            (input$director_comparisons == "Comedies" & input$director_type == "assistant") | 
            (input$director_comparisons == "TV Comedies" & input$director_type == "assistant") | 
            (input$director_comparisons == "TV Horror" & (input$director_type == "lead" | input$director_type == "both")) | 
            (input$director_comparisons == "LGBTQ Movies" & input$director_type == "assistant") | 
            (input$director_comparisons == "Independent Movies" & input$director_type == "assistant") | 
            (input$director_comparisons == "Classic Movies" & input$director_type == "assistant") | 
            (input$director_comparisons == "Cult Movies" & input$director_type == "assistant") | 
            (input$director_comparisons == "Korean TV Shows" & input$director_type == "assistant") | 
            (input$director_comparisons == "Spanish-Language TV Shows") | 
            (input$director_comparisons == "TV Thrillers" & (input$director_type == "both" | input$director_type == "assistant")) |
            (input$director_comparisons == "Thrillers" & (input$director_type == "both" | input$director_type == "lead")) |
            (input$director_comparisons == "Reality TV" & (input$director_type == "lead" | input$director_type == "both")) | 
            (input$director_comparisons == "International TV Shows" & input$director_type == "assistant") |
            (input$director_comparisons == "TV Sci-Fi & Fantasy" & (input$director_type == "lead" | input$director_type == "both")) |
            (input$director_comparisons == "Anime Series" & (input$director_type == "lead" | input$director_type == "both")) | 
            (input$director_comparisons == "Crime TV Shows") |
            (input$director_comparisons == "TV Mysteries" & (input$director_type == "lead" | input$director_type == "both")) | 
            (input$director_comparisons == "Docuseries" & input$director_type == "assistant")) | 
            (input$director_comparisons == "Stand-Up Comedy & Talk Shows" & input$director_type == "assistant") | 
            (input$director_comparisons == "LGBTQ Movies" & (input$director_type == "lead" | input$director_type == "both")) |
            (input$director_comparisons == "Classic & Cult TV" & (input$director_type == "lead" | input$director_type == "both")) | 
            (input$director_comparisons == "Teen TV Shows" & (input$director_type == "lead" | input$director_type == "both")) | 
            (input$director_comparisons == "TV Thrillers" & input$director_type == "lead") | 
            (input$director_comparisons == "Romantic TV Shows" & input$director_type == "assistant"), "It's a multi-way tie", 

    ifelse(c((input$director_comparisons == "Teen TV Shows" & input$director_type == "assistant") | 
            (input$director_comparisons == "Classic & Cult TV" & input$director_type == "assistant") |
            (input$director_comparisons == "TV Action & Adventure" & input$director_type == "assistant") | 
            (input$director_comparisons == "Reality TV" & input$director_type == "assistant") |
            (input$director_comparisons == "TV Sci-Fi & Fantasy" & input$director_type == "assistant") |
            (input$director_comparisons == "Science & Nature TV") |
            (input$director_comparisons == "Anime Series" & input$director_type == "assistant") |
            (input$director_comparisons == "Faith & Spirituality" & input$director_type == "assistant")), "There isn't a single director in this genre",  
      
    ifelse(c(input$director_comparisons == "Action & Adventure" & (input$director_type == "lead" | input$director_type == "both")), "S.S. Rajamouli",
    ifelse(c(input$director_comparisons == "Action & Adventure" & input$director_type == "assistant"), "Lana Wachowski",
    ifelse(c(input$director_comparisons == "Dramas" & (input$director_type == "lead" | input$director_type == "both")), "Youssef Chahine",
    ifelse(c(input$director_comparisons == "Dramas" & input$director_type == "assistant"), "It's a tie between Pidi Baiq and Sunil Sukthankar", 
    ifelse(c(input$director_comparisons == "TV Comedies" & (input$director_type == "lead" | input$director_type == "both")), "Stan Lathan",
    ifelse(c(input$director_comparisons == "Comedies" & (input$director_type == "lead" | input$director_type == "both")), "David Dhawan",
    ifelse(c(input$director_comparisons == "TV Horror" & input$director_type == "assistant"), "It's a tie between Liu Yi and Chuang Shiang-an",
    ifelse(c(input$director_comparisons == "Horror Movies" & (input$director_type == "lead" | input$director_type == "both")), "Rocky Soraya",
    ifelse(c(input$director_comparisons == "Horror Movies" & input$director_type == "assistant"), "Parkpoom Wongpoom", 
    ifelse(c(input$director_comparisons == "Stand-Up Comedy & Talk Shows" & input$director_type == "lead"), "Jung-ah Im and Stan Lathan",
    ifelse(c(input$director_comparisons == "Stand-Up Comedy & Talk Shows" & input$director_type == "both"), "Jung-ah Im",
    ifelse(c(input$director_comparisons == "Stand-Up Comedy" & input$director_type == "lead"), "Raul Campos",
    ifelse(c(input$director_comparisons == "Stand-Up Comedy" & (input$director_type == "both" | input$director_type == "assistant")), "Jan Suter",
    ifelse(c(input$director_comparisons == "Music & Musicals" & (input$director_type == "lead" |input$director_type == "both")), "Matt Askem",
    ifelse(c(input$director_comparisons == "Music & Musicals" & input$director_type == "assistant"), "Akiva Schaffer",
    ifelse(c((input$director_comparisons == "Sports Movies" & (input$director_type == "lead" | input$director_type == "both"))| (input$director_comparisons == "Documentaries" & (input$director_type == "lead" | input$director_type == "both"))), "Vlad Yudin",
    ifelse(c((input$director_comparisons == "Sports Movies" & input$director_type == "assistant") | (input$director_comparisons == "Documentaries" & input$director_type == "assistant")), "Adam Carolla", 
    ifelse(c(input$director_comparisons == "Independent Movies" & (input$director_type == "lead" & input$director_type == "both")), "Noah Baumbach",
    ifelse(c(input$director_comparisons == "Classic Movies" & (input$director_type == "lead" | input$director_type == "both")), "Youssef Chahine",
    ifelse(c(input$director_comparisons == "Cult Movies" & (input$director_type == "lead" | input$director_type == "both")), "Mike Clattenberg",
    ifelse(c(input$director_comparisons == "Korean TV Shows" & (input$director_type == "lead" | input$director_type == "both")), "It's a tie between Shin Won-ho and Jung-ah Im",
    ifelse(c(input$director_comparisons == "British TV Shows" & (input$director_type == "lead" | input$director_type == "both")), "Alastair Fothergill",
    ifelse(c(input$director_comparisons == "British TV Shows" & input$director_type == "assistant"), "It's a tie between Jacob Schuh and Jessie Vile", 
    ifelse(c(input$director_comparisons == "Children & Family Movies" & (input$director_type == "lead" | input$director_type == "both")), "Robert Rodriguez",
    ifelse(c(input$director_comparisons == "Children & Family Movies" & input$director_type == "assistant"), "Tilak Shetty", 
    ifelse(c(input$director_comparisons == "Kids' TV" & (input$director_type == "lead" | input$director_type == "both")), "Iginio Straffi",
    ifelse(c(input$director_comparisons == "Kids' TV" & input$director_type == "assistant"), "Jakob Schuh",
          
    ifelse(c(input$director_comparisons == "Thrillers" & input$director_type == "assistant"), "David Pastor",
    ifelse(c(input$director_comparisons == "International Movies" & (input$director_type == "lead" | input$director_type == "both")), "Cathy Garcia-Molina",
    ifelse(c(input$director_comparisons == "International Movies" & input$director_type == "assistant"), "Mastan Alibhai Burmawalla", 
    ifelse(c(input$director_comparisons == "International TV Shows" & (input$director_type == "lead" | input$director_type == "both")), "Alastair Fothergill",
    ifelse(c(input$director_comparisons == "Sci-Fi & Fantasy" & input$director_type == "lead"), "It's a tie between Lily Wachowski and Barry Sonnenfeld",
    ifelse(c(input$director_comparisons == "Sci-Fi & Fantasy" & input$director_type == "both"), "It's a tie between Lily and Lana Wachowski",
    ifelse(c(input$director_comparisons == "Sci-Fi & Fantasy" & input$director_type == "assistant"), "Lana Wachowski",
    ifelse(c(input$director_comparisons == "Romantic TV Shows" & (input$director_type == "lead" | input$director_type == "both")), "Shin Won-ho",
    ifelse(c(input$director_comparisons == "Romantic Movies" & (input$director_type == "lead" | input$director_type == "both")), "Cathy Garcia-Molina",
    ifelse(c(input$director_comparisons == "Romantic Movies" & input$director_type == "assistant"), "Pidi Baiq",   
    ifelse(c(input$director_comparisons == "Anime Features" & (input$director_type == "lead" | input$director_type == "both")), "Toshiya Shinohara",
    ifelse(c(input$director_comparisons == "Anime Features" & input$director_type == "assistant"), "Hiroyuki Seshita", 
    ifelse(c(input$director_comparisons == "TV Mysteries" & input$director_type == "assistant"), "It's a tie between Barbara Schroeder and Chen Rong-hui",
    ifelse(c(input$director_comparisons == "Docuseries" & (input$director_type == "lead" | input$director_type == "both")), "It's a tie between Ken Burns and Alastair Fothergill",
    ifelse(c(input$director_comparisons == "Faith & Spirituality" & (input$director_type == "lead" | input$director_type == "both")), "David Batty", NA))))))))))))))))))))))))))))))))))))))))))))
    
  })

	# Time to repeat the comparison process b/t credited and uncredited cast members 

output$cast_charts = renderPlot({
    
    if (input$cast_charts == "default") {
      
      netflix_cast_split %>% 
        mutate(
          any_cast = ifelse(cast == "Unknown/No Cast", "no", "yes")
        ) %>% 
        group_by(any_cast) %>% 
        summarise(count = n()) %>% 
        ggplot(aes(x = reorder(any_cast, count), y = count, fill = any_cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        scale_fill_manual(values = c("yes" = 'firebrick2', 'no' = 'slateblue3')) + 
        theme_classic() + 
        theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 20), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 20),
          plot.title = element_text(size = 25, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 20, color = 'black')
        ) + 
        guides(fill = FALSE) + 
        labs(x = "Presence of a Credited Cast?", y = "Number of Netflix Content", title = "Breakdown of Netflix Content by Presence of Credited Cast") + 
        coord_flip()
    } else if (input$cast_charts == "english") {
      
      netflix_countryxcast_df %>% 
        mutate(
          any_cast = ifelse(cast == "Unknown/No Cast", "no", "yes")
        ) %>% 
        mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
        ) %>%
        filter(country_type == "main country") %>% 
        filter(!is.na(english_or_not)) %>% 
        group_by(any_cast, english_or_not) %>% 
        summarise(count = n()) %>% 
        ggplot(aes(x = reorder(any_cast, count), y = count, fill = any_cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        scale_fill_manual(values = c("yes" = 'firebrick2', 'no' = 'slateblue3')) + 
        theme_classic() + 
        labs(x = "Presence of a Credited Cast?", y = "Number of Netflix Content", title = "Breakdown of Netflix Content by Presence of Credited Cast and Language") + 
        theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 20), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 20, angle = 90),
          plot.title = element_text(size = 25, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 20, color = 'black')
        ) + 
        guides(fill = FALSE) + 
        coord_flip() + 
        facet_wrap(vars(english_or_not))
      
    } else if (input$cast_charts == "type") {
      
      netflix_cast_split %>% 
        mutate(
          any_cast = ifelse(cast == "Unknown/No Cast", "no", "yes")
        ) %>%
        group_by(any_cast, type) %>% 
        summarise(count = n()) %>% 
        ggplot(aes(x = reorder(any_cast, count), y = count, fill = any_cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        scale_fill_manual(values = c("yes" = 'firebrick2', 'no' = 'slateblue3')) + 
        theme_classic() + 
        labs(x = "Presence of a Credited Cast?", y = "Number of Netflix Content", title = "Breakdown of Netflix Content by Presence of Credited Cast and Content Type") + 
        theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 20), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 20, angle = 90),
          plot.title = element_text(size = 25, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 20, color = 'black')
        ) + 
        guides(fill = FALSE) + 
        coord_flip() + 
        facet_wrap(vars(type))
      
    } else if (input$cast_charts == "genre") {
      
      netflix_genrexcast_df %>% 
        mutate(
          any_cast = ifelse(cast == "Unknown/No Cast", "no", "yes")
        ) %>%
        group_by(any_cast, genre) %>% 
        summarise(count = n()) %>% 
        ggplot(aes(x = reorder(any_cast, count), y = count, fill = any_cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        scale_fill_manual(values = c("yes" = 'firebrick2', 'no' = 'slateblue3')) + 
        theme_classic() + 
        labs(x = "Presence of a Credited Cast?", y = "Number of Netflix Content", title = "Breakdown of Netflix Content by Presence of Credited Cast and Genre") + 
        theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 20), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 20, angle = 90),
          plot.title = element_text(size = 25, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 8.5, color = 'black')
        ) + 
        guides(fill = FALSE) + 
        coord_flip() + 
        facet_wrap(vars(genre))
      
    }  else if (input$cast_charts == "content") {
      
      netflix_cast_split %>% 
        mutate(
          any_cast = ifelse(cast == "Unknown/No Cast", "no", "yes")
        ) %>%
        group_by(any_cast, rating) %>% 
        summarise(count = n()) %>% 
        ggplot(aes(x = reorder(any_cast, count), y = count, fill = any_cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        scale_fill_manual(values = c("yes" = 'firebrick2', 'no' = 'slateblue3')) + 
        theme_classic() + 
        labs(x = "Presence of a Credited Cast?", y = "Number of Netflix Content", title = "Breakdown of Netflix Content by Presence of Credited Cast and Content Rating") + 
        theme(
          axis.line = element_line(color = 'black'),
          axis.text = element_text(color = 'black', size = 20), 
          axis.text.y = element_text(size = 20),
          axis.text.x = element_text(size = 20, angle = 90),
          plot.title = element_text(size = 25, hjust = 0.5),
          axis.title.x = element_text(size = 20),
          axis.title.y = element_text(size = 20), 
          strip.text.x =  element_text(size = 20, color = 'black')
        ) + 
        guides(fill = FALSE) + 
        coord_flip() + 
        facet_wrap(vars(rating))
      
    }
    
  })

# Make a reactive chart showing top actors/actresses 

cast_n_director_genre_2 = reactive({
		switch(input$cast_comparisons, 
		as.character(input$cast_comparisons))

})

output$top_cast = renderPlot({
    
    if(input$cast_language == "both" & input$cast_type == "headliner")  {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>% 
        filter(cast_type == "headliner") %>% 
        filter(genre == as.character(cast_n_director_genre_2())) %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>% 
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Headlining  Actors/Actresses", y = "Number of Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "headliner") {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>%
        filter(cast_type == "headliner") %>% 
        filter(genre == as.character(cast_n_director_genre_2())) %>%
        mutate(
          english_or_not = 
            ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
            ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
        ) %>% 
        filter(country_type == "main country") %>%
        filter(english_or_not == "English Speaking") %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>%
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Headlining  Actors/Actresses", y = "Number of English-Speaking Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "headliner") {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>%
        filter(cast_type == "headliner") %>% 
        filter(genre == as.character(cast_n_director_genre_2())) %>%
        mutate(
          english_or_not = 
            ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
            ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
        ) %>% 
        filter(country_type == "main country") %>%
        filter(english_or_not == "Non-English Speaking") %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>%
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Headlining Actors/Actresses", y = "Number of Non-English Speaking Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    } else if (input$cast_language == "both" & input$cast_type == "supporting cast")  {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>% 
        filter(cast_type == "supporting cast") %>% 
        filter(genre == as.character(cast_n_director_genre_2())) %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>% 
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Supporting Actors/Actresses", y = "Number of Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "supporting cast") {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>%
        filter(cast_type == "supporting cast") %>% 
        filter(genre == as.character(cast_n_director_genre_2())) %>%
        mutate(
          english_or_not = 
            ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
            ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
        ) %>% 
        filter(country_type == "main country") %>%
        filter(english_or_not == "English Speaking") %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>%
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Supporting  Actors/Actresses", y = "Number of English-Speaking Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast") {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>%
        filter(cast_type == "supporting cast") %>% 
        filter(genre == as.character(cast_n_director_genre_2())) %>%
        mutate(
          english_or_not = 
            ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
            ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
        ) %>% 
        filter(country_type == "main country") %>%
        filter(english_or_not == "Non-English Speaking") %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>%
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Supporting Actors/Actresses", y = "Number of Non-English Speaking Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    } else if (input$cast_language == "both" & input$cast_type == "both")  {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>% 
        filter(genre == as.character(cast_n_director_genre_2())) %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>% 
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Actors/Actresses", y = "Number of Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "both") {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>%
        filter(genre == as.character(cast_n_director_genre_2())) %>%
        mutate(
          english_or_not = 
            ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
            ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
        ) %>% 
        filter(country_type == "main country") %>%
        filter(english_or_not == "English Speaking") %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>%
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Actors/Actresses", y = "Number of English-Speaking Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "both") {
      
      netflix_genrexcountryxcast_df %>% 
        filter(cast != "Unknown/No Cast") %>%
        filter(genre == as.character(cast_n_director_genre_2())) %>%
        mutate(
          english_or_not = 
            ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
            ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
            ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
        ) %>% 
        filter(country_type == "main country") %>%
        filter(english_or_not == "Non-English Speaking") %>% 
        group_by(cast) %>% 
        summarise(count = n()) %>% 
        arrange(desc(count)) %>%
        filter(count > 1) %>%
        top_n(5) %>% 
        ggplot(aes(x = reorder(cast, count), y = count, fill = cast)) + 
        geom_bar(stat = 'identity', color = 'black') + 
        guides(fill = F) +
        theme_classic() +
        theme(
          axis.text = element_text(color = 'black'),
          plot.caption = element_text(color = 'black', hjust = 0)
        ) + 
        coord_flip() +
        labs(x = "Top Actors/Actresses", y = "Number of Non-English Speaking Netflix Content", caption = "* Only actors with at least 2 credited roles on Netflix")
      
    }
    
  })

	# Adding the God damn images of the top actors/actresses.....BASICALLY A PROOF OF CONCEPT 

output$cast_image = renderUI({
    
    url_tie = "https://www.8days.sg/image/13125184/16x9/1920/1080/ceea80d57f8f1737be2104c307e66125/wS/table-read-group-pic.jpg"
    url_nobody = "https://i.pinimg.com/736x/1c/89/56/1c8956908c496c2bf73f9f570bcc5f51.jpg"
    url_niccage = "https://upload.wikimedia.org/wikipedia/commons/f/f3/Nicolas_Cage_-_66%C3%A8me_Festival_de_Venise_%28Mostra%29.jpg"
    url_davidattenborough = "https://upload.wikimedia.org/wikipedia/commons/2/22/Weston_Library_Opening_by_John_Cairns_20.3.15-139_%28cropped%29.jpg"
    url_samuelwest = "https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/3/18/1426700200054/9e009fbf-6815-4c9a-9476-f18c828af913-1589x2040.jpeg?width=700&quality=85&auto=format&fit=max&s=aebf3559791f3fe06c7076bd80cc4880"
    url_adenyoung = "https://media.gq.com/photos/5582864e1177d66d68d51888/1:1/w_409,h_409,c_limit/blogs-the-feed-AdenYoung.jpg"
    url_michelaluci = "https://m.media-amazon.com/images/M/MV5BNmM3MmEwMjktZWZhZS00OWU2LTljNTItMGE0ODJhOWE3MjhiXkEyXkFqcGdeQXVyNTk0ODIyNDE@._V1_.jpg"
    url_elysemaloway = "https://m.media-amazon.com/images/M/MV5BMmRiYWNkZjMtZWE2NS00MDVlLTk5ZmEtY2JkNGQ3OGY5NjM5XkEyXkFqcGdeQXVyOTY2ODkwODg@._V1_QL50_SY1000_CR0,0,691,1000_AL_.jpg"
    url_robertdeniro = "https://resizing.flixster.com/puutVCJcjt79MKQfr_osa_-HGPY=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/55052/55052_v9_bc.jpg"
    url_markduplass = "https://resizing.flixster.com/LQLUXJDEKZ3Jp224Yhb8A2BLmpo=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/444353/444353_v9_bc.jpg"
    url_royhaylock = "https://hips.hearstapps.com/digitalspyuk.cdnds.net/18/29/1531924362-screen-shot-2018-07-18-at-152725.jpg?resize=480:*"
    url_jimparsons = "https://m.media-amazon.com/images/M/MV5BMTg1MTkxODgzMF5BMl5BanBnXkFtZTgwMjExMjgyNzM@._V1_.jpg"
    url_sylvesterstallone = "https://static.onecms.io/wp-content/uploads/sites/20/2021/04/15/sylvester-stallone.jpg"
    url_jeffdunham = "https://www.biography.com/.image/t_share/MTE1ODA0OTcxOTM3ODU5MDg1/jeff-dunham-20682855-1-402.jpg"
    url_jeffross = "https://www.gannett-cdn.com/presto/2020/01/28/PPHX/80d2cd06-b0f1-4ea9-a711-4d817f479bd3-jeff_ross.jpg?crop=814,1086,x0,y68&quality=50&width=640"
    url_davechappelle = "https://s.abcnews.com/images/US/dave-chappelle-file-gty-jef-190507_hpEmbed_10x13_992.jpg"
    url_michaelgross = "https://upload.wikimedia.org/wikipedia/commons/8/85/Michael_Gross_2015.jpg"
    url_adamsandler = "https://resizing.flixster.com/AQbHt8YmgShTUNtgydPFqbwtJ8g=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/2255/2255_v9_bb.jpg"
    url_rickygervais = "https://upload.wikimedia.org/wikipedia/commons/7/79/GervaisBlooms021218-21_%2844341159690%29_%28cropped%29.jpg"
    url_shahrukhkhan = "https://m.media-amazon.com/images/M/MV5BZDk1ZmU0NGYtMzQ2Yi00N2NjLTkyNWEtZWE2NTU4NTJiZGUzXkEyXkFqcGdeQXVyMTExNDQ2MTI@._V1_UY1200_CR107,0,630,1200_AL_.jpg"
    url_jeanetteaw = "https://bingeddata.s3.amazonaws.com/uploads/2020/12/jeanette-aw.jpg"
    url_aaronyan = "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/20130713_%E7%82%8E%E4%BA%9E%E7%B6%B8_%E9%A6%99%E6%B8%AF%E7%9D%A1%E4%B8%8D%E8%91%97%E9%9F%B3%E6%A8%82%E6%9C%83.jpg/1200px-20130713_%E7%82%8E%E4%BA%9E%E7%B6%B8_%E9%A6%99%E6%B8%AF%E7%9D%A1%E4%B8%8D%E8%91%97%E9%9F%B3%E6%A8%82%E6%9C%83.jpg"
    url_taapseepanu = "https://assets.telegraphindia.com/telegraph/2eaa75d3-031e-474a-9706-77d6e18e96d7.jpg"
    url_akshaykumar = "https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.upp-prod-us.s3.amazonaws.com%2Fef6ec084-afbc-11e9-b3e2-4fdf846f48f5?fit=scale-down&source=next&width=700"
    url_emirmahira = "https://assets.mycast.io/actor_images/actor-emir-mahira-148422_large.jpg?1606400895"
    url_supanart = "https://www.wallofcelebrities.com/celebrity/supanart-jittaleela/pictures/xxlarge/supanart-jittaleela_3041667.jpg"
    url_shabanaazmi = "https://upload.wikimedia.org/wikipedia/commons/0/06/Shabana_Azmi_SFU_honorary_degree_%28cropped%29.jpg"
    url_nawazuddinsiddiqui = "https://upload.wikimedia.org/wikipedia/commons/c/ca/Nawazuddin_Siddiqui_-_IIFA_2017_Green_Carpet_%2836349709816%29_%28cropped%29.jpg"
    url_amitabhbachchan = "https://m.media-amazon.com/images/M/MV5BNTk1OTUxMzIzMV5BMl5BanBnXkFtZTcwMzMxMjI0Nw@@._V1_.jpg"
    url_parkboyoung = "https://i.mydramalist.com/vywkBf.jpg"
    url_leeseunggi = "https://www.hellokpop.com/wp-content/uploads/2020/12/lee-seung-gi-the-project.jpg"
    url_paulhollywood = "https://img.huffingtonpost.com/asset/5db07f462100006e28ad3b23.jpeg?cache=cQU58zqd9C&ops=scalefit_630_noupscale"
    url_damandeepsinghbaggan = "http://www.veethi.com/images/people/profile/Damandeep_Singh_Baggan.jpeg"
    url_yuichinakamura = "https://cdn.myanimelist.net/images/voiceactors/2/63264.jpg"
    url_ajaydevgn = "https://m.media-amazon.com/images/M/MV5BMTY0MDY2MDMwOV5BMl5BanBnXkFtZTgwNDE4MDM0OTE@._V1_.jpg"
    url_you = "https://asianwiki.com/images/a/ae/You-p1.jpg"
    url_sharito = "https://m.media-amazon.com/images/M/MV5BY2Q5ZDlmYmMtYTdhMy00MDIzLTkyNmUtMTM0MzU3YmI4NTIxXkEyXkFqcGdeQXVyNTU5ODEyOTE@._V1_.jpg"
    url_yoshitsugu = "https://static.wikia.nocookie.net/free-anime/images/f/f1/Matsuoka_Yoshitsugu.jpg/revision/latest?cb=20181220041854"
    url_wanida = "http://t0.gstatic.com/licensed-image?q=tbn:ANd9GcRWzogTRMa9xkQWYxqvT1ADz9g1rahXQ9K4MeXuNDN-0G_4PHCqgSkdS73XsBzo"
    url_johnlloydcruz = "https://m.media-amazon.com/images/M/MV5BOWJiMWU2YmUtMGNhNC00MDA1LWEzNDMtZDNhYTgzYjI5NDIwL2ltYWdlL2ltYWdlXkEyXkFqcGdeQXVyNTI5NjIyMw@@._V1_.jpg"
    url_junkotakeuchi = "https://m.media-amazon.com/images/M/MV5BNzIzNmM5OGEtMGZiYS00ZTg4LThhYmMtNjYwZDhlNzMwZGIwXkEyXkFqcGdeQXVyNDQxNjcxNQ@@._V1_UY1200_CR120,0,630,1200_AL_.jpg"
    url_anitta = "https://preview.redd.it/ia7oxi16gqa61.jpg?auto=webp&s=4090cf82b931800c56515af6f902d8d3fc9e7527"
    url_fedinuril = "https://assets.mycast.io/actor_images/actor-fedi-nuril-46489_large.jpeg?1582003959"
    url_katedelcastillo = "https://www.nydailynews.com/resizer/zBS6VR4A0aNyJZNGfr7y8B7AVxw=/800x1206/top/arc-anglerfish-arc2-prod-tronc.s3.amazonaws.com/public/EKPPXA3SBHV74XBL6VFWSUUP4Q.jpg"
    url_ajaydevgy = "https://m.media-amazon.com/images/M/MV5BMTY0MDY2MDMwOV5BMl5BanBnXkFtZTgwNDE4MDM0OTE@._V1_.jpg"
    url_selva = "https://www.wallofcelebrities.com/celebrity/selva-rasalingam/pictures/xlarge/selva-rasalingam_2422048.jpg"
    url_stevenyeun = "https://resizing.flixster.com/70lfLovSfQmbvQeitLuVLbclpDY=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/553525/553525_v9_ba.jpg"
    url_samjackson = "https://resizing.flixster.com/_8BNIVrtDPGwx5X061m2w--WDTM=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/71048/71048_v9_ba.jpg"
    url_mikecolter = "https://resizing.flixster.com/BdyhW-GBS_likotgyI-HGaMUXpA=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/259205/259205_v9_bc.jpg"
    url_giancarloesposito = "https://m.media-amazon.com/images/M/MV5BMjEyODM1NjI0OF5BMl5BanBnXkFtZTcwMTE0OTA1Mg@@._V1_UY317_CR4,0,214,317_AL_.jpg"
    url_benmendelsohn ="https://musicimage.xboxlive.com/catalog/video.contributor.c4f76400-0200-11db-89ca-0019b92a3933/image?locale=en-ca&target=circle"
    url_fortune = "https://www.gannett-cdn.com/-mm-/01b0d9658ad6053ad32662001af8fd89a4923222/c=0-236-2788-3953/local/-/media/2016/12/08/USATODAY/USATODAY/636167536833032560-GTY-628425620.jpg"
    url_mayarudolph = "https://pyxis.nymag.com/v1/imgs/39b/d21/c07809551c58120588de51e1017568609f-maya-rudolph.rsquare.w1200.jpg"
    url_burtyoung = "https://resizing.flixster.com/lgbub5tP07A3bRFg0Sk_SPvtj1o=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/9893/9893_v9_bb.jpg"
    url_harveykeitel = "https://media.cntraveler.com/photos/5dc0a1bebb86d20008f920b2/7:10/w_2799,h_3999,c_limit/Mag19_Dec_TR1219_GlobeTrotter01.jpg"
    url_andrealibman = "https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/Andrea_Libman_04_%2814948060937%29.jpg/1200px-Andrea_Libman_04_%2814948060937%29.jpg"
    url_vincenttong = "https://m.media-amazon.com/images/M/MV5BMTQ0OTQ1ODYzNl5BMl5BanBnXkFtZTcwOTM1MzQ5OQ@@._V1_.jpg"
    url_amirbageria = "https://m.media-amazon.com/images/M/MV5BNmY2YWZiMTEtZTI2Yi00NDE2LTk0ZjMtNDE4MTRmODhlNGFmXkEyXkFqcGdeQXVyODI1MjM3MjI@._V1_.jpg"
    url_danielapineida = "https://bingeddata.s3.amazonaws.com/uploads/2020/12/daniella-pineda.jpg"
    url_chloesavingy = "https://resizing.flixster.com/zpUBqPMGVeg58ToHAlQD-x8F3XE=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/172125/172125_v9_ba.jpg"
    url_briancox = "https://upload.wikimedia.org/wikipedia/commons/f/f1/Professor_Brian_Cox_OBE_FRS.jpg"
    url_lenaheadey = "https://m.media-amazon.com/images/M/MV5BMzIwMjIwNjg0M15BMl5BanBnXkFtZTgwOTI3MDEzMDE@._V1_UY317_CR14,0,214,317_AL_.jpg"
    url_laurencefishburne = "https://static.tvtropes.org/pmwiki/pub/images/laurence_fishburne.jpg"
    url_hugoweaving = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQZyGa7Zsf4euxWwXlL3dRU_qMJejsFBp3Q9g&usqp=CAU"
    url_noahcentino = "https://assets.teenvogue.com/photos/5b898ea5a375f111a9664219/master/pass/Netflix%20-NOAH_CENTINEO-115.jpg"
    url_hidekatsushibeda = "https://static.wikia.nocookie.net/snk/images/c/c7/Hidekatsu_Shibata.jpg/revision/latest?cb=20200606011121"
    url_anupamkher = "https://m.media-amazon.com/images/M/MV5BMjMyMjc1OTgzNF5BMl5BanBnXkFtZTgwMDY1NDMzOTE@._V1_UY317_CR4,0,214,317_AL_.jpg"
    url_taypinghui = "https://www.8days.sg/image/11411424/3x4/720/960/89dbd77d7122b5eb441b0e1896c38f41/hu/tph-make-up.jpg"
    url_jameswen = "https://i.mydramalist.com/rvb5g_5f.jpg"
    url_gulshan = "https://m.media-amazon.com/images/M/MV5BMTQ5OTU2NTA5Ml5BMl5BanBnXkFtZTgwNTQyMDU0OTE@._V1_.jpg"
    url_smitamalholtra = 'https://nettv4u.com/imagine/03-12-2020/smita-malhotra.jpg'
    url_umsanghyun = "https://photos.hancinema.net/photos/photo800883.jpg"
    url_takahiro = "https://static.jojowiki.com/images/a/a0/latest/20200520063017/TakahiroSakurai_Infobox.png"
    url_amandachou = "https://i.mydramalist.com/JpzYoc.jpg"
    url_willielindburg = "https://decider.com/wp-content/uploads/2020/06/magnetic.jpg?quality=80&strip=all&w=978"
    url_jamesfranco = "https://m.media-amazon.com/images/M/MV5BMjA4MzMzNDM5MF5BMl5BanBnXkFtZTgwMjQ0MDk0NDM@._V1_UY1200_CR85,0,630,1200_AL_.jpg"
    url_yuki =  "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b1/27th_Tokyo_International_Film_Festival_Y%C5%ABki_Kaji.jpg/1200px-27th_Tokyo_International_Film_Festival_Y%C5%ABki_Kaji.jpg"
    url_nawazuddin = "https://upload.wikimedia.org/wikipedia/commons/c/ca/Nawazuddin_Siddiqui_-_IIFA_2017_Green_Carpet_%2836349709816%29_%28cropped%29.jpg"
    url_umsanghyun = 'https://photos.hancinema.net/photos/photo800883.jpg'
    url_nasseruddinshah = 'https://i.pinimg.com/originals/33/88/ab/3388ab227a1d3cab3c4840d62d4bcf04.jpg'
    
    
  english_headliner_img = 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & (input$cast_comparisons == "Action & Adventure" |
                                                                                              input$cast_comparisons == "Thrillers" | 
                                                                                              input$cast_comparisons == "Sci-Fi & Fantasy")), url_niccage,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & (input$cast_comparisons == "Dramas" | 
                                                                                              input$cast_comparisons == "Classic Movies")), url_robertdeniro,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "TV Comedies"), url_rickygervais,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Comedies"), url_adamsandler,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Horror Movies"), url_michaelgross,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Stand-Up Comedy"), url_jeffdunham,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Sports Movies"), url_sylvesterstallone,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Independent Movies"), url_markduplass,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & (input$cast_comparisons == "British TV Shows" |
                                                                                              input$cast_comparisons == "International TV Shows" |
                                                                                              input$cast_comparisons == "Science & Nature TV")), url_davidattenborough,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Children & Family Movies"), url_elysemaloway,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Kids' TV"), url_elysemaloway,
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & (input$cast_comparisons == "International Movies" | 
                                                                                              input$cast_comparisons == "Documentaries" | 
                                                                                              input$cast_compaisons == "Docuseries")), url_samuelwest,
      ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "TV Mysteries"), url_adenyoung, url_nobody)))))))))))))

    
    
  non_english_headliner_img = 
      ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & (input$cast_comparisons == "Action & Adventure" |
                                                                                                   input$cast_comparisons == "Dramas" | 
                                                                                                   input$cast_comparisons == "Comedies" | 
                                                                                                   input$cast_comparisons == "International Movies")), url_shahrukhkhan, 
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Action & Adventure"), url_jeanetteaw, 
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "TV Comedies"), url_aaronyan, 
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Music & Musicals"), url_akshaykumar,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Sports Movies"), url_emirmahira, 
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "LGBTQ Movies"), url_supanart,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Cult Movies"), url_amitabhbachchan, 
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "British TV Shows"), url_paulhollywood,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Teen TV Shows"), url_yuichinakamura,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Thrillers"), url_ajaydevgn,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Reality TV"), url_you,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Sci-Fi & Fantasy"), url_sharito,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Romantic Movies"), url_johnlloydcruz,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Anime Features"), url_junkotakeuchi,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Docuseries"), url_anitta,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Faith & Spirituality"), url_fedinuril,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Children & Family Movies"), url_damandeepsinghbaggan,  url_nobody)))))))))))))))))
    
    
  overall_headliner_img = 
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Action & Adventure" |
                                                                                input$cast_comparisons == "Dramas" | 
                                                                                input$cast_comparisons == "International Movies"), url_shahrukhkhan,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "TV Dramas"), url_jeanette_aw,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "TV Comedies"), url_aaronyan,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Comedies"), url_adamsandler,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Horror Movies"), url_michaelgross,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Stand-Up Comedy"), url_jeffdunham,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Music & Musicals"), url_akshaykumar,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Sports Movies"), url_sylvesterstallone,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Independent Movies"), url_markduplass, 
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Classic Movies"), url_robertdeniro,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & (input$cast_comparisons == "British TV Shows" | 
                                                                                input$cast_comparisons == "Science & Nature TV" | 
                                                                                input$cast_comparisons == "Docuseries")), url_davidattenborough,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Spanish-Language TV Shows"), url_katedelcastillo,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Children & Family Movies"), url_elysemalloway,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Kids' TV"), url_michelaluci, 
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Teen TV Shows"), url_yuichinakamura,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Reality TV"), url_you, 
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "International TV Shows"), url_yoshitsugu,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Sci-Fi & Fantasy"), url_niccage, 
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Romantic Movies"), url_johnlloydcruz, 
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Anime Features"), url_junkotakeuchi, 
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Anime Series"), url_yoshitsugu,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Crime TV Shows"), url_katedelcastillo,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "TV Mysteries"), url_adenyoung,
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Documentaries"), url_samuelwest, 
      ifelse(c(input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Faith & Spirituality"), url_selva, url_nobody)))))))))))))))))))))))))
    
    
    
    english_supporting_img = 
      ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Action & Adventure"), url_stevenyeun, 
      ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Action & Adventure"), url_samjackson, 
      ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & (input$cast_comparisons == "Dramas" | 
                                                                                                   input$cast_comparisons == "International Movies")), url_benmendelsohn, 
      ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & (input$cast_comparisons == "TV Comedies" | 
                                                                                                   input$cast_comparisons == "Stand-Up Comedy & Talk Shows" )), url_fortune, 
      ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & (input$cast_comparisons == "Comedies" | 
                                                                                                   input$cast_comparisons == "Music & Musicals")), url_mayarudolph, 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Sports Movies"), url_burtyoung, 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Classic Movies"), url_harveykeitel, 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Children & Family Movies"), url_andrealibman, 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Kids' TV"), url_vincenttong, 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Teen TV Shows"), url_amirbageria , 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Thrillers"), url_briancox, 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Romantic Movies"), url_noahcentino, 
       ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Anime Series"), url_hidekatsushibeda, url_nobody)))))))))))))
  
    
    
    non_english_supporting_img = 
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & (input$cast_comparisons == "Action & Adventure" | 
                                                                                                         input$cast_comparisons == "Dramas" | 
                                                                                                         input$cast_comparisons == "Comedies" | 
                                                                                                         input$cast_comparisons == "International Movies" | 
                                                                                                         input$cast_comparisons == "Romantic Movies")), url_anupamhker,
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & (input$cast_comparisons == "TV Dramas" | 
                                                                                                         input$cast_comparisons == "TV Sci-Fi & Fantasy" )), url_taypinghui,
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Comedies"), url_jameswen,
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Music & Musicals"), url_gulshan,
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Children & Family Movies"), url_smitamalholtra,
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Kids' TV"), url_umsanghyun,
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & (input$cast_comparisons == "International TV Shows" | 
                                                                                                         input$cast_comparisons == "Anime Series")), url_takahiro,
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Romantic TV Shows"), url_amandachou,
        ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Documentaries"), url_willielindburg, url_nobody)))))))))

    
    
    
    overall_supporting_img = 
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Action & Adventure"), url_stevenyeun ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & (input$cast_comparisons == "Action & Adventure" | 
                                                                                       input$cast_comparisons == "Dramas" | 
                                                                                       input$cast_comparisons == "Comedies" | 
                                                                                       input$cast_comparisons == "Children & Family Movies" | 
                                                                                       input$cast_comparisons == "International Movies" | 
                                                                                       input$cast_comparisons == "Romantic Movies")), url_anupamkher,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Dramas"), url_taypinghui ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Stand-Up Comedy & Talk Shows"), url_fortune ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Music & Musicals"), url_gulshan ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Romantic TV Shows"), url_amandachou ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Sports Movies"), url_burtyoung ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Classic Movies"), url_harveykeitel ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Kids' TV"), url_vincenttong ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "International TV Shows"), url_takahiro ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Anime Series"), url_takahiro ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Documentaries"), url_willielindburg, url_nobody))))))))))))
    
    
    
    english_overall_img = 
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "TV Dramas"), url_mikecolter,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Dramas"), url_jamesfranco,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & (input$cast_comparisons == "TV Comedies" | 
                                                                                          input$cast_comparisons == "Stand-Up Comedy & Talk Shows")), url_fortune,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Comedies"),url_adamsandler,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Horror Movies"), url_michaelgross,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Sports Movies"), url_burtyoung, 
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Independent Movies"), url_markduplass,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Classic Movies"), url_harveykeitel,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "British TV Shows"), url_davidattenborough,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Children & Family Movies"), url_andrealibman,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Kids' TV"), url_vincenttong,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Teen TV Shows"), url_amirbageria,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Thrillers"), url_niccage,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "International Movies"), url_samuelwest,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Science & Nature TV"), url_davidattenborough,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Anime Series"), url_hidekatsushibeda,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Crime TV Shows"), url_mikecolter,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Documentaries"), url_samuelwest,
        ifelse(c(input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Docuseries"), url_davidattenborough, url_nobody)))))))))))))))))))
    
    
    non_english_overall_img = 
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Docuseries"), url_anitta,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Documentaries"), url_willielindburg,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Anime Series"), url_takahiro,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Anime Features"), url_yuki,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Romantic Movies"), url_akshaykumar,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Romantic TV Shows"), url_amandachou,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Sci-Fi & Fantasy"), url_sharito,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & (input$cast_comparisons == "TV Sci-Fi & Fantasy" | 
                                                                                             input$cast_comparisons == "TV Dramas")), url_taypinghui,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "International TV Shows"), url_takahiro,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "International Movies"), url_anupamhker,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Thrillers"), url_nawazuddin,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Kid' TV"), url_umsanghyun,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Children & Family Movies"), url_smitamalholtra,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "British TV Shows"), url_paulhollywood,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Independent Movies"), url_nasseruddinshah ,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "LGBTQ Movies"), url_supanart,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & (input$cast_comparisons == "Comedies" | 
                                                                                             input$cast_comparisons == "Action & Adventure")), url_anupamkher ,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "TV Comedies"), url_jameswen ,
       ifelse(c(input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Dramas"), url_shahrukhkhan , url_nobody)))))))))))))))))))

    
    
    overall_overall_img = 
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & (input$cast_comparisons == "Action & Advenure" | 
                                                                            input$cast_comparisons == "Comedies")), url_anupamkher,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "TV Dramas"), url_taypinghui,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Dramas"), url_shahrukhkhan,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Horror Movies"), url_michaelgross,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Stand-Up Comedy & Talk Shows"), url_fortune,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Sports Movies"), url_burtyoung,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Independent Movies"), url_nasseruddinshah ,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Classic Movies"), url_harveykeitel,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & (input$cast_comparisons == "British TV Shows" | 
                                                                              input$cast_comparisons == "Science & Nature TV" | 
                                                                              input$cast_comparisons == "Docuseries" )), url_davidattenborough,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Children & Family Movies"), url_andrealibman,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Kids' TV"), url_vincenttong,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "International Movies"), url_anupamkher,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & (input$cast_comparisons == "International TV Shows" | 
                                                                              input$cast_comparisons == "Anime Series")), url_takahiro,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Romantic TV Shows"), url_amandachou,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Romantic Movies"), url_akshaykumar,
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Anime Features"), url_yuki, 
      ifelse(c(input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Documentaries"), url_samuelwest, url_nobody)))))))))))))))))
    
    
    
    if (input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "TV Action & Adventure") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://resizing.flixster.com/70lfLovSfQmbvQeitLuVLbclpDY=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/553525/553525_v9_ba.jpg' width='250' height='400'>
                  
                  <img src = 'https://resizing.flixster.com/BdyhW-GBS_likotgyI-HGaMUXpA=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/259205/259205_v9_bc.jpg' width='250' height='400'>
    	     </div>")
        )
      
    } else if (input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "TV Comedies") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://www.gannett-cdn.com/-mm-/01b0d9658ad6053ad32662001af8fd89a4923222/c=0-236-2788-3953/local/-/media/2016/12/08/USATODAY/USATODAY/636167536833032560-GTY-628425620.jpg' width='250' height='400'>
                  
                  <img src = 'https://i.mydramalist.com/rvb5g_5f.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Stand-Up Comedy") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://cdn.britannica.com/s:300x1000/98/214998-004-63811061/American-actor-Kevin-Hart-2019.jpg' width='250' height='400'>
                  
                  <img src = 'https://www.biography.com/.image/t_share/MTE1ODA0OTcxOTM3ODU5MDg1/jeff-dunham-20682855-1-402.jpg' width='250' height='400'>
    	     </div>"))
      
    }  else if (input$cast_language == "both" & input$cast_type == "both" & input$cast_comparisons == "Thrillers") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMjUxMjE4MTQxMF5BMl5BanBnXkFtZTcwNzc2MDM1NA@@._V1_UY1200_CR125,0,630,1200_AL_.jpg' width='250' height='400'>
                  
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/c/ca/Nawazuddin_Siddiqui_-_IIFA_2017_Green_Carpet_%2836349709816%29_%28cropped%29.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "TV Action & Adventure") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://resizing.flixster.com/70lfLovSfQmbvQeitLuVLbclpDY=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/553525/553525_v9_ba.jpg' width='250' height='400'>
                  
                  <img src = 'https://resizing.flixster.com/BdyhW-GBS_likotgyI-HGaMUXpA=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/259205/259205_v9_bc.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Stand-Up Comedy") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://cdn.britannica.com/s:300x1000/98/214998-004-63811061/American-actor-Kevin-Hart-2019.jpg' width='250' height='400'>
                  
                  <img src = 'https://www.biography.com/.image/t_share/MTE1ODA0OTcxOTM3ODU5MDg1/jeff-dunham-20682855-1-402.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Music & Musicals") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://pyxis.nymag.com/v1/imgs/39b/d21/c07809551c58120588de51e1017568609f-maya-rudolph.rsquare.w1200.jpg' width='250' height='400'>
                  
                  <img src = 'https://pyxis.nymag.com/v1/imgs/538/887/4b3a8492d32cbd52e6bab564ac8f0896fb-06-quincy-jones-feature.rvertical.w570.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Romantic Movies") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://assets.teenvogue.com/photos/5b898ea5a375f111a9664219/master/pass/Netflix%20-NOAH_CENTINEO-115.jpg' width='250' height='400'>
                  
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/5/53/Gerard_Butler_%2829681162176%29.jpg' width='250' height='400'>
    	     </div>"))
      
    }  else if (input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "TV Horror") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://br.web.img3.acsta.net/pictures/19/06/07/18/18/1529620.jpg' width='250' height='400'>
                  
                  <img src = 'https://www.animenewsnetwork.com/images/encyc/P547-1239162282.1472339502.jpg' width='250' height='400'>
    	     </div>"))
      
    }  else if (input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Stand-Up Comedy") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://static.wixstatic.com/media/aba07f_3c205d5920064a9db2e5b739c5adaf55~mv2.jpg/v1/fill/w_560,h_838,al_c,q_85,usm_0.66_1.00_0.01/SOFIA-0556%20(1)%203.webp' width='250' height='400'>
                  
                  <img src = 'https://live.staticflickr.com/5576/31023818345_8c4d6c150a_b.jpg' width='250' height='400'>
    	     </div>"))
      
    }  else if (input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "Music & Musicals") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMTQ5OTU2NTA5Ml5BMl5BanBnXkFtZTgwNTQyMDU0OTE@._V1_.jpg' width='250' height='400'>
                  
                  <img src = 'https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.upp-prod-us.s3.amazonaws.com%2Fef6ec084-afbc-11e9-b3e2-4fdf846f48f5?fit=scale-down&source=next&width=700' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "TV Thrillers") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://alchetron.com/cdn/danica-curcic-98795933-1666-4045-8b62-030aaf7c8c8-resize-750.jpeg' width='250' height='400'>
                  
                  <img src = 'https://s4.anilist.co/file/anilistcdn/staff/large/n95024-qsZgGp8VHqMP.png' width='250' height='400'>
    	     </div>"))
      
    } else if ((input$cast_language == "English Speaking" | input$cast_language == "both") & input$cast_type == "headliner" & input$cast_comparisons == "Stand-Up Comedy & Talk Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://www.gannett-cdn.com/presto/2020/01/28/PPHX/80d2cd06-b0f1-4ea9-a711-4d817f479bd3-jeff_ross.jpg?crop=814,1086,x0,y68&quality=50&width=640' width='250' height='400'>
                  
                  <img src = 'https://s.abcnews.com/images/US/dave-chappelle-file-gty-jef-190507_hpEmbed_10x13_992.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if ((input$cast_language == "English Speaking" | input$cast_language == "both") & input$cast_type == "headliner" & input$cast_comparisons == "Stand-Up Comedy & Talk Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://www.gannett-cdn.com/presto/2020/01/28/PPHX/80d2cd06-b0f1-4ea9-a711-4d817f479bd3-jeff_ross.jpg?crop=814,1086,x0,y68&quality=50&width=640' width='250' height='400'>
                  
                  <img src = 'https://s.abcnews.com/images/US/dave-chappelle-file-gty-jef-190507_hpEmbed_10x13_992.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Comedies") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://i.mydramalist.com/rvb5g_5f.jpg' width='250' height='400'>
                  
                  <img src = 'https://www.gannett-cdn.com/-mm-/01b0d9658ad6053ad32662001af8fd89a4923222/c=0-236-2788-3953/local/-/media/2016/12/08/USATODAY/USATODAY/636167536833032560-GTY-628425620.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Sci-Fi & Fantasy") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://resizing.flixster.com/70lfLovSfQmbvQeitLuVLbclpDY=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/553525/553525_v9_ba.jpg' width='250' height='400'>
                  
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMzIwMjIwNjg0M15BMl5BanBnXkFtZTgwOTI3MDEzMDE@._V1_UY317_CR14,0,214,317_AL_.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "both" & input$cast_type == "supporting cast" & input$cast_comparisons == "Anime Features") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b1/27th_Tokyo_International_Film_Festival_Y%C5%ABki_Kaji.jpg/1200px-27th_Tokyo_International_Film_Festival_Y%C5%ABki_Kaji.jpg' width='250' height='400'>
                  
                  <img src = 'https://m.media-amazon.com/images/M/MV5BNTlkNzg3ZmEtNjhjMi00OTM1LWJmMTUtNzdjYTgyZWMxNzYzXkEyXkFqcGdeQXVyNDQxNjcxNQ@@._V1_UX214_CR0,0,214,317_AL_.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Faith & Spirituality") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://i.mydramalist.com/2BJ1W_5f.jpg' width='250' height='400'>
                  
                  <img src = 'https://images.moviefit.me/p/o/86420-dalton-vigh.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Crime TV Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b1/27th_Tokyo_International_Film_Festival_Y%C5%ABki_Kaji.jpg/1200px-27th_Tokyo_International_Film_Festival_Y%C5%ABki_Kaji.jpg' width='250' height='400'>
                  
                  <img src = 'https://static.wikia.nocookie.net/sense8/images/b/bd/ErikHayser.jpg/revision/latest/top-crop/width/360/height/450?cb=20181028060023' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Anime Features") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b1/27th_Tokyo_International_Film_Festival_Y%C5%ABki_Kaji.jpg/1200px-27th_Tokyo_International_Film_Festival_Y%C5%ABki_Kaji.jpg' width='250' height='400'>
                  
                  <img src = 'https://m.media-amazon.com/images/M/MV5BNTlkNzg3ZmEtNjhjMi00OTM1LWJmMTUtNzdjYTgyZWMxNzYzXkEyXkFqcGdeQXVyNDQxNjcxNQ@@._V1_UX214_CR0,0,214,317_AL_.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if ((input$cast_language == "Non-English Speaking" | input$cast_language == "both") & input$cast_type == "supporting cast" & input$cast_comparisons == "Teen TV Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://static.jojowiki.com/images/a/a0/latest/20200520063017/TakahiroSakurai_Infobox.png' width='250' height='400'>
                  
                  <img src = 'https://cdn.myanimelist.net/images/voiceactors/3/60503.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Independent Movies") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://img.theweek.in/content/dam/week/magazine/theweek/leisure/images/2019/9/20/121-Tannishtha-Chatterjee.jpg' width='250' height='400'>
                  
                  <img src = 'https://i.pinimg.com/originals/33/88/ab/3388ab227a1d3cab3c4840d62d4bcf04.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Stand-Up Comedy & Talk Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://img.buzzfeed.com/buzzfeed-static/static/2017-07/10/5/asset/buzzfeed-prod-fastlane-01/sub-buzz-25211-1499679318-3.jpg?downsize=700%3A%2A&output-quality=auto&output-format=auto' width='250' height='400'>
                  
                  <img src = 'https://i.mydramalist.com/GQkO2f.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Horror TV Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://br.web.img3.acsta.net/pictures/19/06/07/18/18/1529620.jpg' width='250' height='400'>
                  
                  <img src = 'https://www.animenewsnetwork.com/images/encyc/P547-1239162282.1472339502.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "LGBTQ Movies") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://hips.hearstapps.com/digitalspyuk.cdnds.net/18/29/1531924362-screen-shot-2018-07-18-at-152725.jpg?resize=480:*' width='250' height='400'>
                  
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMTg1MTkxODgzMF5BMl5BanBnXkFtZTgwMjExMjgyNzM@._V1_.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Horror Movies") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://assets.telegraphindia.com/telegraph/2eaa75d3-031e-474a-9706-77d6e18e96d7.jpg' width='250' height='400'>
                  
                  <img src = 'https://www.celebsfacts.com/wp-content/uploads/2017/05/Luna-Maya.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & input$cast_comparisons == "Independent Movies") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/0/06/Shabana_Azmi_SFU_honorary_degree_%28cropped%29.jpg' width='250' height='400'>
                  
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/c/ca/Nawazuddin_Siddiqui_-_IIFA_2017_Green_Carpet_%2836349709816%29_%28cropped%29.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if ((input$cast_language == "Non-English Speaking" | input$cast_language == "both")& input$cast_type == "headliner" & input$cast_comparisons == "Korean TV Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://i.mydramalist.com/vywkBf.jpg' width='250' height='400'>
                  
                  <img src = 'https://www.hellokpop.com/wp-content/uploads/2020/12/lee-seung-gi-the-project.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if ((input$cast_language == "Non-English Speaking" | input$cast_language == "both") & input$cast_type == "headliner" & input$cast_comparisons == "Romantic TV Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'http://t0.gstatic.com/licensed-image?q=tbn:ANd9GcRWzogTRMa9xkQWYxqvT1ADz9g1rahXQ9K4MeXuNDN-0G_4PHCqgSkdS73XsBzo' width='250' height='400'>
                  
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/20130713_%E7%82%8E%E4%BA%9E%E7%B6%B8_%E9%A6%99%E6%B8%AF%E7%9D%A1%E4%B8%8D%E8%91%97%E9%9F%B3%E6%A8%82%E6%9C%83.jpg/1200px-20130713_%E7%82%8E%E4%BA%9E%E7%B6%B8_%E9%A6%99%E6%B8%AF%E7%9D%A1%E4%B8%8D%E8%91%97%E9%9F%B3%E6%A8%82%E6%9C%83.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "both" & input$cast_type == "headliner" & input$cast_comparisons == "Thrilers") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/f/f3/Nicolas_Cage_-_66%C3%A8me_Festival_de_Venise_%28Mostra%29.jpg' width='250' height='400'>
                  
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMTY0MDY2MDMwOV5BMl5BanBnXkFtZTgwNDE4MDM0OTE@._V1_.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Dramas") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://resizing.flixster.com/BdyhW-GBS_likotgyI-HGaMUXpA=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/259205/259205_v9_bc.jpg' width='250' height='400'>
                  
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMjEyODM1NjI0OF5BMl5BanBnXkFtZTcwMTE0OTA1Mg@@._V1_UY317_CR4,0,214,317_AL_.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if ((input$cast_language == "English Speaking" | input$cast_language == "both") & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Thrillers") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://bingeddata.s3.amazonaws.com/uploads/2020/12/daniella-pineda.jpg' width='250' height='400'>
                  
                  <img src = 'https://resizing.flixster.com/zpUBqPMGVeg58ToHAlQD-x8F3XE=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/172125/172125_v9_ba.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "International TV Shows") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMjMxMjU2NzA4N15BMl5BanBnXkFtZTcwODYwMDYwOA@@._V1_.jpg' width='250' height='400'>
                  
                  <img src = 'https://resizing.flixster.com/hU-TST1o5uiDHL0oBf8nv20mOR0=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/25694/25694_v9_bb.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "TV Sci-Fi & Fantasy") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://resizing.flixster.com/70lfLovSfQmbvQeitLuVLbclpDY=/506x652/v2/https://flxt.tmsimg.com/v9/AllPhotos/553525/553525_v9_ba.jpg' width='250' height='400'>
                  
                  <img src = 'https://m.media-amazon.com/images/M/MV5BMzIwMjIwNjg0M15BMl5BanBnXkFtZTgwOTI3MDEzMDE@._V1_UY317_CR14,0,214,317_AL_.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Sci-Fi & Fantasy") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://static.tvtropes.org/pmwiki/pub/images/laurence_fishburne.jpg' width='250' height='400'>
                  
                  <img src = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQZyGa7Zsf4euxWwXlL3dRU_qMJejsFBp3Q9g&usqp=CAU' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & input$cast_comparisons == "Faith & Spirituality") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Corbin_Bernsen_%2825219505510%29.jpg/1200px-Corbin_Bernsen_%2825219505510%29.jpg' width='250' height='400'>
                  
                  <img src = 'https://miro.medium.com/max/240/0*4e61xvRFBPmd1X64.jpg' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "both" & input$cast_comparisons == "TV Thrillers") {
      
      tags$div(
        HTML("<div class = 'row'>
                  <img src = 'https://alchetron.com/cdn/danica-curcic-98795933-1666-4045-8b62-030aaf7c8c8-resize-750.jpeg' width='250' height='400'>
                  
                  <img src = 'https://s4.anilist.co/file/anilistcdn/staff/large/n95024-qsZgGp8VHqMP.png' width='250' height='400'>
    	     </div>"))
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "headliner" & ( input$cast_comparisons == "TV Action & Adventure" | 
                                                                                              input$cast_comparisons == "TV Dramas" |
                                                                                              input$cast_comparisons == "Music & Musicals" |
                                                                                              input$cast_comparisons == "Cult Movies" |
                                                                                              input$cast_comparisons == "Reality TV" |
                                                                                              input$cast_comparisons == "Romantic Movies" |
                                                                                              input$cast_comparisons == "Crime TV Shows" |
                                                                                              input$cast_comparisons == "Faith & Spirituality")) {
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if(input$cast_language == "Non-English Speaking" & input$cast_type == "headliner" & (input$cast_comparisons == "Stand-Up Comedy" | 
                                                                                                input$cast_comparisons == "Spanish-Language TV Shows" | 
                                                                                                input$cast_comparisons == "Kids' TV" | 
                                                                                                input$cast_comparisons == "International TV Shows" | 
                                                                                                input$cast_comparisons == "Crime TV Shows" | 
                                                                                                input$cast_comparisons == "Documentaries" | 
                                                                                                input$cast_comparisons == "Anime Series")) {
      
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if (input$cast_language == "both" & input$cast_type == "headliner" & (input$cast_comparisons == "TV Action & Adventure" | 
                                                                                 input$cast_comparisons == "LGBTQ Movies" | 
                                                                                 input$cast_comparisons == "Cult Movies")) {
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "supporting cast" & (input$cast_comparisons == "TV Horror" | 
                                                                                                    input$cast_comparisons == "Horror Movies" | 
                                                                                                    input$cast_comparisons == "Stand-Up Comedy" | 
                                                                                                    input$cast_comparisons == "LGBTQ Movies" | 
                                                                                                    input$cast_comparisons == "Independent Movies" | 
                                                                                                    input$cast_comparisons == "Classic & Cult TV" |
                                                                                                    input$cast_comparisons == "Cult Movies" |
                                                                                                    input$cast_comparisons == "British TV Shows" |
                                                                                                    input$cast_comparisons == "Spanish-Language TV Shows" |
                                                                                                    input$cast_comparisons == "Reality TV" |
                                                                                                    input$cast_comparisons == "Romantic TV Shows" |
                                                                                                    input$cast_comparisons == "Crime TV Shows" |
                                                                                                    input$cast_comparisons == "TV Mysteries" |
                                                                                                    input$cast_comparisons == "Documentaries" |
                                                                                                    input$cast_comparisons == "Docuseries")) {
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast" & (input$cast_comparisons == "TV Action & Adventure" | 
                                                                                                       input$cast_comparisons == "Horror Movies" | 
                                                                                                       input$cast_comparisons == "Sports Movies" | 
                                                                                                       input$cast_comparisons == "Cult Movies" | 
                                                                                                       input$cast_comparisons == "Classic Movies" | 
                                                                                                       input$cast_comparisons == "Korean TV Shows" | 
                                                                                                       input$cast_comparisons == "Spanish-Language TV Shows" | 
                                                                                                       input$cast_comparisons == "Thrillers" |
                                                                                                       input$cast_comparisons == "Reality TV" |  
                                                                                                       input$cast_comparisons == "Sci-Fi & Fantasy" | 
                                                                                                       input$cast_comparisons == "TV Mysteries")) {
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if (input$cast_language == "both" & input$cast_type == "supporting cast" & (input$cast_comparisons == "TV Horror" |
                                                                                       input$cast_comparisons == "Horror Movies" | 
                                                                                       input$cast_comparisons == "Stand-Up Comedy" | 
                                                                                       input$cast_comparisons == "LGBTQ Movies" | 
                                                                                       input$cast_comparisons == "Independent Movies" | 
                                                                                       input$cast_comparisons == "Classic & Cult TV" | 
                                                                                       input$cast_comparisons == "Cult Movies" | 
                                                                                       input$cast_comparisons == "Korean TV Shows" | 
                                                                                       input$cast_comparisons == "British TV Shows" | 
                                                                                       input$cast_comparisons == "Spanish-Language TV Shows" | 
                                                                                       input$cast_comparisons == "TV Thrillers" | 
                                                                                       input$cast_comparisons == "Thrillers" | 
                                                                                       input$cast_comparisons == "Reality TV" | 
                                                                                       input$cast_comparisons == "Sci-Fi & Fantasy" | 
                                                                                       input$cast_comparisons == "Crime TV Shows" | 
                                                                                       input$cast_comparisons == "TV Mysteries" | 
                                                                                       input$cast_comparisons == "Docuseries" | 
                                                                                       input$cast_comparisons == "Faith & Spirituality")) {
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "both" & (input$cast_comparisons == "Action & Adventure" | 
                                                                                        input$cast_comparisons == "TV Horror" | 
                                                                                        input$cast_comparisons == "LGBTQ Movies" | 
                                                                                        input$cast_comparisons == "Classic & Cult TV" | 
                                                                                        input$cast_comparisons == "Cult Movies" | 
                                                                                        input$cast_comparisons == "Spanish-Language TV Shows" | 
                                                                                        input$cast_comparisons == "Reality TV" | 
                                                                                        input$cast_comparisons == "International TV Shows" | 
                                                                                        input$cast_comparisons == "TV Sci-Fi & Fantasy" | 
                                                                                        input$cast_comparisons == "Sci-Fi & Fantasy" | 
                                                                                        input$cast_comparisons == "Romantic TV Shows" | 
                                                                                        input$cast_comparisons == "TV Mysteries" | 
                                                                                        input$cast_comparisons == "Faith & Spirituality")) {
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "both" & (input$cast_comparisons == "Faith & Spirituality" | 
                                                                                            input$cast_comparisons == "TV Mysteries" |
                                                                                            input$cast_comparisons == "Crime TV Shows" |
                                                                                            input$cast_comparisons == "Reality TV" |
                                                                                            input$cast_comparisons == "Teen TV Shows" |
                                                                                            input$cast_comparisons == "Spanish-Language TV Shows" |
                                                                                            input$cast_comparisons == "Korean TV Shows" |
                                                                                            input$cast_comparisons == "Classic Movies" |
                                                                                            input$cast_comparisons == "Cult Movies" |
                                                                                            input$cast_comparisons == "Sports Movies" |
                                                                                            input$cast_comparisons == "Stand-Up Comedy & Talk Shows" |
                                                                                            input$cast_comparisons == "Horror Movies" |
                                                                                            input$cast_comparisons == "TV Action & Adventure")) {
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if (input$cast_language == "both" & input$cast_type == "both" & (input$cast_comparisons == "TV Horror" | 
                                                                            input$cast_comparisons == "Music & Musicals" | 
                                                                            input$cast_comparisons == "LGBTQ Movies" | 
                                                                            input$cast_comparisons == "Classic & Cult TV" | 
                                                                            input$cast_comparisons == "Cult Movies" | 
                                                                            input$cast_comparisons == "Korean TV Shows" | 
                                                                            input$cast_comparisons == "Spanish-Language TV Shows" | 
                                                                            input$cast_comparisons == "Teen TV Show" | 
                                                                            input$cast_comparisons == "TV Thrillers" | 
                                                                            input$cast_comparisons == "Reality TV" | 
                                                                            input$cast_comparisons == "TV Sci-Fi & Fantasy" | 
                                                                            input$cast_comparisons == "Sci-Fi & Fantasy" | 
                                                                            input$cast_comparisons == "Crime TV Shows" | 
                                                                            input$cast_comparisons == "TV Mysteries" | 
                                                                            input$cast_comparisons == "Faith & Spirituality")) {
      
      tags$img(src = url_tie , width = '800', height = '400')
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "headliner") {
      
      tags$img(src = english_headliner_img, width = "275", height = '400')
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "headliner") {
      
      tags$img(src = non_english_headliner_img, width = "275", height = '400')
      
    } else if (input$cast_language == "both" & input$cast_type == "headliner") {
      
      tags$img(src = overall_headliner_img, width = "275", height = '400')
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "supporting cast") {
      
      tags$img(src = english_supporting_img, width = "275", height = '400')
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "supporting cast") {
      
      tags$img(src = non_english_supporting_img, width = "275", height = '400')
      
    } else if (input$cast_language == "both" & input$cast_type == "supporting cast") {
      
      tags$img(src = overall_supporting_img, width = "275", height = '400')
      
    } else if (input$cast_language == "English Speaking" & input$cast_type == "both") {
      
      tags$img(src = english_overall_img, width = "275", height = '400')
      
    } else if (input$cast_language == "Non-English Speaking" & input$cast_type == "both") {
      
      tags$img(src = non_english_overall_img, width = "275", height = '400')
      
    } else if (input$cast_language == "both" & input$cast_type == "both") {
      
      tags$img(src = overall_overall_img, width = "275", height = '400')
      
    }
    
  })


output$language_output = renderPlot({
    netflix_country_split %>% 
      mutate(
          english_or_not = 
          ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking",
          ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
          ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
      ) %>% 
      filter(country_type == "main country") %>% 
      group_by(english_or_not) %>% 
      summarise(count = n()) %>% 
      arrange(desc(count)) %>% 
      ggplot(
        aes(x = "", y = count, fill = english_or_not)
         ) + 
      geom_bar(stat = 'identity', color = 'black') + 
      scale_fill_manual(values = c("English Speaking" = "firebrick2", "Non-English Speaking" = 'slateblue3')) +
      labs(x = "", y = "", title = "Breakdown of 
           English-Speaking and Non-English 
           Speaking Content on Netflix") +
      geom_text(
        aes(label = paste0(round((count/sum(count))*100, 2), "%")), position = position_stack(vjust = 0.5), color = "white", fontface = "bold", size = 15
        ) + 
      theme_classic() +
      coord_polar(theta = "y", start = 0) +
      theme(
        axis.line = element_blank(),
        axis.text = element_blank(), 
        axis.ticks = element_blank(), 
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        plot.title = element_text(size = 20, hjust = 0.5))
  })
      
  output$genre_output = renderPlot({
    netflix_genre_split %>% 
      group_by(genre) %>% 
      summarise(count = n()) %>% 
      arrange(desc(count)) %>% 
      ggplot(
        aes(x = reorder(genre, count), y = count, fill = genre)
         ) + 
      geom_bar(stat = 'identity', color = 'black') + 
      labs(x = "Genres", y = "Number of Content on Netflix", title = "Breakdown of Netflix Content by Genre") +
      theme_classic() +
      coord_flip() +
      guides(fill = F) +
      theme(
         axis.line = element_line(color = 'black'),
         axis.text = element_text(color = 'black'), 
         axis.text.y = element_text(size = 12),
         axis.text.x = element_text(size = 20, angle = 90),
         plot.title = element_text(size = 30, hjust = 0.5),
         axis.title.x = element_text(size = 20),
         axis.title.y = element_text(size = 20))
  })
  
  output$rating_output = renderPlot({
    netflix %>% 
      group_by(rating) %>% 
      summarise(count = n()) %>% 
      arrange(desc(count)) %>% 
      ggplot(
        aes(x = reorder(rating, count), y = count, fill = rating)
         ) + 
      geom_bar(stat = 'identity', color = 'black') + 
      labs(x = "Content Rating", y = "Number of Content on Netflix", title = "Breakdown of Netflix Content by Content Rating") +
      theme_classic() +
      coord_flip() +
      guides(fill = F) +
      theme(
         axis.line = element_line(color = 'black'),
         axis.text = element_text(color = 'black'), 
         axis.text.y = element_text(size = 20),
         axis.text.x = element_text(size = 15, angle = 90),
         plot.title = element_text(size = 30, hjust = 0.5),
         axis.title.x = element_text(size = 20),
         axis.title.y = element_text(size = 20))
  })


# Do the word cloud section 
  
  output$variable_selection = renderUI({
    
    if (input$dataset == "genre") {
      selectInput(
        inputId = "description_genre",
        label = "What sort of genre are you interested in looking  at?",
        choices = c(
            "TV Action & Adventure" = "TV Action & Adventure",
						"Action & Adventure Movies" = "Action & Adventure",
						"TV Comedy" = "TV Comedies",
						"Comedy Movies" = "Comedies",
						"TV Horror" = "TV Horror",
						"Horror Movies" = "Horror Movies",
						"TV Drama" = "TV Dramas",
						"Drama Movies" = "Dramas",
						"Music & Musicals" = "Music & Musicals",
						"Sports Movies" = "Sports Movies",
						"Science & Nature TV" = "Science & Nature TV",
						"Reality TV" = "Reality TV",
						"Independent Movies" = "Independent Movies",
						"Documentary" = "Documentaries",
						"Docuseries" = "Docuseries",
						"Anime Features" = "Anime Features",
						"Anime Series" = "Anime Series",
						"International Movies" = "International Movies",
						"International TV Shows" = "International TV Shows",
						"Korean TV Shows" = "Korean TV Shows",
						"British TV Shows" = "British TV Shows",
						"Spanish TV Shows" = "Spanish-Language TV Shows",
						"Thrillers" = "Thrillers",
						"TV Thrillers" = "TV Thrillers",
						"Stand-Up Specials" = "Stand-Up Comedy",
						"Skit Shows & Talk Shows" = "Stand-Up Comedy & Talk Shows",
						"LGBTQ Movies" = "LGBTQ Movies",
						"Crime TV Shows" = "Crime TV Shows",
						"TV Mysteries" = "TV Mysteries",
						"Children & Family Movies" = "Children & Family Movies",
						"Kids' TV Shows" = "Kids' TV",
						"Teen TV Shows" = "Teen TV Shows",
						"Classic Movies" = "Classic Movies",
						"Cult Movies" = "Cult Movies",
						"Classic & Cult TV Shows" = "Classic & Cult TV",
						"Faith & Spirituality" = "Faith & Spirituality"
        )
                  )
    } else if (input$dataset == "rating") {
      selectInput(
        inputId = "description_rating",
        label = "What particular content rating are you interested in looking at?",
        choices = c("TV-MA" = "TV-MA", 
					    "TV-14" = "TV-14", 
					    "TV-PG" = "TV-PG", 
					    "R" = "R", 
					    "PG-13" = "PG-13", 
					    "TY-Y" = "TY-Y", 
					    "TV-Y7" = "TV-Y7", 
					    "TV-Y7-FV" = "TV-Y7-FV", 
					    "PG" = "PG", 
					    "TV-G" = "TV-G", 
					    "NR" = "NR", 
					    "G" = "G", 
					    "NC-17" = "NC-17")
        )
    } else if (input$dataset == "language") {
      
      selectInput(
				inputId = "description_language",
				label = "What sort of language are you interested in?",
				choices = c("English" = "English Speaking", 
					    "Non-English" = "Non-English Speaking")
      )
      
    }
    
  })

	
  genre_of_interest = reactive({
		switch(input$description_genre, 
		as.character(input$description_genre)
		)	
	})

  language_of_interest = reactive({
		switch(input$description_language, 
		as.character(input$description_language)
		)	
	})

   rating_of_interest = reactive({
		switch(input$description_rating, 
		as.character(input$description_rating)
		)	
	})


output$wordcloud = renderWordcloud2({
    
    select_dataset = 
			ifelse(input$dataset == "genre", netflix_descriptionxgenre,
			ifelse(input$dataset == "language", netflix_descriptionxlanguage, netflix_description))
    
    if (input$dataset == "genre") {
      
      genre_dataset = netflix_descriptionxgenre %>% 
        filter(genre == genre_of_interest()) %>% 
			  group_by(keywords) %>% 
			  summarise(count = n()) %>% 
			  arrange(desc(count)) %>% 
			  top_n(input$number_of_words)
      
      wordcloud2(
        data = genre_dataset,
        size = 0.8, 
        backgroundColor = "lightcyan",
        minRotation = 0
      )
      
    } else if (input$dataset == "rating") {
      
      rating_dataset = netflix_description %>% 
        filter(rating == rating_of_interest()) %>% 
			  group_by(keywords) %>% 
			  summarise(count = n()) %>% 
			  arrange(desc(count)) %>% 
			  top_n(input$number_of_words)
      
      wordcloud2(
        data = rating_dataset,
        size = 0.8,
        backgroundColor = "lightcyan",
        minRotation = 0
      )
      
    } else if (input$dataset == "language") {
      
      language_dataset = netflix_descriptionxlanguage %>% 
        filter(english_or_not == language_of_interest()) %>% 
			  group_by(keywords) %>% 
			  summarise(count = n()) %>% 
			  arrange(desc(count)) %>% 
			  top_n(input$number_of_words)
      
      wordcloud2(
        data = language_dataset,
        size = 0.8,
        backgroundColor = "lightcyan",
        minRotation = 0
      )
      
    }
    
    
  })
  
  output$entry_1_check = renderText({
    
    if (input$entry_1 %in% netflix_for_recommend$title) {
      as.character("Yes this title can be used")
    } else {
      as.character("Something went wrong here.  Either there was a mistake in the entry (spelling or case-issue) or this isn't available in what I used in my current Netflix data set.")
    }
    
  })
   
  output$entry_2_check = renderText({
    
    if (input$entry_2 %in% netflix_for_recommend$title) {
      as.character("Yes this title can be used")
    } else {
      as.character("Something went wrong here.  Either there was a mistake in the entry (spelling or case-issue) or this isn't available in what I used in my current Netflix data set.")
    }
    
  })
  
  output$entry_3_check = renderText({
    
    if (input$entry_3 %in% netflix_for_recommend$title) {
      as.character("Yes this title can be used")
    } else {
      as.character("Something went wrong here.  Either there was a mistake in the entry (spelling or case-issue) or this isn't available in what I used in my current Netflix data set.")
    }
    
  })

  subset_dataset = reactive({
    netflix_for_recommend %>% 
      filter(title == input$entry_1 | title == input$entry_2 | title == input$entry_3) %>% 
      mutate(ranking = ifelse(title == input$entry_1, 1.015, ifelse(title == input$entry_2, 1.010, 1.005)))
  })

recommending = reactive({
    
    number_of_picks = as.numeric(input$n_recommend)
    placeholder_selection_data= subset_dataset()
    column_1 = netflix_for_recommend$show_id[netflix_for_recommend$title == as.character(input$entry_1)]
    column_2 = netflix_for_recommend$show_id[netflix_for_recommend$title == as.character(input$entry_2)]
    column_3 = netflix_for_recommend$show_id[netflix_for_recommend$title == as.character(input$entry_3)]
    
    selected_indices = which(colnames(dissimilarity) %in% placeholder_selection_data$show_id)
    getting_dataframe = data.frame(dissimilarity[, selected_indices], recommended_netflix_content = row.names(dissimilarity))
    
    recommendation_data = getting_dataframe %>% 
      pivot_longer(
        cols = c(column_1, column_2, column_3), 
        values_to = "dissimilarity", 
        names_to = "watched_content"
      ) %>% 
      left_join(placeholder_selection_data, by =  c("watched_content" = "show_id")) %>% 
      filter(recommended_netflix_content != watched_content) %>%
      mutate(
        similarity = 1-dissimilarity, 
        weighted_similarity = similarity*ranking
        ) %>% 
      group_by(recommended_netflix_content) %>% 
      arrange(desc(weighted_similarity)) %>% 
      slice(1) %>% 
      arrange(desc(weighted_similarity))
    
    top_recommendations = head(recommendation_data, number_of_picks)
    
    top_recommendations = top_recommendations %>% 
      left_join(netflix_for_recommend, by = c("recommended_netflix_content" = "show_id"))
    
    top_recommendations = top_recommendations %>% 
            left_join(netflix_for_recommend, by = c("recommended_netflix_content" = "show_id")) %>% 
            select(recommended_netflix_content, title.y, title.x, weighted_similarity, dissimilarity, english_or_not.x, english_or_not.y, cast.x, cast.y, type.x, type.y, genre.x, genre.y, rating.x, rating.y, director_name.x, director_name.y, description.y) 
    
    selection = top_recommendations %>% select(title.y, recommended_netflix_content, weighted_similarity, description.y)
    colnames(selection) = c("Suggested Titles", "Show Id", "Weighted Similarity Score", "Description")
    selection 
  })
  
  output$Recommendations = renderTable({recommending()})

}  



shinyApp(ui = ui, server = server)
