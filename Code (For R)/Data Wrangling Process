# This whole part is all about the reading and pre-processing the data for analysis. 

# STEP 1: setting up working directory + loading the necessary libraries for analysis

setwd("~/MyDatasets") # I kept the data set locally, but you can use whatever. 

library(ggplot2) # Used for plotting 
library(skimr) # Need it for the quick glance of data 
library(tidyverse) # Used for a lot of things and essentially making this whole process easier with useful function
library(tidytext) # You'll realize that we'll need to handle text data which gets SUPER MESSY 
library(shiny) # Yep, we're making dynamic elements
library(wordcloud) # We'll be making some word clouds at some point
library(wordcloud2) # We'll be making some word clouds at some point
library(cluster) # We'll need this in part 3 for making our recommender system 


# STEP 2: Reading the data set and having a quick glance at it. 

# You can find this data set here (https://www.kaggle.com/shivamb/netflix-shows)

netflix = read.csv("netflix_title.csv") 
skim_without_charts(netflix) 

# Turns out I need to do some major cleaning like 
# 1) dealing with the blanks, 
# 2) handle missing entries, 
# 3) figure out a solution for the long string of text that represent multiple entries, 
# 4) punctuation and typographical symbols 
# 5) restructuring of the data


# STEP 3.1: The pre-processing - Handling the blank entries 

# These blank entries are entirely annoying since it's being read as something there when in fact it shouldn't, so just fill this with a placeholder to denote missing entry

netflix = netflix %>% mutate_all(na_if, "")


# STEP 3.2: The pre-processing - Missing Entries

# Obviously I want to keep as much of the entries as possible as removing entries with missing values will severely hamper my end goal of having a recommender system. 
# So, I decided on filling much of this out via Google Search + Big Brain moves

# For content ratings, there were just a few that needs to be entered.  It's like 11.  Since this will be an important consideration for our analysis, let's fill them out. 

netflix = netflix %>% 
  mutate(
    rating = ifelse(c(is.na(rating) & title == "13TH: A Conversation with Oprah Winfrey & Ava DuVernay"), "TV-PG",
             ifelse(c(is.na(rating) & title == "My Honor Was Loyalty"), 'PG-13',
             ifelse(c(is.na(rating) & title == "Gargantia on the Verdurous Planet"), "TV-14",
             ifelse(c(is.na(rating) & title == "Little Lunch"), "TV-Y7",
             ifelse(c(is.na(rating) & title == "Louis C.K.: Live at the Comedy Store"), "TV-MA",
             ifelse(c(is.na(rating) & title == "Louis C.K.: Hilarious"), "TV-MA",
             ifelse(c(is.na(rating) & title == "Louis C.K. 2017"), "TV-MA", rating)))))))
  )
  
  
# The next part is dealing with the dates.  You'll come to realize that it's written in different formats for some reason.  
# Since the majority is written in the dd-MMM-yy format (i.e., 04-Aug-17), just make sure everything will be in this format. 
# There are like 70~ish of these dates, so I just splitted them up into 3 parts with the manual conversion

netflix = netflix %>% 
  mutate(date_added = 
    ifelse(date_added == " August 4, 2017", "04-Aug-17",
    ifelse(date_added == " December 23, 2018", "23-Dec-18",
    ifelse(date_added == " December 15, 2018", "15-Dec-18",
    ifelse(date_added == " July 1, 2017", "01-Jul-17",
    ifelse(date_added == " July 26, 2019", "26-Jul-19",
    ifelse(date_added == " May 26, 2016", "26-May-16",
    ifelse(date_added == " November 1, 2019", "01-Nov-19",
    ifelse(date_added == " December 2, 2017", "2-Dec-17",
    ifelse(date_added == " March 15, 2019", "15-Mar-19",
    ifelse(date_added == " October 1, 2019", "01-Oct-19",
    ifelse(date_added == " December 15, 2017", "15-Dec-17",
    ifelse(date_added == " July 1, 2017", "01-Jul-17",
    ifelse(date_added == " August 4, 2017", "04-Aug-17",
    ifelse(date_added == " April 4, 2017", "04-Apr-17",
    ifelse(date_added == " December 28, 2016", "28-Dec-16",
    ifelse(date_added == " March 31, 2018", "31-Mar-18",
    ifelse(date_added == " February 1, 2019", "01-Feb-19",
    ifelse(date_added == " January 1, 2018", "01-Jan-18",
    ifelse(date_added == " July 1, 2017", "01-Jul-17",
    ifelse(date_added == " February 24, 2018", "24-Feb-18",
    ifelse(date_added == " March 31, 2018", "31-Mar-18",
    ifelse(date_added == " July 20, 2018", "20-Jul-18",
    ifelse(date_added == " January 17, 2018", "17-Jan-18",
    ifelse(date_added == " September 7, 2016", "07-Sep-18", date_added))))))))))))))))))))))))
)

netflix = netflix %>% 
  mutate(date_added = 
    ifelse(date_added == " December 14, 2018", "14-Dec-18",
    ifelse(date_added == " October 31, 2018", "31-Oct-18",
    ifelse(date_added == " August 21, 2017", "21-Aug-17",
    ifelse(date_added == " October 8, 2013", "08-Oct-13",
    ifelse(date_added == " November 1, 2017", "01-Nov-17",
    ifelse(date_added == " December 1, 2018", "01-Dec-18",
           
    ifelse(date_added == " March 16, 2016", "16-Mar-16",
    ifelse(date_added == " December 15, 2015", "15-Dec-15",
    ifelse(date_added == " September 8, 2015", "08-Sep-15",
    ifelse(date_added == " May 28, 2016", "28-May-16",
    ifelse(date_added == " December 3, 2019", "03-Dec-19",
    ifelse(date_added == " November 1, 2016", "01-Nov-16",
           
    ifelse(date_added == " November 3, 2015", "03-Nov-15",
    ifelse(date_added == " December 1, 2019", "01-Dec-19",
    ifelse(date_added == " May 1, 2018", "01-May-18",
    ifelse(date_added == " April 17, 2016", "17-Apr-16",
    ifelse(date_added == " March 22, 2015", "22-Mar-15",
    ifelse(date_added == " September 16, 2018", "16-Sep-18",
           
    ifelse(date_added == " April 16, 2019", "16-Apr-19",
    ifelse(date_added == " June 1, 2017", "01-Jun-17",
    ifelse(date_added == " September 1, 2019", "01-Sep-19",
    ifelse(date_added == " March 1, 2017", "01-Mar-17",
    ifelse(date_added == " July 12, 2019", "12-Jul-19",
    ifelse(date_added == " December 31, 2015", "31-Dec-15", date_added))))))))))))))))))))))))
)


netflix = netflix %>% 
  mutate(date_added = 
    ifelse(date_added == " May 31, 2015", "15-May-15",
    ifelse(date_added == " January 13, 2016", "13-Jan-16",
    ifelse(date_added == " December 18, 2014", "18-Dec-14",
    ifelse(date_added == " September 22, 2016", "22-Sep-16",
    ifelse(date_added == " May 18, 2017", "18-May-17",
    ifelse(date_added == " January 1, 2020", "01-Jan-20",
           
    ifelse(date_added == " May 19, 2018", "19-May-18",
    ifelse(date_added == " January 11, 2019", "11-Jan-19",
    ifelse(date_added == " February 1, 2015", "01-Feb-15",
    ifelse(date_added == " August 13, 2018", "13-Aug-18",
    ifelse(date_added == " January 12, 2019", "12-Jan-19",
    ifelse(date_added == " April 20, 2017", "20-Apr-17",
           
    ifelse(date_added == " June 30, 2015", "30-Jun-15",
    ifelse(date_added == " October 5, 2017", "05-Oct-17",
    ifelse(date_added == " February 1, 2017", "01-Feb-17",
    ifelse(date_added == " March 20, 2018", "20-Mar-18",
    ifelse(date_added == " April 15, 2018", "15-Apr-18",
    ifelse(date_added == " January 28, 2018", "28-Jan-18",
           
    ifelse(date_added == " January 1, 2016", "01-Jan-16",
    ifelse(date_added == " June 1, 2018", "01-Jun-18",
    ifelse(date_added == " January 8, 2018", "08-Jan-18",
    ifelse(date_added == " December 25, 2015", "25-Dec-15",
    ifelse(date_added == " August 1, 2017", "01-Aug-17",
    ifelse(date_added == " March 31, 2017", "31-Mar-17", date_added)))))))))))))))))))))))))
    

# There are a lot of missing entries for countries.  Like nearly 1000.  I'm not going to Google this, but instead will use clues in the description, genres, cast and directors
# to fill this out. 

# Big brain solution 1: Use the listed_in section to help with identify key words that can be related to country of origin.  

netflix = netflix %>% 
  mutate(
    country = ifelse(c(is.na(country) & (str_detect(listed_in, "[Kk]orea") == TRUE)), "South Korea", 
              ifelse(c(is.na(country) & (str_detect(listed_in, "[Bb]ritish") == TRUE)), "United Kingdom",  country))      
  )


# Big brain solution 2: use the key words in titles relating to noted franchise to help with figuring out country of origin 

netflix = netflix %>% 
  mutate(
    country = 
      ifelse(c(is.na(country) & str_detect(title, "[Hh]indi") == T), "India", 
      ifelse(c(is.na(country) & str_detect(title, "[Tt]amil") == T), "India", 
      ifelse(c(is.na(country) & str_detect(title, "Power Rangers Super Megaforce") == T), "United States",   
      ifelse(c(is.na(country) & str_detect(title, "Power Rangers Super Samurai") == T), "United States",   
      ifelse(c(is.na(country) & str_detect(title, "Trailer Park Boys: Out of the Park: USA") == T), "United States",   
      ifelse(c(is.na(country) & str_detect(title, "The Naked Gun 2 1/2: The Smell of Fear") == T), "United States",   
      ifelse(c(is.na(country) & str_detect(title, "Power Rangers ") == T), "United States",   
      ifelse(c(is.na(country) & str_detect(title, "Monty Python") == T), "United Kingdom",   
      ifelse(c(is.na(country) & str_detect(title, "Calico Critters") == T), "United States",   
      ifelse(c(is.na(country) & str_detect(title, "ChuChuTV") == T), "India",   
      ifelse(c(is.na(country) & str_detect(title, "ChuChu TV") == T), "India",   
      ifelse(c(is.na(country) & str_detect(title, "France") == T), "France",   
      ifelse(c(is.na(country) & str_detect(title, "The Birth Reborn") == T), "Brazil", country)))))))))))))   
  )


# Big brain solution 3: use some key words in the name of the cast to help with figuring out country of origin

netflix = netflix %>% 
  mutate(
    country = 
      ifelse(c(is.na(country) & str_detect(cast, "[Aa]oi") == T), "Japan", 
      ifelse(c(is.na(country) & str_detect(cast, "[Pp]atta.") == T), "Thailand", 
      ifelse(c(is.na(country) & str_detect(cast, "Jackson") == T), "United States", 
      ifelse(c(is.na(country) & str_detect(cast, "[Pp]rabh") == T), "India", 
      ifelse(c(is.na(country) & str_detect(cast, "[Yy]ama") == T), "Japan", 
      ifelse(c(is.na(country) & str_detect(cast, "Elyse Maloway") == T), "United States", 
      ifelse(c(is.na(country) & str_detect(cast, "Michela Luci") == T), "Canada", 
      ifelse(c(is.na(country) & str_detect(cast, "Singh") == T), "India", 
      ifelse(c(is.na(country) & str_detect(cast, "Arjun") == T), "India", 
      ifelse(c(is.na(country) & str_detect(cast, "[Hh]yun") == T), "South Korea", 
      ifelse(c(is.na(country) & str_detect(cast, "Frank Grillo") == T), "United States", 
      ifelse(c(is.na(country) & str_detect(cast, "Fred Armisen") == T), "United States", 
      ifelse(c(is.na(country) & str_detect(cast, "Chris Rock") == T), "United States", 
      ifelse(c(is.na(country) & str_detect(cast, "Kevin Hart") == T), "United States", 
      ifelse(c(is.na(country) & str_detect(cast, "Oprah Winfrey") == T), "United States", 
      ifelse(c(is.na(country) & str_detect(cast, "Quincy Jones") == T), "United States", 
      ifelse(c(is.na(country) & str_detect(cast, "Iliza Shlesinger") == T), "United States", 
      ifelse(c(is.na(country) & str_detect(cast, "Bert Kreischer") == T), "United States", 
      ifelse(c(is.na(country) & str_detect(cast, "Killer Mike") == T), "United States", 
      ifelse(c(is.na(country) & str_detect(cast, "Stephen Fry") == T), "United Kingdom", 
      ifelse(c(is.na(country) & str_detect(cast, "[Rr]yoko") == T), "Japan", country)))))))))))))))))))))
  )


netflix = netflix %>% 
  mutate(
    country = 
      ifelse(c(is.na(country) & str_detect(cast, "America Young") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "Andy Samberg") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "Anthony Mackie") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "BeyoncÃ© Knowles-Carter") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "Bill Hicks") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "Bob Ross") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "Chuck D.") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "Andy Richter") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "Seth Rogen") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "Ron Perlman") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "Robert F. Kennedy") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "Puttichai Kasetsin,") == T), "Thailand",
      ifelse(c(is.na(country) & str_detect(cast, "Matthew Reese") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "Kang In-soo") == T), "South Korea",
      ifelse(c(is.na(country) & str_detect(cast, "Joe Rogan") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "Kim Eun-ah") == T), "South Korea",
      ifelse(c(is.na(country) & str_detect(cast, "Erin Mathews") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "Whitney Cummings") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "Yvonne Nelson") == T), "Ghana",
      ifelse(c(is.na(country) & str_detect(cast, "Wu Kang-jen") == T), "Taiwan",
      ifelse(c(is.na(country) & str_detect(cast, "Wanida Termthanaporn") == T), "Thailand",
      ifelse(c(is.na(country) & str_detect(cast, "Tony Hale") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "Taylor Swift") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "Tay Ping Hui") == T), "Singapore",
      ifelse(c(is.na(country) & str_detect(cast, "Taapsee Pannu") == T), "India",
      ifelse(c(is.na(country) & str_detect(cast, "Summer Meng") == T), "Taiwan",
      ifelse(c(is.na(country) & str_detect(cast, "Sornram Tappituk") == T), "Thailand",
      ifelse(c(is.na(country) & str_detect(cast, "Shahkrit Yamnarm") == T), "Thailand",
      ifelse(c(is.na(country) & str_detect(cast, "Sean Jindachot") == T), "Thailand",
      ifelse(c(is.na(country) & str_detect(cast, "Santiwithi Phrombut") == T), "Thailand",
      ifelse(c(is.na(country) & str_detect(cast, "Kapoor") == T), "India",
      ifelse(c(is.na(country) & str_detect(cast, "Henry Keane") == T), "United States",
      ifelse(c(is.na(country) & str_detect(cast, "Jeanette Aw") == T), "Singapore",
      ifelse(c(is.na(country) & str_detect(cast, "Jimmy Carr") == T), "United Kingdom",
      ifelse(c(is.na(country) & str_detect(cast, "Joseph May") == T), "United Kingdom",
      ifelse(c(is.na(country) & str_detect(cast, "Julie Tejwani") == T), "India",
      ifelse(c(is.na(country) & str_detect(cast, "Lapassalal Jiravechsoontornkul,") == T), "Thailand",
      ifelse(c(is.na(country) & str_detect(cast, "Li Nanxing") == T), "Singapore",
      ifelse(c(is.na(country) & str_detect(cast, "Sonal Kaushal") == T), "India",
      ifelse(c(is.na(country) & str_detect(cast, "Alan C. Lim") == T), "United States", country))))))))))))))))))))))))))))))))))))))))
  )

# Big brain solution 4: Leverage key words in description to help with determining country of origin 

netflix= netflix %>% 
  mutate(
    country = 
      ifelse(c(is.na(country) & str_detect(description, "Polish") == T), "Poland",
      ifelse(c(is.na(country) & str_detect(description, "Kuala") == T), "Malaysia",
      ifelse(c(is.na(country) & str_detect(description, "French") == T), "France",
      ifelse(c(is.na(country) & str_detect(description, "[Mm]exican") == T), "Mexico",
      ifelse(c(is.na(country) & str_detect(description, "Japan's top male") == T), "Japan", 
      ifelse(c(is.na(country) & str_detect(description, "Brazilian") == T), "Brazil", country))))))
  )

# For the rest of the unknown, just list it as "No idea" (but nicer)

netflix = netflix %>% mutate(country = ifelse(is.na(country), "Unknown", country))


# Figuring out what to do with MISSING DIRECTORS & CASTS.  The problem is that these missing entries are valid since the content of the show/movie is 
# focus on the subject matter rather than the cast (as in the case of reality TV shows and documentaries).  So without having to actuallly look up the thousand of 
# missing entries, let's just go with "Unknown/No Director(s)" and "Unknown/No Cast)". 


netflix = netflix %>% 
  mutate(
    director = ifelse(is.na(director), "Unknown/No Director(s)", director), 
    cast = ifelse(is.na(cast), "Unknown/No Cast", cast)
  )
  
  
# STEP 3.3 - The Pre-Processing: Long-Stringed Text 

# OK, so there are 5 variables (Directors, Cast, Country, Listed in and Description) where these will be a problem for.  The goal with this is to be able to 
# divide them out into relevant groups (i.e. main country of origin, headliner vs. cast, lead director vs. assistant, key words in description.). One method to achieve this is 
# through the use of separate() & pivot_() functions to make the separation workout and create unique identifiers that can be used for analysis.  
# The only thing is that I'll need to create a few data frames with each of these variables (except for description).

# Starting with director, we lucked out in that the first listed director turns out to be the lead director of the project.  
# So we can segregate that one from the rest as assistant directors. 


# Splitting by director

netflix_director_split = netflix %>% 
  separate(
    director, into = c("lead","assitant 1","assistant 2","assistant 3","assistant 4","assistant 5","assistant 6",
    "assistant 7","assistant 8","assistant 9","assistant 10","assistant 11","assistant 12"), sep = ", ") %>% 
  pivot_longer(lead:`assistant 12`, names_to = "director_type", values_to = "director_name") %>% 
  filter(!is.na(director_name)) %>% 
  mutate(director_type = ifelse(director_type != "lead", "assistant/guest", "lead"))

# Splitting by genre 

netflix_genre_split = netflix %>% 
  separate(listed_in, into = c('principal', 'secondary', 'tertiary'), sep = ",") %>% 
  pivot_longer(principal:tertiary, names_to = "listing_type", values_to = "genre") %>% 
  filter(!is.na(genre)) %>% 
  mutate(listing_type = ifelse(listing_type == "principal", "principal", 'secondary/tertiary'))

netflix_genre_split$genre = str_trim(netflix_genre_split$genre, side = 'both')


# Splitting by cast member

netflix_cast_split = netflix %>% 
  separate(
    cast, into = c("headliner", 'cast member 1', 'cast member 2', 'cast member 3', 'cast member 4', 'cast member 5', 'cast member 6', 'cast member 7', 
    'cast member 8', 'cast member 9', 'cast member 10', 'cast member 11', 'cast member 12', 'cast member 13', 'cast member 14', 'cast member 15', 'cast member 16', 
    'cast member 17', 'cast member 18', 'cast member 19', 'cast member 20', 'cast member 21', 'cast member 22', 'cast member 23', 'cast member 24', 'cast member 25', 
    'cast member 26', 'cast member 27', 'cast member 28', 'cast member 29', 'cast member 30', 'cast member 31', 'cast member 32', 'cast member 33', 'cast member 34', 
    'cast member 35', 'cast member 36', 'cast member 37', 'cast member 38', 'cast member 39', 'cast member 40', 'cast member 41', 'cast member 42', 'cast member 43', 
    'cast member 44', 'cast member 45', 'cast member 46', 'cast member 47', 'cast member 48', 'cast member 49'), sep = ", "
  ) %>% 
  pivot_longer(headliner:`cast member 49`, names_to = "cast_type", values_to = 'cast') %>% 
  filter(!is.na(cast)) %>% 
  mutate(cast_type = ifelse(cast_type == "headliner", "headliner", "supporting cast"))

# Splitting by Country 

netflix_country_split = netflix %>% 
  separate(
    country, c("main country", "secondary country", 'tertiary country', 'fourth country', "fifth country", 'sixth country', "seventh country", 'eighth country', 
    'nineth country', 'tenth country', 'eleventh country', 'twelfth country'), sep = ",") %>% 
  pivot_longer(`main country`:`twelfth country`, names_to = "country_type", values_to = "country_name")  %>% 
  filter(!is.na(country_name)) %>% 
  mutate(
    country_type = ifelse(country_type == "main country", 'main country', 'other country'), 
    country_name = ifelse(country_name == "", "Unknown Country", country_name)
  ) 

netflix_country_split$country_name = str_trim(netflix_country_split$country_name, side = 'both')

# For both country and genre, I've removed the potential white space that may exists when splitting up the data. 

# To handle the description, we need to figure out the keywords there that would provide value in determining it's content.  Obviously there are a lot of words that are used 
# to make the description grammatically correct, so those need to be filtered out (along with punctuation marks).

netflix_description = netflix %>% mutate(description = gsub('[\\,.;:!?"]', "", description))

netflix_description = netflix_description %>% mutate(description = stringi::stri_trans_general(description, "latin-ascii"))

netflix_description$original_description = netflix_description$description

netflix_description = netflix_description %>% unnest_tokens(output = word, input = description) %>% anti_join(stop_words, by = "word")

colnames(netflix_description) = c("show_id", 'type', 'title', 'director', 'cast', 'country', 'date_added', 'release_year', 'rating', 'duration', 'listed_in', 'original_description', "keywords")

netflix_description$keywords = str_trim(netflix_description$keywords, side = 'both')



# STEP 3.4: The Pre-Processing - Making all of the data sets 

# OK.... so YOU probably won't want to do this, but I went OCD on this in terms of figuring out all of the possible combinations of analysing this data.   

# KEYWORDS and GENRE

netflix_descriptionxgenre = netflix_description %>% 
   separate(listed_in, into = c('principal', 'secondary', 'tertiary'), sep = ",") %>% 
   pivot_longer(principal:tertiary, names_to = "listing_type", values_to = "genre") %>% 
   filter(!is.na(genre)) %>% 
   mutate(listing_type = ifelse(listing_type == "principal", "principal", 'secondary/tertiary'))

netflix_descriptionxgenre$genre = str_trim(netflix_descriptionxgenre$genre, side = 'both')  


#  KEYWORDS and LANGUAGE

netflix_descriptionxlanguage = netflix_description %>% 
  separate(
    country, c("main country", "secondary country", 'tertiary country', 'fourth country', "fifth country", 'sixth country', 
    "seventh country", 'eighth country', 'nineth country', 'tenth country', 'eleventh country', 'twelfth country'), sep = ",") %>% 
  pivot_longer(`main country`:`twelfth country`, names_to = "country_type", values_to = "country_name") %>% 
  filter(!is.na(country_name)) %>% 
  mutate(country_type = ifelse(country_type == "main country", 'main country', 'other country'), country_name = ifelse(country_name == "", "Unknown Country", country_name))
  
netflix_descriptionxlanguage$country_name = str_trim(netflix_descriptionxlanguage$country_name, side = 'both')

netflix_descriptionxlanguage = netflix_descriptionxlanguage %>% 
  mutate(
    english_or_not = 
      ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
      ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
  ) %>% 
  filter(!is.na(english_or_not)) # To deal with those countries I literally have no idea about...
 
 
# DIRECTOR and CAST 
 
 netflix_castxdirector_df = netflix_director_split %>%  
  separate(
    cast, into = c("headliner", 'cast member 1', 'cast member 2', 'cast member 3', 'cast member 4', 'cast member 5', 'cast member 6', 'cast member 7', 
    'cast member 8', 'cast member 9', 'cast member 10', 'cast member 11', 'cast member 12', 'cast member 13', 'cast member 14', 'cast member 15', 'cast member 16', 
    'cast member 17', 'cast member 18', 'cast member 19', 'cast member 20', 'cast member 21', 'cast member 22', 'cast member 23', 'cast member 24', 'cast member 25', 
    'cast member 26', 'cast member 27', 'cast member 28', 'cast member 29', 'cast member 30', 'cast member 31', 'cast member 32', 'cast member 33', 'cast member 34', 
    'cast member 35', 'cast member 36', 'cast member 37', 'cast member 38', 'cast member 39', 'cast member 40', 'cast member 41', 'cast member 42', 'cast member 43', 
    'cast member 44', 'cast member 45', 'cast member 46', 'cast member 47', 'cast member 48', 'cast member 49'), sep = ", ") %>% 
  pivot_longer(headliner:`cast member 49`, names_to = "cast_type", values_to = 'cast') %>% 
  filter(!is.na(cast)) %>% 
  mutate(cast_type = ifelse(cast_type == "headliner", "headliner", "supporting cast"))


# DIRECTOR and GENRE
  
netflix_genrexdirector_df = netflix_director_split %>% 
  separate(listed_in, into = c('principal', 'secondary', 'tertiary'), sep = ",") %>% 
  pivot_longer(principal:tertiary, names_to = "listing_type", values_to = "genre") %>% 
  filter(!is.na(genre)) %>% 
  mutate(listing_type = ifelse(listing_type == "principal", "principal", 'secondary/tertiary'))

netflix_genrexdirector_df$genre = str_trim(netflix_genrexdirector_df$genre, side = 'both')
  
  
# DIRECTOR and LANGUAGE  
  
netflix_countryxdirector_df = netflix_director_split %>%  
   separate(country, c("main country", "secondary country", 'tertiary country', 'fourth country', "fifth country", 'sixth country', "seventh country", 'eighth country', 
    'nineth country', 'tenth country', 'eleventh country', 'twelfth country'), sep = ",") %>% 
  pivot_longer(`main country`:`twelfth country`, names_to = "country_type", values_to = "country_name")  %>% 
  filter(!is.na(country_name)) %>% 
  mutate(
    country_type = ifelse(country_type == "main country", 'main country', 'other country'), 
    country_name = ifelse(country_name == "", "Unknown Country", country_name)
  )  
 
netflix_countryxdirector_df$country_name = str_trim(netflix_countryxdirector_df$country_name, side = 'both')

netflix_countryxdirector_df = netflix_countryxdirector_df %>% 
  mutate(
    english_or_not = 
      ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
      ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
  ) %>% 
  filter(!is.na(english_or_not)) # To deal with those countries I literally have no idea about...
  
# CAST and GENRE
 
 netflix_genrexcast_df = netflix_cast_split %>% 
    separate(listed_in, into = c('principal', 'secondary', 'tertiary'), sep = ",") %>% 
    pivot_longer(principal:tertiary, names_to = "listing_type", values_to = "genre") %>% 
    filter(!is.na(genre)) %>% 
    mutate(listing_type = ifelse(listing_type == "principal", "principal", 'secondary/tertiary'))

netflix_genrexcast_df$genre = str_trim(netflix_genrexcast_df$genre, side = 'both')

# CAST and LANGUAGE 

netflix_countryxcast_df = netflix_cast_split %>% 
  separate(
    country, c("main country", "secondary country", 'tertiary country', 'fourth country', "fifth country", 'sixth country', "seventh country", 'eighth country', '
    nineth country', 'tenth country', 'eleventh country', 'twelfth country'), sep = ",") %>% 
  pivot_longer(`main country`:`twelfth country`, names_to = "country_type", values_to = "country_name")  %>% 
  filter(!is.na(country_name)) %>% 
  mutate(country_type = ifelse(country_type == "main country", 'main country', 'other country'), country_name = ifelse(country_name == "", "Unknown Country", country_name)) 
 
 netflix_countryxcast_df$country_name = str_trim(netflix_countryxcast_df$country_name, side = 'both')
 
 netflix_countryxcast_df = netflix_countryxcast_df %>% 
  mutate(
    english_or_not = 
      ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
      ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
  ) %>% 
  filter(!is.na(english_or_not))    
  

# LANGUAGE and GENRE

netflix_genresxcountry_df = netflix_country_split %>% 
  separate(listed_in, into = c('principal', 'secondary', 'tertiary'), sep = ",") %>% 
  pivot_longer(principal:tertiary, names_to = "listing_type", values_to = "genre") %>% 
  filter(!is.na(genre)) %>% 
  mutate(listing_type = ifelse(listing_type == "principal", "principal", 'secondary/tertiary'))
  
netflix_genresxcountry_df = netflix_genresxcountry_df %>% 
  mutate(
    english_or_not = 
      ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
      ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
  ) %>% 
  filter(!is.na(english_or_not))

netflix_genresxcountry_df$genre = str_trim(netflix_genresxcountry_df$genre, side = 'both') 


# DIRECTOR, CAST and LANGUAGE

netflix_countryxcastxdirector_df = netflix_castxdirector_df %>% 
  separate(country, c("main country", "secondary country", 'tertiary country', 'fourth country', "fifth country", 'sixth country', "seventh country", 
    'eighth country', 'nineth country', 'tenth country', 'eleventh country', 'twelfth country'), sep = ",") %>% 
  pivot_longer(`main country`:`twelfth country`, names_to = "country_type", values_to = "country_name")  %>% 
  filter(!is.na(country_name)) %>% 
  mutate(
    country_type = ifelse(country_type == "main country", 'main country', 'other country'), 
    country_name = ifelse(country_name == "", "Unknown Country", country_name)
  ) 

netflix_countryxcastxdirector_df$country_name = str_trim(netflix_countryxcastxdirector_df$country_name, side = "both")

netflix_countryxcastxdirector_df = netflix_countryxcastxdirector_df %>% 
  mutate(
    english_or_not = 
      ifelse(c(country_type == "main country" & country_name == "United States"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "United Kingdom"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Canada"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "New Zealand"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Australia"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Ireland"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Jamaica"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Barbados"), "English Speaking", 
      ifelse(c(country_type == "main country" & country_name == "Belize"), "English Speaking", 
      ifelse(country_type == "main country", "Non-English Speaking", NA))))))))))
  ) %>% 
  filter(!is.na(english_or_not))


# DIRECTOR, CAST, GENRES

netflix_genrexcastxdirector_df = netflix_castxdirector_df %>% 
  separate(listed_in, into = c('principal', 'secondary', 'tertiary'), sep = ",") %>% 
  pivot_longer(principal:tertiary, names_to = "listing_type", values_to = "genre") %>% 
  filter(!is.na(genre)) %>% 
  mutate(listing_type = ifelse(listing_type == "principal", "principal", 'secondary/tertiary'))

netflix_genrexcastxdirector_df$genre = str_trim(netflix_genrexcastxdirector_df$genre, side = 'both')
  

# DIRECTOR, LANGUAGE and GENRE 

netflix_genrexcountryxdirector_df = netflix_countryxdirector_df %>% 
  separate(listed_in, into = c('principal', 'secondary', 'tertiary'), sep = ",") %>% 
  pivot_longer(principal:tertiary, names_to = "listing_type", values_to = "genre") %>% 
  filter(!is.na(genre)) %>% 
  mutate(listing_type = ifelse(listing_type == "principal", "principal", 'secondary/tertiary'))

netflix_genrexcountryxdirector_df$genre = str_trim(netflix_genrexcountryxdirector_df$genre, side = 'both')


# CAST, LANGUAGE, GENRE 

netflix_genrexcountryxcast_df = netflix_countryxcast_df %>% 
  separate(listed_in, into = c('principal', 'secondary', 'tertiary'), sep = ",") %>% 
  pivot_longer(principal:tertiary, names_to = "listing_type", values_to = "genre") %>% 
  filter(!is.na(genre)) %>% 
  mutate(listing_type = ifelse(listing_type == "principal", "principal", 'secondary/tertiary'))
 
netflix_genrexcountryxcast_df$genre = str_trim(netflix_genrexcountryxcast_df$genre, side = 'both')


# CAST, LANGUAGE, DIRECTOR and GENRE 

netflix_genrexcountryxcastxdirector_df = netflix_countryxcastxdirector_df %>% 
  separate(listed_in, into = c('principal', 'secondary', 'tertiary'), sep = ",") %>% 
  pivot_longer(principal:tertiary, names_to = "listing_type", values_to = "genre") %>% 
  filter(!is.na(genre)) %>% 
  mutate(listing_type = ifelse(listing_type == "principal", "principal", 'secondary/tertiary'))

netflix_genrexcountryxcastxdirector_df$genre = str_trim(netflix_genrexcountryxcastxdirector_df$genre, side = 'both')
